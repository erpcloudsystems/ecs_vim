!(function () {
    "use strict";
    "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self && self;
    var t,
        e =
            ((function (t, e) {
                var i;
                t.exports = i = {
                    attachTo: function (t, e) {
                        if (void 0 !== t.scannerDetectionData) throw new Error("onScan.js is already initialized for DOM element " + t);
                        var a = {
                            onScan: function (t, e) {},
                            onScanError: function (t) {},
                            onKeyProcess: function (t, e) {},
                            onKeyDetect: function (t, e) {},
                            onPaste: function (t, e) {},
                            keyCodeMapper: function (t) {
                                return i.decodeKeyEvent(t);
                            },
                            onScanButtonLongPress: function () {},
                            scanButtonKeyCode: !1,
                            scanButtonLongPressTime: 500,
                            timeBeforeScanTest: 100,
                            avgTimeByChar: 30,
                            minLength: 6,
                            suffixKeyCodes: [9, 13],
                            prefixKeyCodes: [],
                            ignoreIfFocusOn: !1,
                            stopPropagation: !1,
                            preventDefault: !1,
                            captureEvents: !1,
                            reactToKeydown: !0,
                            reactToPaste: !1,
                            singleScanQty: 1,
                        };
                        return (
                            (e = this._mergeOptions(a, e)),
                            (t.scannerDetectionData = { options: e, vars: { firstCharTime: 0, lastCharTime: 0, accumulatedString: "", testTimer: !1, longPressTimeStart: 0, longPressed: !1 } }),
                            !0 === e.reactToPaste && t.addEventListener("paste", this._handlePaste, e.captureEvents),
                            !1 !== e.scanButtonKeyCode && t.addEventListener("keyup", this._handleKeyUp, e.captureEvents),
                            (!0 !== e.reactToKeydown && !1 === e.scanButtonKeyCode) || t.addEventListener("keydown", this._handleKeyDown, e.captureEvents),
                            this
                        );
                    },
                    detachFrom: function (t) {
                        t.scannerDetectionData.options.reactToPaste && t.removeEventListener("paste", this._handlePaste),
                            !1 !== t.scannerDetectionData.options.scanButtonKeyCode && t.removeEventListener("keyup", this._handleKeyUp),
                            t.removeEventListener("keydown", this._handleKeyDown),
                            (t.scannerDetectionData = void 0);
                    },
                    getOptions: function (t) {
                        return t.scannerDetectionData.options;
                    },
                    setOptions: function (t, e) {
                        switch (t.scannerDetectionData.options.reactToPaste) {
                            case !0:
                                !1 === e.reactToPaste && t.removeEventListener("paste", this._handlePaste);
                                break;
                            case !1:
                                !0 === e.reactToPaste && t.addEventListener("paste", this._handlePaste);
                        }
                        switch (t.scannerDetectionData.options.scanButtonKeyCode) {
                            case !1:
                                !1 !== e.scanButtonKeyCode && t.addEventListener("keyup", this._handleKeyUp);
                                break;
                            default:
                                !1 === e.scanButtonKeyCode && t.removeEventListener("keyup", this._handleKeyUp);
                        }
                        return (t.scannerDetectionData.options = this._mergeOptions(t.scannerDetectionData.options, e)), this._reinitialize(t), this;
                    },
                    decodeKeyEvent: function (t) {
                        var e = this._getNormalizedKeyNum(t);
                        switch (!0) {
                            case e >= 48 && e <= 90:
                            case e >= 106 && e <= 111:
                                if (void 0 !== t.key && "" !== t.key) return t.key;
                                var i = String.fromCharCode(e);
                                switch (t.shiftKey) {
                                    case !1:
                                        i = i.toLowerCase();
                                        break;
                                    case !0:
                                        i = i.toUpperCase();
                                }
                                return i;
                            case e >= 96 && e <= 105:
                                return e - 96 + 0;
                        }
                        return "";
                    },
                    simulate: function (t, e) {
                        return (
                            this._reinitialize(t),
                            Array.isArray(e)
                                ? e.forEach(function (t) {
                                      var e = {};
                                      ("object" != typeof t && "function" != typeof t) || null === t ? (e.keyCode = parseInt(t)) : (e = t);
                                      var i = new KeyboardEvent("keydown", e);
                                      document.dispatchEvent(i);
                                  })
                                : this._validateScanCode(t, e),
                            this
                        );
                    },
                    _reinitialize: function (t) {
                        var e = t.scannerDetectionData.vars;
                        (e.firstCharTime = 0), (e.lastCharTime = 0), (e.accumulatedString = "");
                    },
                    _isFocusOnIgnoredElement: function (t) {
                        var e = t.scannerDetectionData.options.ignoreIfFocusOn;
                        if (!e) return !1;
                        var i = document.activeElement;
                        if (Array.isArray(e)) {
                            for (var a = 0; a < e.length; a++) if (!0 === i.matches(e[a])) return !0;
                        } else if (i.matches(e)) return !0;
                        return !1;
                    },
                    _validateScanCode: function (t, e) {
                        var a,
                            n = t.scannerDetectionData,
                            o = n.options,
                            s = n.options.singleScanQty,
                            r = n.vars.firstCharTime,
                            c = n.vars.lastCharTime,
                            d = {};
                        switch (!0) {
                            case e.length < o.minLength:
                                d = { message: "Receieved code is shorter then minimal length" };
                                break;
                            case c - r > e.length * o.avgTimeByChar:
                                d = { message: "Receieved code was not entered in time" };
                                break;
                            default:
                                return o.onScan.call(t, e, s), (a = new CustomEvent("scan", { detail: { scanCode: e, qty: s } })), t.dispatchEvent(a), i._reinitialize(t), !0;
                        }
                        return (
                            (d.scanCode = e),
                            (d.scanDuration = c - r),
                            (d.avgTimeByChar = o.avgTimeByChar),
                            (d.minLength = o.minLength),
                            o.onScanError.call(t, d),
                            (a = new CustomEvent("scanError", { detail: d })),
                            t.dispatchEvent(a),
                            i._reinitialize(t),
                            !1
                        );
                    },
                    _mergeOptions: function (t, e) {
                        var i,
                            a = {};
                        for (i in t) Object.prototype.hasOwnProperty.call(t, i) && (a[i] = t[i]);
                        for (i in e) Object.prototype.hasOwnProperty.call(e, i) && (a[i] = e[i]);
                        return a;
                    },
                    _getNormalizedKeyNum: function (t) {
                        return t.which || t.keyCode;
                    },
                    _handleKeyDown: function (t) {
                        var e = i._getNormalizedKeyNum(t),
                            a = this.scannerDetectionData.options,
                            n = this.scannerDetectionData.vars,
                            o = !1;
                        if (!1 !== a.onKeyDetect.call(this, e, t) && !i._isFocusOnIgnoredElement(this))
                            if (!1 === a.scanButtonKeyCode || e != a.scanButtonKeyCode) {
                                switch (!0) {
                                    case n.firstCharTime && -1 !== a.suffixKeyCodes.indexOf(e):
                                        t.preventDefault(), t.stopImmediatePropagation(), (o = !0);
                                        break;
                                    case !n.firstCharTime && -1 !== a.prefixKeyCodes.indexOf(e):
                                        t.preventDefault(), t.stopImmediatePropagation(), (o = !1);
                                        break;
                                    default:
                                        var s = a.keyCodeMapper.call(this, t);
                                        if (null === s) return;
                                        (n.accumulatedString += s), a.preventDefault && t.preventDefault(), a.stopPropagation && t.stopImmediatePropagation(), (o = !1);
                                }
                                n.firstCharTime || (n.firstCharTime = Date.now()),
                                    (n.lastCharTime = Date.now()),
                                    n.testTimer && clearTimeout(n.testTimer),
                                    o ? (i._validateScanCode(this, n.accumulatedString), (n.testTimer = !1)) : (n.testTimer = setTimeout(i._validateScanCode, a.timeBeforeScanTest, this, n.accumulatedString)),
                                    a.onKeyProcess.call(this, s, t);
                            } else n.longPressed || ((n.longPressTimer = setTimeout(a.onScanButtonLongPress, a.scanButtonLongPressTime, this)), (n.longPressed = !0));
                    },
                    _handlePaste: function (t) {
                        var e = this.scannerDetectionData.options,
                            a = this.scannerDetectionData.vars,
                            n = (event.clipboardData || window.clipboardData).getData("text");
                        i._isFocusOnIgnoredElement(this) || (t.preventDefault(), e.stopPropagation && t.stopImmediatePropagation(), e.onPaste.call(this, n, event), (a.firstCharTime = 0), (a.lastCharTime = 0), i._validateScanCode(this, n));
                    },
                    _handleKeyUp: function (t) {
                        if (!i._isFocusOnIgnoredElement(this)) {
                            var e = i._getNormalizedKeyNum(t);
                            e == this.scannerDetectionData.options.scanButtonKeyCode && (clearTimeout(this.scannerDetectionData.vars.longPressTimer), (this.scannerDetectionData.vars.longPressed = !1));
                        }
                    },
                    isScanInProgressFor: function (t) {
                        return t.scannerDetectionData.vars.firstCharTime > 0;
                    },
                    isAttachedTo: function (t) {
                        return void 0 !== t.scannerDetectionData;
                    },
                };
            })((t = { exports: {} }), t.exports),
            t.exports);
    (erpnext.PointOfSale.ItemSelector = class {
        constructor(t) {
            t.frm;
            var e = t.wrapper,
                i = t.events,
                a = t.pos_profile,
                n = t.settings;
            (this.wrapper = e),
                (this.events = i),
                (this.pos_profile = a),
                (this.hide_images = n.hide_images),
                (this.auto_add_item = n.auto_add_item_to_cart),
                (this.minimum_sales_quantity = 0),
                (this.maximum_sales_quantity = 0),
                (this.bundle_item = void 0),
                this.inti_component();
        }
        inti_component() {
            this.prepare_dom(), this.make_search_bar(), this.load_items_data(), this.bind_events(), this.attach_shortcuts(), this.get_item_group();
        }
        prepare_dom() {
            this.wrapper.append(
                '  <section class="items-selector">\n            <div class="pos-item-category search-item-group" style="background:grey;height:100%;width:10%;position:absolute;">\n\t\t\t\t\t\t\t<ul class="pos-item-cat dropdown-menu" style=" display: block;\n                            position: unset;\n                            min-width: unset;\n                            min-height: 100%;\n                            width: 100%;\n                            background-color: #485663;\n                            color: #e6e6e6;\n                            overflow: hidden;\n                            margin: 0px;"></ul>\n\t\t\t\t\t\t\t<ul class="pos-item-sub-cat dropdown-sub-menu" style=" \n\t\t\t\t\t\t\tdisplay: none;\n                            position: unset;\n                            min-width: unset;\n                            min-height: 100%;\n                            width: 50%;\n                            background-color:#rgb(99 128 155);\n                            color: #e6e6e6;\n                            overflow: hidden;\n                            margin: 0px;"></ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n            \n                 <div class="filter-section" style="width:80%;align-self:flex-end;">\n                     <div class="label" style="display:none;">All Items</div>\n\t\t\t\t\t <div class="item-group-field"></div>\n                     <div class="search-field"></div>\n\t\t\t\t\t <div class="pagination"></div>\n                     \n                 </div>\n\t\t\t\t\n                 <div class="items-container" style="width:80%;align-self:flex-end;"></div>\n               \n             </section>'
            ),
                (this.$component = this.wrapper.find(".items-selector")),
                (this.$items_container = this.$component.find(".items-container")),
                this.$component.find(".filter-section").css({ padding: "", "padding-left": "35px", "padding-bottom": "" }),
                this.$component.find(".pagination").css({ padding: "10px 0px 0px 0px", margin: "0px 0px 10px 0px", width: "80%", "align-self": "flex-end" }),
                this.$component.css("height", "90vh"),
                (this.search_item_group = this.wrapper.find(".search-item-group")),
                this.search_item_group.find(".dropdown-sub-menu").css({ padding: "4px", "font-size": "var(--text-md)", "max-height": "500px" });
        }
        async load_items_data() {
            var t = this;
            if (!this.item_group) {
                var e = await frappe.db.get_value("Item Group", { lft: 1, is_group: 1 }, "name");
                this.parent_item_group = e.message.name;
            }
            if (!this.price_list) {
                var i = await frappe.db.get_value("POS Profile", this.pos_profile, "selling_price_list");
                this.price_list = i.message.selling_price_list;
            }
            this.get_items({}).then(function (e) {
                var i = e.message;
                t.render_item_list(i.items), t.pagination();
            });
        }
        get_items(t) {
            var e = t.start;
            void 0 === e && (e = 0);
            var i = t.page_length;
            void 0 === i && (i = 40);
            var a = t.search_value;
            void 0 === a && (a = "");
            var n = this.events.get_frm().doc,
                o = (n && n.selling_price_list) || this.price_list,
                s = this.item_group,
                r = this.pos_profile;
            if ((!s && (s = this.parent_item_group), o))
                return frappe.call({ method: "ecs_vim.doctype_triggers.point_of_sale.point_of_sale.get_pos_items", freeze: !0, args: { start: e, page_length: i, price_list: o, item_group: s, search_value: a, pos_profile: r } });
        }
        render_item_list(t) {
            var e = this;
            this.$items_container.html(""),
                t.forEach(function (t) {
                    var i = e.get_item_html(t);
                    e.$items_container.append(i);
                });
        }
        get_item_html(t) {
            var e = this,
                i = t.item_image,
                a = t.serial_no,
                n = t.batch_no,
                o = (t.barcode, t.actual_qty),
                s = t.stock_uom,
                r = t.warehouse_reorder_level;
            if (r) var c = o > r ? "green" : "orange";
            else c = o > 10 ? "green" : o <= 0 ? "red" : "orange";
            var d = c,
                _ = o;
            return (
                Math.round(_) > 999 && (_ = (_ = Math.round(_) / 1e3).toFixed(1) + "K"),
                this.$component.find(".item-rate").css({ "background-color": "#0799a3bd" }),
                '<div class="item-wrapper"\n\t\t\t\tdata-item-code="' +
                    escape(t.item_code) +
                    '" data-serial-no="' +
                    escape(a) +
                    '"\n\t\t\t\tdata-batch-no="' +
                    escape(n) +
                    '" data-uom="' +
                    escape(s) +
                    '" data-item-rate="' +
                    escape(t.price_list_rate) +
                    '"\n\t\t\t\ttitle="' +
                    t.item_name +
                    '"\n                data-minimum-sales-qty="' +
                    escape(t.minimum_sales_quantity) +
                    '"\n                data-maximum-sales-qty="' +
                    escape(t.maximum_sales_quantity) +
                    '"\n                data-bundle-item="' +
                    escape(t.bundle_item) +
                    '">\n\n\t\t\t\t' +
                    (!e.hide_images && i
                        ? '<div class="item-qty-pill">\n\t\t\t\t\t\t\t<span class="indicator-pill whitespace-nowrap ' +
                          d +
                          '">' +
                          _ +
                          '</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="flex items-center justify-center h-32 border-b-grey text-6xl text-grey-100">\n\t\t\t\t\t\t\t<img class="h-full" src="' +
                          i +
                          '" alt="' +
                          frappe.get_abbr(t.item_name) +
                          '" style="object-fit: cover;height:135px;">\n\t\t\t\t\t\t</div>'
                        : '<div class="item-qty-pill">\n\t\t\t\t\t\t\t<span class="indicator-pill whitespace-nowrap ' +
                          d +
                          '">' +
                          _ +
                          '</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="item-display abbr">' +
                          frappe.get_abbr(t.item_name) +
                          "</div>") +
                    '\n\n\t\t\t\t<div class="item-detail">\n\t\t\t\t\t<div class="item-name">\n\t\t\t\t\t\t' +
                    frappe.ellipsis(t.item_name, 18) +
                    '\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="item-rate">' +
                    (format_currency(t.price_list_rate, t.currency, 2) || 0) +
                    "</div>\n\t\t\t\t</div>\n\t\t\t</div>"
            );
        }
        make_search_bar() {
            var t = this,
                e = t.events.get_frm().doc;
            this.$component.find(".search-field").html(""),
                this.$component.find(".item-group-field").html(""),
                this.$component.find(".search-field").css({ "grid-column": "span 5/span 5", width: "200px" }),
                (this.search_field = frappe.ui.form.make_control({
                    df: { label: __("Search"), fieldtype: "Data", placeholder: __("Search by item code, serial number or barcode") },
                    parent: this.$component.find(".search-field"),
                    render_input: !0,
                })),
                (this.item_group_field = frappe.ui.form.make_control({
                    df: {
                        label: __("Item Group"),
                        fieldtype: "Link",
                        options: "Item Group",
                        placeholder: __("Select item group"),
                        onchange: function () {
                            (t.item_group = this.value), !t.item_group && (t.item_group = t.parent_item_group), t.filter_items();
                        },
                        get_query: function () {
                            return { query: "erpnext.selling.page.point_of_sale.point_of_sale.item_group_query", filters: { pos_profile: e ? e.pos_profile : "" } };
                        },
                    },
                    parent: this.$component.find(".item-group-field"),
                    render_input: !0,
                }));
        }
        set_search_value(t) {
            $(this.search_field.$input[0]).val(t).trigger("input");
        }
        bind_events() {
            var t = this,
                i = this;
            (window.onScan = e),
                (e.decodeKeyEvent = function (t) {
                    var e = this._getNormalizedKeyNum(t);
                    switch (!0) {
                        case e >= 48 && e <= 90:
                        case e >= 106 && e <= 111:
                        case (e >= 160 && e <= 164) || 170 == e:
                        case e >= 186 && e <= 194:
                        case e >= 219 && e <= 222:
                        case 32 == e:
                            if (void 0 !== t.key && "" !== t.key) return t.key;
                            var i = String.fromCharCode(e);
                            switch (t.shiftKey) {
                                case !1:
                                    i = i.toLowerCase();
                                    break;
                                case !0:
                                    i = i.toUpperCase();
                            }
                            return i;
                        case e >= 96 && e <= 105:
                            return e - 96 + 0;
                    }
                    return "";
                }),
                e.attachTo(document, {
                    onScan: function (e) {
                        t.search_field && t.$component.is(":visible") && (t.search_field.set_focus(), t.set_search_value(e), (t.barcode_scanned = !0));
                    },
                }),
                this.$component.on("click", ".item-wrapper", function () {
                    var t = $(this),
                        e = unescape(t.attr("data-item-code")),
                        a = unescape(t.attr("data-batch-no")),
                        n = unescape(t.attr("data-serial-no")),
                        o = unescape(t.attr("data-uom")),
                        s = unescape(t.attr("data-item-rate")),
                        r = unescape(t.attr("data-minimum-sales-qty")),
                        c = unescape(t.attr("data-maximum-sales-qty")),
                        d = unescape(t.attr("data-bundle-item"));
                    if (
                        ((cur_pos.item_selector.minimum_sales_quantity = r),
                        (cur_pos.item_selector.maximum_sales_quantity = c),
                        (cur_pos.item_selector.bundle_item = d),
                        console.log(unescape(t.attr("data-item-rate")), "ITM"),
                        (a = "undefined" === a ? void 0 : a),
                        (n = "undefined" === n ? void 0 : n),
                        (o = "undefined" === o ? void 0 : o),
                        r && r > 0)
                    ) {
                        unescape(t.attr("data-minimum-sales-qty"));
                        cur_pos.item_selector.bundle_item &&
                        "" != cur_pos.item_selector.bundle_item &&
                        "null" != cur_pos.item_selector.bundle_item &&
                        "undefined" != cur_pos.item_selector.bundle_item &&
                        0 != cur_pos.item_selector.bundle_item
                            ? ((d = 1),
                              i.events.bundle_item_selected({ field: "qty", value: r, item: { item_code: e, batch_no: a, serial_no: n, uom: o, rate: s } }).then(function () {
                                  setTimeout(function () {
                                      cur_frm.doc.items.forEach(function (t) {
                                          cur_pos.cart.update_item_html(t);
                                      });
                                  }, 800);
                              }))
                            : ((d = 0),
                              i.events.item_selected({ field: "qty", value: r, item: { item_code: e, batch_no: a, serial_no: n, uom: o, rate: s } }).then(function () {
                                  setTimeout(function () {
                                      cur_frm.doc.items.forEach(function (t) {
                                          cur_pos.cart.update_item_html(t);
                                      });
                                  }, 800);
                              }));
                    } else
                        cur_pos.item_selector.bundle_item &&
                        "" != cur_pos.item_selector.bundle_item &&
                        "null" != cur_pos.item_selector.bundle_item &&
                        "undefined" != cur_pos.item_selector.bundle_item &&
                        0 != cur_pos.item_selector.bundle_item
                            ? ((d = 1),
                              i.events.bundle_item_selected({ field: "qty", value: "+1", item: { item_code: e, batch_no: a, serial_no: n, uom: o, rate: s } }).then(function () {
                                  setTimeout(function () {
                                      cur_frm.doc.items.forEach(function (t) {
                                          cur_pos.cart.update_item_html(t);
                                      });
                                  }, 800);
                              }))
                            : ((d = 0),
                              i.events.item_selected({ field: "qty", value: "+1", item: { item_code: e, batch_no: a, serial_no: n, uom: o, rate: s } }).then(function () {
                                  setTimeout(function () {
                                      cur_frm.doc.items.forEach(function (t) {
                                          cur_pos.cart.update_item_html(t);
                                      });
                                  }, 800);
                              }));
                    i.set_search_value("");
                }),
                this.search_field.$input.on("input", function (e) {
                    clearTimeout(t.last_search),
                        (t.last_search = setTimeout(function () {
                            var i = e.target.value;
                            t.filter_items({ search_term: i });
                        }, 300));
                });
        }
        attach_shortcuts() {
            var t = this,
                e = frappe.utils.is_mac() ? "⌘" : "Ctrl";
            this.search_field.parent.attr("title", e + "+I"),
                frappe.ui.keys.add_shortcut({
                    shortcut: "ctrl+i",
                    action: function () {
                        return t.search_field.set_focus();
                    },
                    condition: function () {
                        return t.$component.is(":visible");
                    },
                    description: __("Focus on search input"),
                    ignore_inputs: !0,
                    page: cur_page.page.page,
                }),
                this.item_group_field.parent.attr("title", e + "+G"),
                frappe.ui.keys.add_shortcut({
                    shortcut: "ctrl+g",
                    action: function () {
                        return t.item_group_field.set_focus();
                    },
                    condition: function () {
                        return t.$component.is(":visible");
                    },
                    description: __("Focus on Item Group filter"),
                    ignore_inputs: !0,
                    page: cur_page.page.page,
                }),
                frappe.ui.keys.on("enter", function () {
                    t.$component.is(":visible") &&
                        "" !== t.search_field.get_value() &&
                        (1 == t.items.length
                            ? (t.$items_container.find(".item-wrapper").click(), frappe.utils.play_sound("submit"), $(t.search_field.$input[0]).val("").trigger("input"))
                            : 0 == t.items.length &&
                              t.barcode_scanned &&
                              (frappe.show_alert({ message: __("No items found. Scan barcode again."), indicator: "orange" }),
                              frappe.utils.play_sound("error"),
                              (t.barcode_scanned = !1),
                              $(t.search_field.$input[0]).val("").trigger("input")));
                });
        }
        filter_items(t) {
            var e = this;
            void 0 === t && (t = {});
            var i = t.search_term;
            if ((void 0 === i && (i = ""), (i = i.toLowerCase()), (this.search_index = this.search_index || {}), this.search_index[i])) {
                var a = this.search_index[i];
                return (this.items = a), this.render_item_list(a), this.pagination(), void (this.auto_add_item && 1 == this.items.length && this.add_filtered_item_to_cart());
            }
            this.get_items({ search_value: i }).then(function (t) {
                var a = t.message,
                    n = a.items,
                    o = (a.serial_no, a.batch_no, a.barcode);
                i && !o && (e.search_index[i] = n), (e.items = n), e.render_item_list(n), e.pagination(), 1 == e.items.length && i && e.auto_add_item && 1 == e.items.length && e.add_filtered_item_to_cart();
            });
        }
        add_filtered_item_to_cart() {
            this.$items_container.find(".item-wrapper").click();
        }
        resize_selector(t) {
            t ? this.$component.find(".filter-section").css("grid-template-columns", "repeat(1, minmax(0, 1fr))") : this.$component.find(".filter-section").css("grid-template-columns", "repeat(12, minmax(0, 1fr))"),
                t ? this.$component.find(".search-field").css("margin", "var(--margin-sm) 0px") : this.$component.find(".search-field").css("margin", "0px var(--margin-sm)"),
                t ? this.$component.css("grid-column", "span 2 / span 2") : this.$component.css("grid-column", "span 6 / span 6"),
                t ? this.$items_container.css("grid-template-columns", "repeat(1, minmax(0, 1fr))") : this.$items_container.css("grid-template-columns", "repeat(4, minmax(0, 1fr))"),
                t ? this.$component.find(".search-item-group").css("width", "5%") : this.$component.find(".search-item-group").css("width", "10%"),
                this.item_sub_groups.length > 0 && (this.$component.find(".filter-section").is(":visible") ? this.$component.find(".search-item-group").css("width", "5%") : this.$component.find(".search-item-group").css("width", "20%"));
        }
        toggle_component(t) {
            t ? this.$component.css("display", "flex") : this.$component.css("display", "none");
        }
        show_sub_group(t) {
            t
                ? (this.$component.find(".pos-item-sub-cat").css({ display: "block", width: "80%" }),
                  this.$component.find(".filter-section").css({ display: "none" }),
                  this.$component.find(".items-container").css({ display: "none" }),
                  this.$component.find(".pos-item-cat").css({ width: "20%" }),
                  this.$component.find(".search-item-group").css({ width: "50%" }))
                : (this.$component.find(".pos-item-sub-cat").css({ display: "none" }),
                  this.$component.find(".pos-item-cat").css({ width: "100%" }),
                  this.$component.find(".items-container").css({ display: "grid" }),
                  this.$component.find(".filter-section").css({ display: "grid" }),
                  this.$component.find(".search-item-group").css({ width: "10%" })),
                this.$component.find(".filter-section").is(":visible") ? this.$component.find(".search-item-group").css("width", "10%") : this.$component.find(".search-item-group").css("width", "20%");
        }
        get_item_group() {
            var t = this;
            frappe.call({ method: "ecs_vim.doctype_triggers.point_of_sale.point_of_sale.get_item_group", freeze: !0, args: { pos_profile: t.pos_profile ? t.pos_profile : "" } }).then(function (e) {
                (t.item_groups = e.message.item_group_dict), (t.search_item_group = t.wrapper.find(".search-item-group"));
                var i = t
                    .get_sorted_item_groups()
                    .map(function (t) {
                        return "<li style='margin: 0 5px;border-bottom: 1px solid #cccac6;font-size: 11px;padding: 15px 1px;'><a class='option' style=\"padding: 0;\" data-value='" + t + "'>" + t + "</a>\n\t\t\t\t\n\t\t\t\t</li>";
                    })
                    .join("");
                t.search_item_group.find(".dropdown-menu").html(i),
                    t.search_item_group.on("click", ".dropdown-menu a", function () {
                        cur_pos.combo_item_details.wrapper.find(".combo-item-details-container").is(":visible") && frappe.throw("Please close Item Bundle popup"),
                            t.item_group_field.set_value($(this).attr("data-value")),
                            cur_pos.item_details.wrapper.find(".item-details-container").is(":visible") && cur_pos.item_details.events.close_item_details(),
                            t.show_sub_group(!1),
                            t.get_item_sub_group($(this).attr("data-value"));
                    }),
                    t.search_item_group.find(".dropdown-menu").find("a:first").trigger("click");
            });
        }
        get_item_sub_group(t) {
            var e = this;
            frappe.call({ method: "ecs_vim.doctype_triggers.point_of_sale.point_of_sale.get_item_sub_group", freeze: !0, args: { pos_profile: e.pos_profile ? e.pos_profile : "", item_group: t || "" } }).then(function (t) {
                (e.item_sub_groups = t.message.item_sub_group_dict), (e.search_item_group = e.wrapper.find(".search-item-group")), e.item_sub_groups.length > 0 && e.show_sub_group(!0);
                var i = e
                    .get_sorted_item_sub_groups()
                    .map(function (t) {
                        return (
                            "<div class=\"col-md-4\"><li style='margin: 0 5px;border-bottom: 1px solid #cccac6;font-size: 11px;padding: 15px 1px;'><a class='option' style=\"padding: 0;\" data-value='" +
                            t +
                            "'>" +
                            t +
                            "</a>\n\t\t\t\t\n\t\t\t\t</li></div>"
                        );
                    })
                    .join("");
                (i = '<div class="row" style="width: 100%; ">' + i + "</div>"),
                    e.search_item_group.find(".dropdown-sub-menu").html(i),
                    e.search_item_group.on("click", ".dropdown-sub-menu a", function () {
                        e.item_group_field.set_value($(this).attr("data-value"));
                        var t = "subgroup" + $(this).attr("data-value");
                        (e.$subgroup = e.search_item_group.find("." + t)), e.$subgroup && e.$subgroup.css("display", "block"), e.show_sub_group(!1), this.$component.find(".search-item-group").css("width", "5%");
                    });
            });
        }
        get_sorted_item_sub_groups(t) {
            var e = {},
                i = this.item_sub_groups.filter(function (e) {
                    return e.parent_item_group == t;
                }),
                a = {};
            return (
                $.each(i, function (t, e) {
                    a[e.name] = [e.lft, e.rgt];
                }),
                $.each(a, function (t, i) {
                    e[t] = i[0];
                }),
                Object.keys(e).sort(function (t, i) {
                    return e[t] - e[i];
                })
            );
        }
        get_sorted_item_groups() {
            var t = {};
            return (
                $.each(this.item_groups, function (e, i) {
                    t[e] = i[0];
                }),
                Object.keys(t).sort(function (e, i) {
                    return t[e] - t[i];
                })
            );
        }
        pagination() {
            var t = this;
            t.wrapper.find(".pagination").empty().hide();
            var e = Math.ceil((t.wrapper.find(".item-wrapper").size() || 1) / 4);
            if (!((e /= 2) <= 1)) {
                var i = t.wrapper.find(".items-selector");
                i.find(".pagination").append('<a class="previous disabled">&laquo;</a>');
                for (var a = 0; a < e; a++)
                    a < 3
                        ? i
                              .find(".pagination")
                              .append('<a class="page-link">' + (a + 1) + "</a>")
                              .show()
                        : i
                              .find(".pagination")
                              .append('<a class="page-link hide">' + (a + 1) + "</a>")
                              .show();
                i.find(".pagination").append('<a class="next">&raquo;</a>'), i.find(".pagination a.page-link").first().addClass("active");
                var n = function () {
                    var e = 2 * (i.find(".pagination a.active").text() - 1),
                        a = t.wrapper.find(".item-wrapper").eq(e),
                        n = (n = a.index() * a.height()) == a.parent().height() ? 0 : n;
                    i.find(".items-container").animate({ scrollTop: n }, "fast");
                };
                n(),
                    i.find(".pagination a").click(function () {
                        var t = $(".pagination a.active").index();
                        $(".pagination a.page-link").removeClass("active"), $(".pagination a").removeClass("disabled"), $(this).hasClass("page-link") && $(this).addClass("active");
                        var e = t - 1 >= 1 ? t - 1 : 1;
                        $(this).hasClass("previous") &&
                            ($(".pagination a").eq(e).addClass("active"),
                            e >= 3 &&
                                ($(".pagination a")
                                    .eq(e + 1)
                                    .addClass("hide"),
                                $(".pagination a")
                                    .eq(e + 1 - 3)
                                    .removeClass("hide"),
                                $(".pagination a")
                                    .eq(e + 1 - 3)
                                    .css("display", "unset"))),
                            1 == $(".pagination a.active").index() && $(".pagination a.previous").addClass("disabled");
                        var i = t + 1 <= (a = $(".pagination a").size() - 2) ? t + 1 : a,
                            a = $(".pagination a").size() - 2;
                        $(this).hasClass("next") &&
                            ($(".pagination a").eq(i).addClass("active"),
                            i < a &&
                                ($(".pagination a")
                                    .eq(i + 1)
                                    .removeClass("hide"),
                                $(".pagination a")
                                    .eq(i + 1)
                                    .css("display", "unset")),
                            i - 3 >= 0 &&
                                i - 3 + 1 < 3 &&
                                $(".pagination a")
                                    .eq(i - 3 + 1)
                                    .addClass("hide")),
                            $(".pagination a.active").index() == a && $(".pagination a.next").addClass("disabled"),
                            n(),
                            $(".pagination a").css({ padding: "8px 16px", "text-decoration": "none", margin: "0 1px", "background-color": "white", border: "1px solid #ddd" }),
                            $(".pagination a:not(.disabled)").css({ color: "black", transition: "background-color .3s" }),
                            $(".pagination a.page-link.active").css({ "background-color": "#4CAF50", color: "white", border: "1px solid #4CAF50" }),
                            $(".pagination a.page-link.hide").css({ display: "none" }),
                            $(".pagination a.page-link:hover:not(.active)").css({ "background-color": "#ddd" }),
                            $(".pagination a:first-child").css({ "border-top-left-radius": "5px", "border-bottom-left-radius": "5px" }),
                            $(".pagination a:last-child").css({ "border-top-right-radius": "5px", "border-bottom-right-radius": "5px" });
                    }),
                    $(".pagination a").css({ padding: "8px 16px", "text-decoration": "none", margin: "0 1px", "background-color": "white", border: "1px solid #ddd" }),
                    $(".pagination a:not(.disabled)").css({ color: "black", transition: "background-color .3s" }),
                    $(".pagination a.page-link.active").css({ "background-color": "#4CAF50", color: "white", border: "1px solid #4CAF50" }),
                    $(".pagination a.page-link:hover:not(.active)").css({ "background-color": "#ddd" }),
                    $(".pagination a:first-child").css({ "border-top-left-radius": "5px", "border-bottom-left-radius": "5px" }),
                    $(".pagination a:last-child").css({ "border-top-right-radius": "5px", "border-bottom-right-radius": "5px" });
            }
        }
    }),
        (erpnext.PointOfSale.ItemCart = class {
            constructor({ wrapper, events, settings,pos_profile }) {
                this.wrapper = wrapper;
                this.events = events;
                this.customer_info = undefined;
                this.location_info = undefined;
                this.so_info=undefined;
                this.non_sharable_slot=0;
                
                this.hide_images = settings.hide_images;
                this.pos_profile = pos_profile;
                this.allowed_customer_groups = settings.customer_groups;
                this.allow_rate_change = settings.allow_rate_change;
                this.allow_discount_change = settings.allow_discount_change;
                this.disremark='';
                this.init_component();
                this.check_minimum_sales_qty=true;
                this.custom_change_call=false;
                this.old_val_set = 0;
            }
        
            init_component() {
                this.prepare_dom();
                this.init_child_components();
                this.bind_events();
                this.attach_shortcuts();
                this.set_css();
            }
            make_search_bar() {
                const me = this;
                
                this.$component.find('.sosearch-field').html('');
                
                this.sosearch_field = frappe.ui.form.make_control({
                    df: {
                        label: __('Search'),
                        fieldtype: 'Data',
                        placeholder: __('Scan Order Booking No/RFID')
                        
                    },
                    parent: this.$component.find('.sosearch-field'),
                    render_input: true,
                });
                
                this.sosearch_field.toggle_label(false);
                
            }
        
            set_css()
            {
                $('.cart-container').css('padding-left', '3px');
                
                $('.abs-cart-container').css({'padding':'',
                'padding-bottom':''});
        
            }
            prepare_dom() {
                this.wrapper.append(
                    `<section class="customer-cart-container"></section>`
                )
                
                this.$component = this.wrapper.find('.customer-cart-container');
                $('.point-of-sale-app section').css('height','90vh')	
                
            }
        
            init_child_components() {
                this.init_customer_selector();
                this.init_cart_components();
                this.init_sosearch();
            }
            init_sosearch()
            {
            //this.$component.append(`<div class="sosearch-field"></div>`)
                this.make_search_bar()
            }
            init_customer_selector() {
                this.$component.append(
                    `<div class="sosearch-field"></div>
                    <div class="customer-section"></div>`
                )
                this.$component.append(
                    
                    `<div class="location-fields-container">
                    <div class="visitdate-field"></div>
                    <div class="so-field"></div>
                    </div>			
                    `
                )
                this.$customer_section = this.$component.find('.customer-section');
                this.$location_fields_container = this.$component.find('.location-fields-container');
                $('.location-fields-container').css({
                                    'background-color': '#0799a3bd',
                                    'display': 'grid',
                                    'grid-template-columns': 'repeat(2,minmax(0,1fr))',
                                    'margin-top': 'var(--margin-md)',
                                    '-moz-column-gap': 'var(--padding-sm)',
                                    'column-gap': 'var(--padding-sm)',
                                    'row-gap': 'var(--padding-xs)',
                                    'padding-right': '3px',
                                    'padding-left': '3px'
                            });
                this.make_customer_selector();
                //added by shiby
                //this.render_location_fields();
                //
            }
        
            reset_customer_selector() {
                const frm = this.events.get_frm();
                
                
                if(frm.doc.items.length==0){
                frm.set_value('customer', '');
                
                this.make_customer_selector();
                this.customer_field.set_focus();
                }
            }
        //<div class="cart-label">Item Cart</div>
            init_cart_components() {
                this.$component.append(
                    `<div class="cart-container">
                        <div class="abs-cart-container">
                            
                            <div class="cart-header">
                                
                                <div class="name-header">Item</div>
                                <div class="qty-header">Qty</div>
                                <div class="rate-amount-header">Amount</div>
                            </div>
                            <div class="cart-items-section"></div>
                            <div class="cart-totals-section"></div>
                            <div class="numpad-section"></div>
                            
                        </div>
                    </div>`
                );
                this.$cart_container = this.$component.find('.cart-container');
              
                this.make_cart_totals_section();
                this.make_cart_items_section();
                this.make_cart_numpad();
               
            }
          
            make_cart_items_section() {
                this.$cart_header = this.$component.find('.cart-header');
                this.$cart_items_wrapper = this.$component.find('.cart-items-section');
                this.$abs_cart_container = this.$component.find('.abs-cart-container');
                this.$abs_cart_container = this.$component.find('.abs-cart-container');
                this.$net_total_container = this.$component.find('.net-total-container');
                this.$grand_total_container = this.$component.find('.grand-total-container');
                this.$cart_totals_section=this.$component.find('.cart-totals-section');
                this.make_no_items_placeholder();
            }
        
            make_no_items_placeholder() {
                
                this.$cart_header.css('display', 'none');
                this.$cart_header.css({'padding-left': '3px;',
                'background-color': '#eceef0'});
                this.$abs_cart_container.css('padding','')
                this.$net_total_container.css({'padding-left': '10px',
                'color': '#fff'})
                this.$grand_total_container.css({'padding-left': '10px',
                'color': '#fff'})
                this.$cart_totals_section.css('background-color','rgba(7, 153, 163, 0.74)')
                this.$component.find('.name-header').css('padding-left', '10px')
                this.$component.find('.abs-cart-container').css('padding', 'unset')
                this.$component.find('.qty-header').css('padding-right', '60px')
                this.$component.find('.taxes-container').css({'padding-left': '10px',
                'color': '#fff'})
                this.$component.find('.add-discount-wrapper').css({'color': '#fff'})
                this.$cart_items_wrapper.html(
                    `<div class="no-item-wrapper">No items in cart</div>`
                );
            }
        
            get_discount_icon() {
                return (
                    `<svg class="discount-icon" width="24" height="24" viewBox="0 0 24 24" stroke="currentColor" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M19 15.6213C19 15.2235 19.158 14.842 19.4393 14.5607L20.9393 13.0607C21.5251 12.4749 21.5251 11.5251 20.9393 10.9393L19.4393 9.43934C19.158 9.15804 19 8.7765 19 8.37868V6.5C19 5.67157 18.3284 5 17.5 5H15.6213C15.2235 5 14.842 4.84196 14.5607 4.56066L13.0607 3.06066C12.4749 2.47487 11.5251 2.47487 10.9393 3.06066L9.43934 4.56066C9.15804 4.84196 8.7765 5 8.37868 5H6.5C5.67157 5 5 5.67157 5 6.5V8.37868C5 8.7765 4.84196 9.15804 4.56066 9.43934L3.06066 10.9393C2.47487 11.5251 2.47487 12.4749 3.06066 13.0607L4.56066 14.5607C4.84196 14.842 5 15.2235 5 15.6213V17.5C5 18.3284 5.67157 19 6.5 19H8.37868C8.7765 19 9.15804 19.158 9.43934 19.4393L10.9393 20.9393C11.5251 21.5251 12.4749 21.5251 13.0607 20.9393L14.5607 19.4393C14.842 19.158 15.2235 19 15.6213 19H17.5C18.3284 19 19 18.3284 19 17.5V15.6213Z" stroke-miterlimit="10" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M15 9L9 15" stroke-miterlimit="10" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M10.5 9.5C10.5 10.0523 10.0523 10.5 9.5 10.5C8.94772 10.5 8.5 10.0523 8.5 9.5C8.5 8.94772 8.94772 8.5 9.5 8.5C10.0523 8.5 10.5 8.94772 10.5 9.5Z" fill="white" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M15.5 14.5C15.5 15.0523 15.0523 15.5 14.5 15.5C13.9477 15.5 13.5 15.0523 13.5 14.5C13.5 13.9477 13.9477 13.5 14.5 13.5C15.0523 13.5 15.5 13.9477 15.5 14.5Z" fill="white" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>`
                );
            }
        
            make_cart_totals_section() {
                this.$totals_section = this.$component.find('.cart-totals-section');
               
                // this.$totals_section.append(
                // 	`<div class="add-discount-wrapper">
                // 		${this.get_discount_icon()} Add Discount
                // 	</div>
                // 	<div class="net-total-container">
                // 		<div class="net-total-label">Net Total</div>
                // 		<div class="net-total-value">0.00</div>
                // 	</div>
                // 	<div class="taxes-container"></div>
                // 	<div class="grand-total-container">
                // 		<div>Grand Total</div>
                // 		<div>0.00</div>
                // 	</div>
                // 	<div class="checkout-btn">Checkout</div>
                // 	<div class="edit-cart-btn">Edit Cart</div>`
                // )
                //Commented and added by shiby
                this.$totals_section.append(
                    `<div class="add-discount-wrapper">
                        <div>${this.get_discount_icon()}Discount</div>
                        <div class="discount-value">0.00</div>
                    </div>
                    <div class="net-total-container">
                        <div class="net-total-label">Net Total</div>
                        <div class="net-total-value">0.00</div>
                    </div>
                    <div class="taxes-container"></div>
                    <div class="grand-total-container">
                        <div>Grand Total</div>
                        <div>0.00</div>
                    </div>
                    <div class="checkout-btn">Checkout</div>
                    <div class="btn save-as-draft-btn"  style="display:none;">Approve Discount</div>
                    <div class="edit-cart-btn">Edit Cart</div>`
                )
        
                this.$add_discount_elem = this.$component.find(".add-discount-wrapper");
                this.$add_discount_elem.css({'justify-content': 'space-between'})
                const me = this;
              
                this.$totals_section.on('click', '.save-as-draft-btn', function () {
                //me.save_as_draft();
                me.validate_approver();
                    
                    
            });
            
            }
        
            make_cart_numpad() {
                this.$numpad_section = this.$component.find('.numpad-section');
        
                this.number_pad = new erpnext.PointOfSale.NumberPad({
                    wrapper: this.$numpad_section,
                    events: {
                        numpad_event: this.on_numpad_event.bind(this)
                    },
                    cols: 5,
                    keys: [
                        [ 1, 2, 3, 'Quantity' ],
                        [ 4, 5, 6, 'Discount' ],
                        [ 7, 8, 9, 'Rate' ],
                        [ '.', 0, 'Delete', 'Remove' ]
                    ],
                    css_classes: [
                        [ '', '', '', 'col-span-2' ],
                        [ '', '', '', 'col-span-2' ],
                        [ '', '', '', 'col-span-2' ],
                        [ '', '', '', 'col-span-2 remove-btn' ]
                    ],
                    fieldnames_map: { 'Quantity': 'qty', 'Discount': 'discount_percentage' }
                })
        
                this.$numpad_section.prepend(
                    `<div class="numpad-totals">
                        <span class="numpad-net-total"></span>
                        <span class="numpad-grand-total"></span>
                    </div>`
                )
        
                this.$numpad_section.append(
                    `<div class="numpad-btn checkout-btn" data-button-value="checkout">Checkout</div>`
                )
            }
        
            bind_events() {
                const me = this;
                this.$customer_section.on('click', '.reset-customer-btn', function () {
                    me.reset_customer_selector();
                });
        
                
                this.$customer_section.on('click', '.close-details-btn', function () {
                    
                    me.toggle_customer_info(false);
                });
        
                this.$customer_section.on('click', '.customer-display', function(e) {
                    if ($(e.target).closest('.reset-customer-btn').length) return;
        
                    const show = me.$cart_container.is(':visible');
                   
                    me.toggle_customer_info(show);
                });
                this.$cart_items_wrapper.on('click', '.list-item', function() {
                    me.toggle_item_highlight(this);
                    this.item_is_selected=true;
                });
                this.$cart_items_wrapper.on('dblclick', '.cart-item-wrapper', function() {
                    const $cart_item = $(this);
        
                    me.toggle_item_highlight(this);
                    
                    const payment_section_hidden = !me.$totals_section.find('.edit-cart-btn').is(':visible');
                    if (!payment_section_hidden) {
                        // payment section is visible
                        // edit cart first and then open item details section
                        me.$totals_section.find(".edit-cart-btn").click();
                    }
        
                    const item_code = unescape($cart_item.attr('data-item-code'));
                    const batch_no = unescape($cart_item.attr('data-batch-no'));
                    const uom = unescape($cart_item.attr('data-uom'));
                    var bundle_item=unescape($cart_item.attr('data-bundle-item'));
                    const rate=unescape($cart_item.attr('data-item-rate'));
                    const free_item=unescape($cart_item.attr('data-item-free'));
                    
                    var current_item={};
                    current_item.item_code = item_code;
                    current_item.batch_no = batch_no;
                    current_item.uom = uom
                    cur_pos.item_details.current_item=current_item;	
                    const $btn = $(this);
                    current_item.qty = flt($btn.closest(".cart-item-wrapper").find(".quantity input").val())
                    cur_pos.combo_item_details.current_item=current_item;
                    
                    if(cur_frm.doc.is_return)
                   {
                    frappe.db.get_value("Product Bundle", {"new_item_code":item_code} ,"name", (r)=> {
                        
                        if(r.name ){
                            bundle_item=1
                            me.events.cart_combo_item_clicked(item_code, batch_no, uom,rate);
                           //const item_row_name = unescape($cart_item.attr('data-row-name'));
                          // me.events.cart_combo_item_clicked({ name: item_row_name });
            
                        }
                        else{
                            bundle_item=0
                            me.events.cart_item_clicked(item_code, batch_no, uom,rate);
                           //const item_row_name = unescape($cart_item.attr('data-row-name'));
                           // me.events.cart_item_clicked({ name: item_row_name });
                        }
        
                    })
                   }
                   
                   else{
                    if(free_item==0){
                    frappe.db.get_value("Product Bundle", {"new_item_code":item_code} ,"name", (r)=> {
                       
                        if(r.name ){
                            bundle_item=1
        
                            if(bundle_item && bundle_item!='' && bundle_item!='null' && bundle_item!="undefined" ){
                                //const item_row_name = unescape($cart_item.attr('data-row-name'));
                               // me.events.cart_combo_item_clicked({ name: item_row_name });
                                me.events.cart_combo_item_clicked(item_code, batch_no, uom,rate);
        
                             }
                            else{
                                //const item_row_name = unescape($cart_item.attr('data-row-name'));
                               // me.events.cart_item_clicked({ name: item_row_name });
                                me.events.cart_item_clicked(item_code, batch_no, uom,rate);
                            }
                        }
                        else{
                            bundle_item=0
                            me.events.cart_item_clicked(item_code, batch_no, uom,rate);
                            //const item_row_name = unescape($cart_item.attr('data-row-name'));
                            //me.events.cart_item_clicked({ name: item_row_name });
                        }})
                    }
                    else{
                        console.log("free")
                        $('.quantity input').attr('readonly', true);
                    }
                   }
                    
                    this.numpad_value = '';
                });
        
                this.$cart_items_wrapper.on('change', '.quantity input', function() {
                    const $input = $(this);
                   
                    const $item = $input.closest('.cart-item-wrapper[data-item-code]');
                   
                    me.toggle_item_highlight( $item);
                    const item_code = unescape($item.attr('data-item-code'));
                    var current_item={};
                    let batch_no = unescape($item.attr('data-batch-no'));
                  
                    const serial_no = unescape($item.attr('data-serial-no'));
                    const uom = unescape($item.attr('data-uom'));
                    const free_item=unescape($item.attr('data-item-free'));
                    
                    batch_no = batch_no === "undefined" ? undefined : batch_no;
                    batch_no = batch_no === "" ? undefined : batch_no;
                    const maximum_sales_quantity=unescape($item.attr('data-maximum-sales-qty'));
                    const minimum_sales_quantity=unescape($item.attr('data-minimum-sales-qty')) && unescape($item.attr('data-minimum-sales-qty'))!=0?unescape($item.attr('data-minimum-sales-qty')):1
                    var bundle_item=unescape($item.attr('data-bundle-item'));
                    var rate=unescape($item.attr('data-item-rate'));
                    cur_pos.item_selector.bundle_item=bundle_item;
                    current_item.item_code = unescape($item.attr('data-item-code'));
                    current_item.batch_no = batch_no;
                    current_item.uom = unescape($item.attr('data-uom'));
                    cur_pos.item_details.current_item=current_item;	
                    current_item.qty=flt($('.quantity input').val())
                    cur_pos.combo_item_details.current_item=current_item;		
                    
                   
                   if(free_item==0){
                        frappe.db.get_value("Product Bundle", {"new_item_code":item_code} ,"name", (r)=> {
                       
                        if(r.name ){
                            bundle_item =1
                            cur_pos.item_selector.bundle_item=bundle_item;
                            current_item.qty
                            me.events.item_selected({ field: 'qty', value:current_item.qty , item: { item_code, batch_no, serial_no, uom ,rate}}).then(() => {
                                const event = {
                                    field: "qty",
                                    value:current_item.qty,
                                    item: { item_code, batch_no, uom }
                                }
                                 
                                 setTimeout(() => {
                                    me.$cart_items_wrapper.html('');
                                    me.make_no_items_placeholder();
                                 cur_frm.doc.items.forEach(item => {
        
                                    cur_pos.cart.update_item_html(item);
                                });
                                 
                                }, 800);
                                
                        })
                            $('.quantity input').attr('readonly', true);
                        }
                        else{
                            $('.quantity input').attr('readonly', false);
                        if(!cur_frm.doc.is_return && minimum_sales_quantity  && flt($('.quantity input').val())<= minimum_sales_quantity )
                        {
                             frappe.show_alert({
                             indicator: 'red',
                             message: "Minimum Sales Quantity is :"+minimum_sales_quantity
                         });
                    
                    
                         me.events.item_selected({ field: 'qty', value:flt(minimum_sales_quantity) , item: { item_code, batch_no, serial_no, uom ,rate}}).then(() => {
                            const event = {
                                field: "qty",
                                value:flt(minimum_sales_quantity) ,
                                item: { item_code, batch_no, uom }
                            }
                             
                             setTimeout(() => {
                               
                                me.$cart_items_wrapper.html('');
                                me.make_no_items_placeholder();
                             cur_frm.doc.items.forEach(item => {
        
                                cur_pos.cart.update_item_html(item);
                            });
                             
                            }, 800);
                            
                    })
                    
                         return;
        
                    }
                    else if(!cur_frm.doc.is_return && maximum_sales_quantity && maximum_sales_quantity!=0 && flt($('.quantity input').val())> maximum_sales_quantity )
                    {
                        
                         frappe.show_alert({
                         indicator: 'red',
                         message: "Maximum Sales Quantity is :"+maximum_sales_quantity
                     });
                     me.events.item_selected({ field: 'qty', value:flt(maximum_sales_quantity) , item: { item_code, batch_no, serial_no, uom,rate }}).then(() => {
                        const event = {
                            field: "qty",
                            value:flt(maximum_sales_quantity) ,
                            item: { item_code, batch_no, uom }
                        }
                         
                         setTimeout(() => {
                            me.$cart_items_wrapper.html('');
                            me.make_no_items_placeholder();
                         cur_frm.doc.items.forEach(item => {
        
                            cur_pos.cart.update_item_html(item);
                        });
                         
                        }, 800);
                        
                })
                    
                         return;
                    }
                    else{
                        me.events.item_selected({ field: 'qty', value:flt($input.val()) , item: { item_code, batch_no, serial_no, uom,rate }}).then(() => {
                            const event = {
                                field: "qty",
                                value:flt($input.val()) ,
                                item: { item_code, batch_no, uom }
                            }
                             
                             setTimeout(() => {
                                me.$cart_items_wrapper.html('');
                                me.make_no_items_placeholder();
                             cur_frm.doc.items.forEach(item => {
        
                                cur_pos.cart.update_item_html(item);
                            });
                             
                            }, 800);
                            
                    })
                    
                    }
                    
                        }
                    })
                }
                else{
                    console.log("free")
                    $('.quantity input').attr('readonly', true);
                }
                   
                //     if(bundle_item=='' || bundle_item=='null' || bundle_item=="undefined"  ){
                // 		$('.quantity input').attr('readonly', false);
                // 		if(!cur_frm.doc.is_return && minimum_sales_quantity && minimum_sales_quantity!=0 && flt($('.quantity input').val())<= minimum_sales_quantity )
                // 		{
                // 			 frappe.show_alert({
                // 			 indicator: 'red',
                // 			 message: "Minimum Sales Quantity is :"+minimum_sales_quantity
                // 		 });
                    
                    
                //      	me.events.item_selected({ field: 'qty', value:flt(minimum_sales_quantity) , item: { item_code, batch_no, serial_no, uom }});
                    
                // 		 return;
        
                // 	}
                // 	else if(!cur_frm.doc.is_return && maximum_sales_quantity && maximum_sales_quantity!=0 && flt($('.quantity input').val())> maximum_sales_quantity )
                // 	{
                        
                // 		 frappe.show_alert({
                // 		 indicator: 'red',
                // 		 message: "Maximum Sales Quantity is :"+maximum_sales_quantity
                // 	 });
                // 	 me.events.item_selected({ field: 'qty', value:flt(maximum_sales_quantity) , item: { item_code, batch_no, serial_no, uom }});
                    
                // 		 return;
                // 	}
                // 	else{
                // 		me.events.item_selected({ field: 'qty', value:flt($input.val()) , item: { item_code, batch_no, serial_no, uom }});
                    
                // 	}
                    
                        
                // }
                // else{
                // 	$('.quantity input').attr('readonly', true);
                // }
                                                
                });
                
                this.$cart_items_wrapper.on('click',
                    '[data-action="increment"], [data-action="decrement"]', function() {
                                    
                        const $btn = $(this);
                        const $item = $btn.closest('.cart-item-wrapper[data-item-code]');
                        
                        const item_code = unescape($item.attr('data-item-code'));
                        const action = $btn.attr('data-action');
                        
                    let batch_no = unescape($item.attr('data-batch-no'));
                    let serial_no = unescape($item.attr('data-serial-no'));
                    let uom = unescape($item.attr('data-uom'));
                    let rate= unescape($item.attr('data-item-rate'));
                    const free_item=unescape($item.attr('data-item-free'));
                    
                    
                    const maximum_sales_quantity=unescape($item.attr('data-maximum-sales-qty'));
                    const minimum_sales_quantity=unescape($item.attr('data-minimum-sales-qty')) && unescape($item.attr('data-minimum-sales-qty'))!=0?unescape($item.attr('data-minimum-sales-qty')):1
                    
                    //const bundle_item=unescape($item.attr('data-bundle-item'));
                    var bundle_item=0
                    batch_no = batch_no === "undefined" ? undefined : batch_no;
                    serial_no = serial_no === "undefined" ? undefined : serial_no;
                    uom = uom === "undefined" ? undefined : uom;
                    var qtyvalue="+1";
                    console.log(free_item,"free_item")
                    if(free_item==0){
                    frappe.db.get_value("Product Bundle", {"new_item_code":item_code} ,"name", (r)=> {
                      
                        if(r.name ){
                            bundle_item =1
                            cur_pos.item_selector.bundle_item=bundle_item;
                            if(bundle_item=='' || bundle_item=='null' || bundle_item=="undefined"  ||bundle_item==null  ){
                                if(action === 'increment') {
                            //events.on_field_change(item_code, 'qty', '+1');
                                
                                if(!cur_frm.doc.is_return && maximum_sales_quantity && maximum_sales_quantity!=0 && flt($btn.closest(".cart-item-wrapper").find(".quantity input").val())>= maximum_sales_quantity )
                                {
                                    me.events.item_selected({ field: 'qty', value: maximum_sales_quantity, item: { item_code, batch_no, serial_no, uom ,rate}});
                                     frappe.show_alert({
                                     indicator: 'red',
                                     message: "Maximum Sales Quantity is :"+maximum_sales_quantity
                                 });
                                     return;
             
                                }
                                else{
                                
                                    qtyvalue="+1";
                                    me.events.item_selected({ field: 'qty', value: qtyvalue, item: { item_code, batch_no, serial_no, uom,rate}}).then(() => {
                                        const event = {
                                            field: "qty",
                                            value:qtyvalue,
                                            item: { item_code, batch_no, uom,rate }
                                        }
                                         
                                         setTimeout(() => {
                                            me.$cart_items_wrapper.html('');
                                            me.make_no_items_placeholder();
                                         cur_frm.doc.items.forEach(item => {
        
                                            cur_pos.cart.update_item_html(item);
                                        });
                                         
                                        }, 800);
                                        
                                })
                                
                                }		
                                } else if(action === 'decrement') {
                            
                            
                            if(minimum_sales_quantity && minimum_sales_quantity!=0 && flt($btn.closest(".cart-item-wrapper").find(".quantity input").val())<= minimum_sales_quantity)
                            {
                                 frappe.show_alert({
                                 indicator: 'red',
                                 message: "Minimum Sales Quantity is :"+minimum_sales_quantity
                             });
                                 return;
         
                            }
                            else{
                                
                                qtyvalue="-1";
                                me.events.item_selected_desc({ field: 'qty', value: qtyvalue, item: { item_code, batch_no, serial_no, uom,rate }}).then(() => {
                                    const event = {
                                        field: "qty",
                                        value:qtyvalue,
                                        item: { item_code, batch_no, uom ,rate}
                                    }
                                     
                                     setTimeout(() => {
                                        me.$cart_items_wrapper.html('');
                                        me.make_no_items_placeholder();
                                     cur_frm.doc.items.forEach(item => {
        
                                        cur_pos.cart.update_item_html(item);
                                    });
                                     
                                    }, 800);
                                    
                            })	
        
                            }
                        
                            
                        }
                        
                            }
                            else{
                                $btn.closest(".cart-item-wrapper").find(".quantity input").attr('readonly', true);
                                }
                    }else{
                        bundle_item=0
                        cur_pos.item_selector.bundle_item=bundle_item;
                        if(bundle_item=='' || bundle_item=='null' || bundle_item=="undefined"  ||bundle_item==null  ){
                            if(action === 'increment') {
                        //events.on_field_change(item_code, 'qty', '+1');
                            
                            if(!cur_frm.doc.is_return && maximum_sales_quantity && maximum_sales_quantity!=0 && flt($btn.closest(".cart-item-wrapper").find(".quantity input").val())>= maximum_sales_quantity )
                            {
                                me.events.item_selected({ field: 'qty', value: maximum_sales_quantity, item: { item_code, batch_no, serial_no, uom,rate }});
                                 frappe.show_alert({
                                 indicator: 'red',
                                 message: "Maximum Sales Quantity is :"+maximum_sales_quantity
                             });
                                 return;
         
                            }
                            else{
                            
                                qtyvalue="+1";
                                me.events.item_selected({ field: 'qty', value: qtyvalue, item: { item_code, batch_no, serial_no, uom,rate }}).then(() => {
                                    const event = {
                                        field: "qty",
                                        value:qtyvalue,
                                        item: { item_code, batch_no, uom }
                                    }
                                     
                                     setTimeout(() => {
                                        me.$cart_items_wrapper.html('');
                                        me.make_no_items_placeholder();
                                     cur_frm.doc.items.forEach(item => {
        
                                        cur_pos.cart.update_item_html(item);
                                    });
                                     
                                    }, 800);
                                    
                            })
                            
                            }		
                            } else if(action === 'decrement') {
                        
                                console.log(minimum_sales_quantity,"FFFFFFFFFF")
                        if(!cur_frm.doc.is_return && minimum_sales_quantity  && flt($btn.closest(".cart-item-wrapper").find(".quantity input").val())<= minimum_sales_quantity )
                        {
                             frappe.show_alert({
                             indicator: 'red',
                             message: "Minimum Sales Quantity is :"+minimum_sales_quantity
                         });
                             return;
        
                        }
                        else{
                        
                            qtyvalue="-1";
                            me.events.item_selected_desc({ field: 'qty', value: qtyvalue, item: { item_code, batch_no, serial_no, uom ,rate}}).then(() => {
                                const event = {
                                    field: "qty",
                                    value:qtyvalue,
                                    item: { item_code, batch_no, uom ,rate}
                                }
                                
                                 setTimeout(() => {
                                 me.$cart_items_wrapper.html('');
                                 me.make_no_items_placeholder();
                                 cur_frm.doc.items.forEach(item => {
                                    cur_pos.cart.update_item_html(item);
                                });
                                }, 800);
                        })	
        
                        }
                    
                        
                    }
                    
                        }
                        else{
                            $btn.closest(".cart-item-wrapper").find(".quantity input").attr('readonly', true);
                            }
        
                     }})
                    }
                    else{
                        console.log("free")
                        $('.quantity input').attr('readonly', true);
                    }	
                    });
        
        
                this.$component.on('click', '.checkout-btn', function() {
                
                    if ($(this).attr('style').indexOf('--blue-500') == -1) return;
                   //shiby
                 //
                //  frappe.db.get_value('POS Profile',  cur_frm.doc.pos_profile, ["is_event"]).then(({ message }) => {
                // 	this.is_event=message.is_event
                
                
                //   if(message.is_event==1)
                //   {
                // 	if(!cur_pos.cart.location_visitdate_field || cur_pos.cart.location_visitdate_field.value=='')
                // 	{
                // 	 frappe.show_alert({
                // 		 indicator: 'red',
                // 		 message: "Visit date is mandatory"
                // 	 });
                // 	 return;
         
                // 	}
                    
                // 	if(this.non_sharable_slot==1)
                // 	{
                     
                // 		if(!cur_pos.cart.location_city_field || !cur_pos.cart.location_branch_field || !cur_pos.cart.location_brand_field && ! cur_pos.cart.location_department_field)
                // 		{
                // 		 frappe.show_alert({
                // 			 indicator: 'red',
                // 			 message: "Enter Location Details"
                // 		 });
                // 		 return;
         
                // 		}
                    
                    
                     
                // 	}
                         
                // 	if(cur_pos.cart.location_so_field.value=='')
                // 	{
                       
                // 		if(cur_pos.cart.location_event_field || cur_pos.cart.location_event_field.value=='')
                // 		{
                // 			frappe.show_alert({
                // 				indicator: 'red',
                // 				message: "Please select Event or Sales Order to Continue"
                // 			});
                // 			return;
                // 		}
        
                // 	}
                    
                // }
        
                
                    // me.events.checkout();
                    // me.toggle_checkout_btn(false);
                    // me.allow_discount_change && me.$add_discount_elem.removeClass("d-none");
                
            
                   
                // });
                const frm = me.events.get_frm();
                
                if(frm.doc.items.length){
                    frm.doc.items.forEach(item => {
                        const $item = me.get_cart_item(item);	
                        var current_item={}
                        current_item.qty = item.qty
                        if(item.qty==0)
                        {
                            frappe.throw({
                                title: __("Check Quantity"),
                                 message: __('Item Code: {0} Quantity is Zero.', [item.item_code])
                            })
                        }
                        
                    })}
                    
                    me.events.checkout();
                    me.toggle_checkout_btn(false);
                    me.allow_discount_change && me.$add_discount_elem.removeClass("d-none");
                
            
            
                
            }); 
                    //end
                    
        
                this.$totals_section.on('click', '.edit-cart-btn', () => {
                    this.events.edit_cart();
                    this.toggle_checkout_btn(true);
                });
        
                this.$component.on('click', '.add-discount-wrapper', () => {
                    const can_edit_discount = this.$add_discount_elem.find('.edit-discount-btn').length;
        
                    if(!this.discount_field || can_edit_discount) this.show_discount_control();
                });
                this.sosearch_field.$input.on('input', (e) => {
                   
                    clearTimeout(this.last_search);
                    this.last_search = setTimeout(() => {
                        const search_term = e.target.value;
                        
                        this.get_so_detail(search_term);
                    }, 300);
                });
                frappe.ui.form.on("POS Invoice", "paid_amount", frm => {
                    // called when discount is applied
                    this.update_totals_section(frm);
                });
                
            }
            //added by shiby
             
            async get_so_detail() {
                var me=this;
                //frappe.dom.freeze();
                const frm = this.events.get_frm();
                const search_term = this.sosearch_field.get_value();	
               
                const  res = await frappe.db.get_value("Sales Order",{'name': search_term,'pos_status':'Open'}  , "customer");
                
                if(res.message.customer){
                    
                    const  res1 = await frappe.db.get_value("Sales Order",{'name': search_term,'pos_status':'Open'}  , "delivery_date");
                    
                    if(String(res1.message.delivery_date)==String(frappe.datetime.nowdate()))
                    {
                       
                        frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'customer', res.message.customer);					
                        this.location_info = {};		
                        this.load_invoice();
                        frappe.db.get_value('Sales Order', {'name': search_term,'pos_status':'Open'}, ["delivery_date", "customer","brand","city","branch","department"]).then(({ message }) => {
                                    
                                        this.location_info = { ...message };
                                        this.location_info["visitdate"] = message.delivery_date;
                                        this.location_info["so"] = search_term;
                                        
                                        this.location_info["brand"] = message.brand;
                                        this.location_info["city"] = message.city;
                                        this.location_info["branch"] = message.branch;
                                        this.location_info["department"] = message.department;
                                        if(cur_pos.cart.location_so_field)
                                        {
                                        
                                            cur_pos.cart.location_so_field.set_value(search_term)
                                            cur_pos.cart.location_visitdate_field.set_value(message.delivery_date)
                                        }
                                        
                                        
                                    
                                });
                        this.render_location_fields();
                
                    }
                    else{
                        frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'customer', '');	
                        
                        this.get_positems('')				
                        this.location_info = {};		
                        this.load_invoice();	
                        cur_pos.cart.location_so_field.set_value('')
                        cur_pos.cart.location_visitdate_field.set_value('')	
        
                        // frappe.show_alert({
                        // 	indicator: 'red',
                        // 	message: __('Visit date not matched')
                        // });
            
                    }
        
                }
                else{
                   
                   var  pos_details=[];
                    frappe.call({
                        method: 'ecs_vim.doctype_triggers.point_of_sale.point_of_sale.get_pos_from_rfid',
                        args: {
                            rfid: search_term?search_term:''
                        },
                        async: false,
                        callback: function(r) {
                            
                            if (r && r.message){                        
                                pos_details = r.message;
                                var sales_order="",pos_invoice="",customer="";var creation=""; 
                                pos_details.forEach(function (c, index) {
                                    sales_order=c.sales_order
                                    pos_invoice=c.pos_invoice
                                    customer=c.customer
                                    creation=c.creation
                                })
                                
                                                     
                                var postime=new Date(creation)                     
                                postime.setHours(postime.getHours() + 24) 
                                
                            //    if(new Date(postime).toLocaleString()>=new Date().toLocaleString()){
                              
                                if(new Date(postime).getTime() >= new Date().getTime()){
                                    frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'customer', customer);  
                                    me.location_info = {};		
                                    me.load_invoice();
                                    frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'customer_pos', pos_invoice);  
                                    frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'customer_so', sales_order);  
                               }
                               else{
                                frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'customer', '');  
                                me.location_info = {};		
                                me.load_invoice();
                                frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'customer_pos', undefined);  
                                frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'customer_so', undefined);  
                                // frappe.show_alert({
                                //     indicator: 'red',
                                //     message: "RFID not found..........."
                                // });
        
                               }
        
                               
                            }
                        }
                    });
                    
                    
                    
                }
               
                    
                
                
                
            }
            set_selected_item($item) {
                this.selected_item = $item;
                this.$cart_items_wrapper.find('.list-item').removeClass('current-item qty disc rate');
                this.selected_item.addClass('current-item');
                
            }
            attach_shortcuts() {
                for (let row of this.number_pad.keys) {
                    for (let btn of row) {
                        if (typeof btn !== 'string') continue; // do not make shortcuts for numbers
        
                        let shortcut_key = `ctrl+${frappe.scrub(String(btn))[0]}`;
                        if (btn === 'Delete') shortcut_key = 'ctrl+backspace';
                        if (btn === 'Remove') shortcut_key = 'shift+ctrl+backspace'
                        if (btn === '.') shortcut_key = 'ctrl+>';
        
                        // to account for fieldname map
                        const fieldname = this.number_pad.fieldnames[btn] ? this.number_pad.fieldnames[btn] :
                            typeof btn === 'string' ? frappe.scrub(btn) : btn;
        
                        let shortcut_label = shortcut_key.split('+').map(frappe.utils.to_title_case).join('+');
                        shortcut_label = frappe.utils.is_mac() ? shortcut_label.replace('Ctrl', '⌘') : shortcut_label;
                        this.$numpad_section.find(`.numpad-btn[data-button-value="${fieldname}"]`).attr("title", shortcut_label);
        
                        frappe.ui.keys.on(`${shortcut_key}`, () => {
                            const cart_is_visible = this.$component.is(":visible");
                            if (cart_is_visible && this.item_is_selected && this.$numpad_section.is(":visible")) {
                                this.$numpad_section.find(`.numpad-btn[data-button-value="${fieldname}"]`).click();
                            }
                        })
                    }
                }
                const ctrl_label = frappe.utils.is_mac() ? '⌘' : 'Ctrl';
                this.$component.find(".checkout-btn").attr("title", `${ctrl_label}+Enter`);
                frappe.ui.keys.add_shortcut({
                    shortcut: "ctrl+enter",
                    action: () => this.$component.find(".checkout-btn").click(),
                    condition: () => this.$component.is(":visible") && !this.$totals_section.find('.edit-cart-btn').is(':visible'),
                    description: __("Checkout Order / Submit Order / New Order"),
                    ignore_inputs: true,
                    page: cur_page.page.page
                });
                this.$component.find(".edit-cart-btn").attr("title", `${ctrl_label}+E`);
                frappe.ui.keys.on("ctrl+e", () => {
                    const item_cart_visible = this.$component.is(":visible");
                    const checkout_btn_invisible = !this.$totals_section.find('.checkout-btn').is('visible');
                    if (item_cart_visible && checkout_btn_invisible) {
                        this.$component.find(".edit-cart-btn").click();
                    }
                });
                this.$component.find(".add-discount-wrapper").attr("title", `${ctrl_label}+D`);
                frappe.ui.keys.add_shortcut({
                    shortcut: "ctrl+d",
                    action: () => this.$component.find(".add-discount-wrapper").click(),
                    condition: () => this.$add_discount_elem.is(":visible"),
                    description: __("Add Order Discount"),
                    ignore_inputs: true,
                    page: cur_page.page.page
                });
                frappe.ui.keys.on("escape", () => {
                    const item_cart_visible = this.$component.is(":visible");
                    if (item_cart_visible && this.discount_field && this.discount_field.parent.is(":visible")) {
                        this.discount_field.set_value(0);
                    }
                });
            }
        
            toggle_item_highlight(item) {
                const $cart_item = $(item);
                const item_is_highlighted = $cart_item.attr("style") == "background-color:var(--gray-50);";
        
                if (!item || item_is_highlighted) {
                    this.item_is_selected = false;
                    this.$cart_container.find('.cart-item-wrapper').css("background-color", "");
                } else {
                    $cart_item.css("background-color", "var(--gray-50)");
                    this.item_is_selected = true;
                    this.$cart_container.find('.cart-item-wrapper').not(item).css("background-color", "");
                }
            }
        
            make_customer_selector() {
                this.$customer_section.html(`
                    <div class="customer-field"></div>
                `);
                const me = this;
                // const query = { query: 'erpnext.controllers.queries.customer_query' }; 
                const query = { query: 'ecs_vim.doctype_triggers.customer.customer.customer_query' }; 
                const allowed_customer_group = this.allowed_customer_groups || [];
                if (allowed_customer_group.length) {
                    query.filters = {
                        customer_group: ['in', allowed_customer_group]
                    }
                }
                this.customer_field = frappe.ui.form.make_control({
                    df: {
                        label: __('Customer'),
                        fieldtype: 'Link',
                        options: 'Customer',
                        placeholder: __('Search by customer name, phone, email.'),
                        get_query: () => query,
                        onchange: function() {
                            if (this.value) {
                                
                                //uncomment ,if SO Select
                                cur_frm.set_value('customer_pos', undefined);  
                                cur_frm.set_value('customer_so', undefined);  
                                me.get_positems('');
                                const frm = me.events.get_frm();
                                frappe.dom.freeze();
                                frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'customer', this.value);
                                frm.script_manager.trigger('customer', frm.doc.doctype, frm.doc.name).then(() => {
                                    frappe.run_serially([
                                        () => me.fetch_customer_details(this.value),
                                        () => me.events.customer_details_updated(me.customer_info),
                                        () => me.update_customer_section(),
                                        () => me.update_totals_section(),
                                        () => frappe.dom.unfreeze(),
                                        //uncomment ,if SO Select
                                        () => me.render_location_fields(),
                                        () => me.fetch_location_details(),
                                        
                                    ]);
                                    $('.search-item-group').find('.dropdown-menu').find("a:first").trigger("click");
                                })
                                
                                           
                            }
                            //Added by Shiby
                                var customer=this.value
                                
                                // cur_pos.cart.custom_field.set_value('');
                                // cur_pos.cart.event_field.set_value('');
                                // cur_pos.cart.slot_field.set_value('');
                                // cur_pos.cart.visit_date.set_value('');
                                        
                                        // cur_pos.cart.location_so_field.get_query= function() {
                                        // 	return {
                                        // 	 filters: [
                                        // 	  ["Sales Order","customer", "=", customer?customer:''],
                                        // 	  ["Sales Order","docstatus", "=", 1],
                                        // 	  ["Sales Order","status", "!=", 'Closed']
                                        // 	 ]
                                         
                                        // 	}
                                         
                                        //    }
                                           //end
                        },
                    },
                    parent: this.$customer_section.find('.customer-field'),
                    render_input: true,
                });
                this.customer_field.toggle_label(false);
            }
        //start Added by Shiby
        
            update_customer_branch(customer){
                frappe.call({
                    async:false,
                    method: "ecs_vim.doctype_triggers.point_of_sale.point_of_sale.update_customer_branch",
                    args: {
                        'customer': customer,
                        'pos_profile':cur_frm.doc.pos_profile
                    }
                });
        
            }
            getslotDetails(select_event,delivery_date){
                var resultlist=[];var slotlist=[];
                frappe.call({
                        "method": "ecs_vim.doctype_triggers.point_of_sale.point_of_sale.get_slot_list",
                        async: true,
                        args:{item_name:select_event?select_event:'',is_new:0,delivery_date:delivery_date?delivery_date:''},
                        callback: function (r) {
                                            
                            
                            resultlist = (r.message['result_list'] || []);
                            
                            Object.entries(resultlist).forEach(([key, value]) => {
                                var item = "";
                                item=(value["slot_name"]);
                                slotlist.push(item);
                            });
                            
                            //$(`.slot-field`).set_df_property()
                            return slotlist;
                        }})
            }
            // getbranchDetails(brand){
            //     var resultlist=[];var slotlist=[];
            // 	frappe.call({
            // 		"method": "ecs_vim.doctype_triggers.point_of_sale.point_of_sale.get_branch_list",
            // 		async: true,
            // 		args:{brand:brand?brand:''},
            // 		callback: function (r) {
                        
            // 			resultlist = (r.message['branch_list'] || []);
            // 			return resultlist;
            // 		}
            // 	})
            // }
            //end
            fetch_customer_details(customer) {

                if (customer) {
                    return new Promise((resolve) => {
                        frappe.db.get_value('Customer', customer, ["email_id", "mobile_no", "image", "loyalty_program", "customer_name"]).then(({ message }) => {
                            const { loyalty_program } = message;
                            // if loyalty program then fetch loyalty points too
                            if (loyalty_program) {
                                frappe.call({
                                    method: "erpnext.accounts.doctype.loyalty_program.loyalty_program.get_loyalty_program_details_with_points",
                                    args: { customer, loyalty_program, "silent": true },
                                    callback: (r) => {
                                        const { loyalty_points, conversion_factor } = r.message;
                                        if (!r.exc) {
                                            this.customer_info = { ...message, customer, loyalty_points, conversion_factor };
                                            resolve();
                                        }
                                    }
                                });
                            } else {
                                this.customer_info = { ...message, customer };
                                resolve();
                            }
                        });
                    });
                } else {
                    return new Promise((resolve) => {
                        this.customer_info = {}
                        resolve();
                    });
                }
            }
            fetch_location_details(pos_invoice) {
                var item_list_data=[];
                if(cur_pos.cart.location_info && cur_pos.cart.location_info["so"]!=undefined)
                {
                    
                    this.get_positems('')
                    
                        if(cur_pos.cart.location_info["so"])
                        {
                            frappe.call({
                                method: "ecs_vim.doctype_triggers.point_of_sale.point_of_sale.get_payment_entry",
                                args: {
                                    sorder: cur_pos.cart.location_info["so"]
                                },
                                async: false,
                                callback: function(r) {
                                    item_list_data = (r.message['result_list'] || []); 
                                    
                                    var allocated_amount = 0;
                                    Object.entries(item_list_data).forEach(([key, value]) => {
                                        
                                        allocated_amount=flt(value["allocated_amount"])
                                    });
                                    var child = cur_frm.add_child("advances");
                                    frappe.model.set_value(child.doctype, child.name, "allocated_amount", allocated_amount)
                                    cur_frm.refresh_field("advances")
                                }
                            });
                        }
                    
                }
               
                if (pos_invoice) {
                    return new Promise((resolve) => {
                        frappe.db.get_value('POS Invoice', pos_invoice, ["visit_date", "sales_order","event", "slot","brand","city","branch","department"]).then(({ message }) => {
                            
                                this.location_info = { ...message };
                                this.location_info["visitdate"] = message.visit_date;
                                this.location_info["so"] = message.sales_order;
                                this.location_info["event"] = message.event;
                                this.location_info["event_slot"] = message.slot;
                                this.location_info["brand"] = message.brand;
                                this.location_info["city"] = message.city;
                                this.location_info["branch"] = message.branch;
                                this.location_info["department"] = message.department;
                                if(cur_pos.cart.location_so_field)
                                {
                                
                                    cur_pos.cart.location_so_field.set_value(message.sales_order)
                                    cur_pos.cart.location_visitdate_field.set_value(message.visit_date)
                                }
                                
                                resolve();
                            
                        });
                    });
                    
                
                } else {
                    return new Promise((resolve) => {
                        this.location_info = {}
                        resolve();
                    });
                }
                
            }
            show_discount_control() {
                this.$add_discount_elem.css({ 'padding': '0px', 'border': 'none' });
                this.$add_discount_elem.html(
                    `<div style="display:flex">
                    <div class="add-discount-remark-field">
                    <input type="text" id="discremark" name="disremark" placeholder="Add Discount Remarks" style="border: none;
                    border-radius: var(--border-radius);
                    font-size: var(--text-md);
                    height: 26px;"><br><br></div>
                    <div class="add-discount-field"></div>
                   </div>`
                );
        
                const me = this;
                    this.$component.on('change', '#discremark', function () {
                    
                        me.disremark=$('#discremark').val();
                    
                });
                this.discount_field = frappe.ui.form.make_control({
                    df: {
                        label: __('Discount'),
                        fieldtype: 'Data',
                        placeholder: __('Enter discount percentage.'),
                        input_class: 'input-xs',
                        onchange: function() {
                        
                            const frm = me.events.get_frm();
                            if(frm.doc.is_approved==0) 
                            {
                                if (flt(this.value) != 0 ) {
                                    frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'additional_discount_percentage', flt(this.value));
                                    frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'discount_remark',String(me.disremark));
                                   
                                     me.hide_discount_control(this.value,me.disremark);  
                                } else {
                                    
                                    frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'additional_discount_percentage', 0);
                                    frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'discount_remark', '');
                                    me.$add_discount_elem.css({
                                        'border': '1px dashed var(--gray-500)',
                                        'padding': 'var(--padding-sm) var(--padding-md)'
                                    });
                                    me.$add_discount_elem.html(`${me.get_discount_icon()} Add Discount`);
                                    me.discount_field = undefined;
                                }
                            }
                            else{
                                me.hide_discount_control(frm.doc.additional_discount_percentage,me.disremark); 
                                
                            }
                            
                        },
                    },
                    parent: this.$add_discount_elem.find('.add-discount-field'),
                    render_input: true,
                });
                
                this.discount_field.toggle_label(false);
                this.discount_field.set_focus();
                
            }
            update_discount(remarks,discount)
            {
                
                if(discount>0)
                {
                    const frm = this.events.get_frm();
                    frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'discount_remark',remarks);
                    frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'additional_discount_percentage',discount);
                    
                    frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'is_approved',1);
                    this.disremark=remarks
                    this.discount_field=flt(discount);       
                    this.update_totals_section();
                    this.$cart_container.find('.checkout-btn').css({
                        'display': 'flex'})
                        this.$cart_container.find('.checkout-btn').css({
                            'background-color': 'var(--blue-500)'
                        });
                    this.$cart_container.find('.save-as-draft-btn').css({
                        'display': 'none'})
                }
                
                               
            }
            update_discount_so(disc_perc,discount)
            {
                
                if(disc_perc>0)
                {
                    const frm = this.events.get_frm();
                    frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'additional_discount_percentage',disc_perc);
                    frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'is_approved',1);
                    this.discount_field=flt(discount);       
                    this.update_totals_section();
                    this.$cart_container.find('.checkout-btn').css({
                        'display': 'flex'})
                        this.$cart_container.find('.checkout-btn').css({
                            'background-color': 'var(--blue-500)'
                        });
                    this.$cart_container.find('.save-as-draft-btn').css({
                        'display': 'none'})
                }
                else if (discount>0){
                    const frm = this.events.get_frm();
                    frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'additional_discount_percentage',0);
                    frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'discount_amount',discount);
                    frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'is_approved',1);
                    this.discount_field=flt(discount);       
                    
                    const currency = this.events.get_frm().doc.currency;
                    this.$add_discount_elem.html(
                        `<div class="edit-discount-btn" display: flex; style="color:white !important" >
                            ${this.get_discount_icon()}Discount&nbsp;${String(0).bold()}&nbsp;% &nbsp; ${String('')}
                        </div>
                        <div class="discount-amount"> 
                        ${format_currency(String(discount), currency,2)}
                        </div>`
                    );
                    this.update_totals_section();
                    this.$cart_container.find('.checkout-btn').css({
                        'display': 'flex'})
                        this.$cart_container.find('.checkout-btn').css({
                            'background-color': 'var(--blue-500)'
                        });
                    this.$cart_container.find('.save-as-draft-btn').css({
                        'display': 'none'})
                }
               
                
                               
            }
        //add and commented by shiby
            hide_discount_control(discount,remark) {
            if (!discount) {
                
                    this.$add_discount_elem.css({ 'padding': '0px', 'border': 'none' });
                    this.$add_discount_elem.html(
                        `<div class="add-discount-field"></div>`
                    );
                 this.toggle_checkout_btn(true);
                 this.$cart_container.find('.save-as-draft-btn').css({
                 'display': 'none'})
                
            } else {
            
                this.$add_discount_elem.css({
                    'border': '1px dashed var(--white)',
                    'color':'white'
                    
                });
                const frm = this.events.get_frm();
                const currency = this.events.get_frm().doc.currency;
                var remarks=''
                
                this.$add_discount_elem.html(
                    `<div class="edit-discount-btn" style="color:white !important" >
                        ${this.get_discount_icon()}Discount&nbsp;${String(discount).bold()}&nbsp;% &nbsp; ${String(this.disremark)}
                    </div>
                    <div class="discount-amount"> 
                    ${format_currency(String(frm.doc.base_total*discount/100), currency,2)}
                    </div>`
                );
                if(discount>0)
                {
                    
                    frappe.db.get_value('POS Profile',  cur_frm.doc.pos_profile, ["discount_approval_required"]).then(({ message }) => {
                        this.discount_approval_required=message.discount_approval_required;
                        
                        if(message.discount_approval_required && message.discount_approval_required==1 && cur_frm.doc.is_approved==0)
                        {
                            frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'discount_approval_required', 1);
                          
                                this.$cart_container.find('.checkout-btn').css({
                                    'background-color': 'var(--blue-200)',
                                    'display':'none'
                                });
                                this.$cart_container.find('.save-as-draft-btn').css({'background-color': 'var(--blue-500)',
                                    'display': 'flex',
                                    'color': '#fff',
                                    'align-items': 'center',
                                    'justify-content': 'center',
                                    'padding': 'var(--padding-sm)',
                                    'margin-top': 'var(--margin-sm)',
                                    'border-radius': 'var(--border-radius-md)',
                                    'font-size': 'var(--text-lg)',
                                    'font-weight': '700',
                                
                                    'cursor': 'pointer'})
                                   // this.create_discount_popup();
                            
                        }
            
                    });
                }
                
                frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'discount_approval_required', 0);
               
              
            }
           
        
            }
           
            // hide_discount_control(discount) {
            // 	if (!discount) {
            // 		this.$add_discount_elem.css({ 'padding': '0px', 'border': 'none' });
            // 		this.$add_discount_elem.html(
            // 			`<div class="add-discount-field"></div>`
            // 		);
            // 	} else {
            // 		this.$add_discount_elem.css({
            // 			'border': '1px dashed var(--dark-green-500)',
            // 			'padding': 'var(--padding-sm) var(--padding-md)'
            // 		});
            // 		this.$add_discount_elem.html(
            // 			`<div class="edit-discount-btn">
            // 				${this.get_discount_icon()} Additional&nbsp;${String(discount).bold()}% discount applied
            // 			</div>`
            // 		);
            // 	}
            // }
        
            custom_customer_selection () {
                const { customer, email_id='', mobile_no='', image, customer_name } = this.customer_info || {};
                this.$customer_section.html(
                    `<div class="customer-details">
                        <div class="customer-display">
                            ${this.get_customer_image()}
                            <div class="customer-name-desc">
                                <div class="customer-name">${customer_name}</div>
                                ${get_customer_description()}
                            </div>
                            <div class="reset-customer-btn" data-customer="${escape(customer)}">
                                <svg width="32" height="32" viewBox="0 0 14 14" fill="none">
                                    <path d="M4.93764 4.93759L7.00003 6.99998M9.06243 9.06238L7.00003 6.99998M7.00003 6.99998L4.93764 9.06238L9.06243 4.93759" stroke="#8D99A6"/>
                                </svg>
                            </div>
                        </div>
                    </div>`
                );
                function get_customer_description() {
                    if (!email_id && !mobile_no) {
                        return `<div class="customer-desc">Click to add email / phone</div>`;
                    } else if (email_id && !mobile_no) {
                        return `<div class="customer-desc">${email_id} / ${customer_name}</div>`;
                    } else if (mobile_no && !email_id) {
                        return `<div class="customer-desc">${mobile_no} / ${customer_name}</div>`;
                    } else {
                        return `<div class="customer-desc">${email_id} - ${mobile_no} / ${customer_name}</div>`;
                    }
                }
            }
            fetch_standard_customer_details(customer) {

                let standardCustomerInfo = {}
                if (customer) {
                    
                        frappe.db.get_value('Customer', customer, ["email_id", "mobile_no", "image", "loyalty_program"]).then(({ message }) => {
                            const { loyalty_program } = message;
                            // if loyalty program then fetch loyalty points too
                            if (loyalty_program) {
                                frappe.call({
                                    method: "erpnext.accounts.doctype.loyalty_program.loyalty_program.get_loyalty_program_details_with_points",
                                    args: { customer, loyalty_program, "silent": true },
                                    callback: (r) => {
                                        const { loyalty_points, conversion_factor } = r.message;
                                        if (!r.exc) {
                                            standardCustomerInfo = { ...message, customer, loyalty_points, conversion_factor };
                                        }
                                    }
                                });
                            } else {
                                standardCustomerInfo = { ...message, customer };

                            }
                        });
                    
                } else {
                    standardCustomerInfo = {}

                }
                return standardCustomerInfo;
            }
            default_customer_selection (vimCustomerInfo) {
                const { customer, email_id='', mobile_no='', image } = vimCustomerInfo || {};
                console.log(vimCustomerInfo)
		        this.customer_info = vimCustomerInfo;
                this.$customer_section.html(
                    `<div class="customer-details">
                        <div class="customer-display">
                            ${this.get_customer_image()}
                            <div class="customer-name-desc">
                                <div class="customer-name">${customer}</div>
                                ${get_customer_description()}
                            </div>
                            <div class="reset-customer-btn" data-customer="${escape(customer)}">
                                <svg width="32" height="32" viewBox="0 0 14 14" fill="none">
                                    <path d="M4.93764 4.93759L7.00003 6.99998M9.06243 9.06238L7.00003 6.99998M7.00003 6.99998L4.93764 9.06238L9.06243 4.93759" stroke="#8D99A6"/>
                                </svg>
                            </div>
                        </div>
                    </div>`
                );
                function get_customer_description() {
                    if (!email_id && !mobile_no) {
                        return `<div class="customer-desc">Click to add email / phone</div>`;
                    } else if (email_id && !mobile_no) {
                        return `<div class="customer-desc">${email_id} / ${customer}</div>`;
                    } else if (mobile_no && !email_id) {
                        return `<div class="customer-desc">${mobile_no} / ${customer}</div>`;
                    } else {
                        return `<div class="customer-desc">${email_id} - ${mobile_no} / ${customer}</div>`;
                    }
                }
            }
            update_customer_section() {
                const me = this;
               
                const { customer, email_id='', mobile_no='', image, customer_name } = this.customer_info || {};
                frappe.call({
                    method: "erpnext.selling.page.point_of_sale.point_of_sale.check_opening_entry",
                    args: {
                        user: frappe.user.name,
                    },
                    callback(r) {
                        if (customer) {
                            me.custom_customer_selection();
                        } else if (r.message[0].custom_default_customer) { 
                            const vimCustomerInfo = {email_id: '', mobile_no: r.message[0].mobile_no, image: null, loyalty_program: null, customer: r.message[0].custom_default_customer};                           
                            me.default_customer_selection(vimCustomerInfo);
                            me.customer_info = vimCustomerInfo;
                            //uncomment ,if SO Select
                            cur_frm.set_value('customer_pos', undefined);  
                            cur_frm.set_value('customer_so', undefined);  
                            me.get_positems('');
                            const frm = me.events.get_frm();
                            frappe.dom.freeze();
                            frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'customer', r.message[0].custom_default_customer);
                            frm.script_manager.trigger('customer', frm.doc.doctype, frm.doc.name).then(() => {
                                frappe.run_serially([
                                    () => me.fetch_customer_details(r.message[0].custom_default_customer),
                                    () => me.events.customer_details_updated(me.customer_info),
                                    // () => me.update_customer_section(),
                                    () => me.update_totals_section(),
                                    () => frappe.dom.unfreeze(),
                                    //uncomment ,if SO Select
                                    () => me.render_location_fields(),
                                    () => me.fetch_location_details(),
                                    
                                ]);
                                $('.search-item-group').find('.dropdown-menu').find("a:first").trigger("click");
                            })
                            
                        } else {
                            // reset customer selector
                            me.reset_customer_selector();
                        }
                    }
                })
               
            }
            
            get_customer_image() {
                const { customer, image } = this.customer_info || {};
                if (image) {
                    return `<div class="customer-image"><img src="${image}" alt="${image}""></div>`;
                } else {
                    return `<div class="customer-image customer-abbr">${frappe.get_abbr(customer)}</div>`;
                }
            }
        
            update_totals_section(frm) {
                
            
                if (!frm) frm = this.events.get_frm();
               
                this.render_discount()
                this.render_net_total(frm.doc.net_total);
                const grand_total = cint(frappe.sys_defaults.disable_rounded_total) ? frm.doc.grand_total : frm.doc.rounded_total;
                
                this.render_grand_total(grand_total);
        
                const taxes = frm.doc.taxes.map(t => {
                    return {
                        description: t.description, rate: t.rate
                    };
                });
                this.render_taxes(frm.doc.total_taxes_and_charges, taxes);
               
                
            }
            
            update_totals_section_after_approval(frm) {
                
                
                if (!frm) frm = this.events.get_frm();
                
                this.render_net_total(frm.doc.net_total);
                const grand_total = cint(frappe.sys_defaults.disable_rounded_total) ? frm.doc.grand_total : frm.doc.rounded_total;
                
                this.render_grand_total(grand_total);
        
                const taxes = frm.doc.taxes.map(t => {
                    return {
                        description: t.description, rate: t.rate
                    };
                });
                this.render_taxes(frm.doc.total_taxes_and_charges, taxes);
                
            }
            render_net_total(value) {
        
                const currency = this.events.get_frm().doc.currency;
                this.$totals_section.find('.net-total-container').html(
                    `<div>Net Total</div><div>${format_currency(value, currency,2)}</div>`
                )
        
                this.$numpad_section.find('.numpad-net-total').html(
                    `<div>Net Total: <span>${format_currency(value, currency,2)}</span></div>`
                );
            }
        
            render_grand_total(value) {
                const currency = this.events.get_frm().doc.currency;
                this.$totals_section.find('.grand-total-container').html(
                    `<div>Grand Total</div><div>${format_currency(value, currency,2)}</div>`
                )
        
                this.$numpad_section.find('.numpad-grand-total').html(
                    `<div>Grand Total: <span>${format_currency(value, currency,2)}</span></div>`
                );
            }
            render_discount(){
            
                if(this.discount_field)
                {
                    //this.discount_field.set_value(flt(cur_frm.doc.additional_discount_percentage));
                    this.disremark=cur_frm.doc.discount_remark
                    this.hide_discount_control(cur_frm.doc.additional_discount_percentage,cur_frm.doc.discount_remark);
                    
                
                }
                else{
                    this.show_discount_control()
                    this.discount_field.set_value(flt(cur_frm.doc.additional_discount_percentage));
                    this.disremark=cur_frm.doc.discount_remark
                    this.hide_discount_control(cur_frm.doc.additional_discount_percentage,cur_frm.doc.discount_remark);
                
                }
                
                // if(cur_pos.cart.discount_field)
                // { 
                // 	console.log(cur_pos.cart.discount_field,"1")			       
                //     this.discount_field=cur_frm.doc.additional_discount_percentage;        
                // 	this.hide_discount_control(this.discount_field,'');
                // }
                // else
                // {
                // 	this.hide_discount_control(0,'');  
                    
                // }
                
                // frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'additional_discount_percentage', flt(10));
                // console.log("renderdisc")
                // const frm = this.events.get_frm();
                // const currency=this.events.get_frm().doc.currency;
                // this.$totals_section.find('.add-discount-field').html(
                // 	`<div class="edit-discount-btn" >
                // 		${this.get_discount_icon()}Discount&nbsp;${String(5).bold()}&nbsp;%
                // 	</div>
                // 	<div class="discount-amount"> 
                // 	${format_currency(String(frm.doc.grand_total*10/100), currency)}
                // 	</div>`
                
                //);
        
            }
            render_taxes(value, taxes) {
                if (taxes.length) {
                    const currency = this.events.get_frm().doc.currency;
                    const taxes_html = taxes.map(t => {
                        const description = /[0-9]+/.test(t.description) ? t.description : `${t.description} @ ${t.rate}%`;
                        return `<div class="tax-row">
                            <div class="tax-label">${description}</div>
                            <div class="tax-value">${format_currency(value, currency,2)}</div>
                        </div>`;
                    }).join('');
                    this.$totals_section.find('.taxes-container').css('display', 'flex').html(taxes_html);
                } else {
                    this.$totals_section.find('.taxes-container').css('display', 'none').html('');
                }
            }
        
            get_cart_item({ name }) {
                // const batch_attr = `[data-batch-no="${escape(batch_no)}"]`;
                // const item_code_attr = `[data-item-code="${escape(item_code)}"]`;
                // const uom_attr = `[data-uom="${escape(uom)}"]`;
                
                // const item_selector = batch_no ?
                // 	`.cart-item-wrapper${batch_attr}${uom_attr}` : `.cart-item-wrapper${item_code_attr}${uom_attr}`;
        
                // return this.$cart_items_wrapper.find(item_selector);
                const item_selector = `.cart-item-wrapper[data-row-name="${escape(name)}"]`;
                console.log(item_selector,"item_selector")
                return this.$cart_items_wrapper.find(item_selector);
            }
            get_free_item(item) {
                console.log(item,"FFFFFFFFFFFF")
                const doc = this.events.get_frm().doc;
                
                var item_row=doc.items.find(i => i.name == item.name && i.uom == item.uom && i.rate == item.rate);
                console.log(item_row,"FFFFFFFFFFFF")
                return doc.items.find(i => i.parent_item_row == item_row.parent_item_row && i.is_free_item == 1);
            }
            get_item_from_frm(item) {
                const doc = this.events.get_frm().doc;
                
                return doc.items.find(i => i.name == item.name && i.uom == item.uom && i.rate == item.rate);
            }
            update_item_html(item, remove_item) {
               
                const $item = this.get_cart_item(item);	
                if (remove_item) {
                    $item && $item.next().remove() && $item.remove(); 
                    const no_items = this.$cart_items_wrapper.find('.cart-item-wrapper').length;
                    setTimeout(() => {
                        this.$cart_items_wrapper.html('');
                        this.make_no_items_placeholder();
                     cur_frm.doc.items.forEach(item => {
        
                        cur_pos.cart.update_item_html(item);
                    });
                     
                    }, 800);
                    console.log(no_items,"no_items")
                    // const frm = this.events.get_frm();
                    // this.update_totals_section(frm);
                } else {
                    const item_row = this.get_item_from_frm(item);
                   
                    this.render_cart_item(item_row, $item);
                    // const { item_code, batch_no, uom } = item;
                    // const search_field = batch_no ? 'batch_no' : 'item_code';
                    // const search_value = batch_no || item_code;
                    // const item_rowp = this.events.get_frm().doc.items.find(i => i[search_field] === search_value && i.uom === uom );
                    
                    // this.render_cart_item(item_rowp, $item)
                }
        
                const no_of_cart_items = this.$cart_items_wrapper.find('.cart-item-wrapper').length;
                this.highlight_checkout_btn(no_of_cart_items > 0);
                console.log(no_of_cart_items,"no_of_cart_items",remove_item)
                this.update_empty_cart_section(no_of_cart_items);
                
                
            }
           
            update_item_html_uom(item, removnuom,convfactore_item) {
                
                const $item = this.get_cart_item(item);	
                
                    const { item_code, batch_no, uom,slot_name } = item;
                    const search_field = batch_no ? 'batch_no' : 'item_code';
                    const search_value = batch_no || item_code;
                    const item_rowp = this.events.get_frm().doc.items.find(i => i[search_field] === search_value && i.uom === uom);
                    
                    this.render_cart_item(item_rowp, $item);
                    
                
        
                const no_of_cart_items = this.$cart_items_wrapper.find('.cart-item-wrapper').length;
                this.highlight_checkout_btn(no_of_cart_items > 0);
        
                this.update_empty_cart_section(no_of_cart_items);
            }
            render_cart_item(item_data, $item_to_update) {
               
                
                const currency = this.events.get_frm().doc.currency;
                const me = this;
                
                if (!$item_to_update.length) {
                   
                    this.$cart_items_wrapper.append(
                        `<div class="cart-item-wrapper"
                                data-row-name="${escape(item_data.name)}"
                                data-item-code="${escape(item_data.item_code)}" data-uom="${escape(item_data.uom)}"
                                data-batch-no="${escape(item_data.batch_no || '')}"
                                data-minimum-sales-qty="${escape(cur_pos.item_selector.minimum_sales_quantity)}"
                                data-maximum-sales-qty="${escape(cur_pos.item_selector.maximum_sales_quantity)}"
                                data-bundle-item="${escape(cur_pos.item_selector.bundle_item)}"
                                data-item-rate="${escape(item_data.rate)}"
                                data-item-free="${escape(item_data.is_free_item)}">
                        </div>
                        <div class="seperator"></div>`
                    )
                    // this.$cart_items_wrapper.append(
                    // 	`<div class="cart-item-wrapper" data-row-name="${escape(item_data.name)}"></div>
                    // 	<div class="seperator"></div>`
                    // )
                    $item_to_update = this.get_cart_item(item_data);
                }
                
                if(cur_pos.cart.location_so_field.value){
                    //console.log(cur_pos.cart.location_so_field.value,"console.log(cur_pos.cart.location_so_field)")
                    //setTimeout(() => {
                        $item_to_update.html(
                            `${get_item_image_html()}
                            <div class="item-name-desc">
                                <div class="item-name">
                                    ${item_data.item_name}
                                </div>
                                ${get_description_html()}
                            </div>
                            ${get_rate_discount_html()}`
                        )
                        $('.btn-xs').css('line-height','1.8')
                        $('.item-qty').css('width','110px')
                    // }, 800);
        
                }
                else{
                    
                    setTimeout(() => {
                        $item_to_update.html(
                            `${get_item_image_html()}
                            <div class="item-name-desc">
                                <div class="item-name">
                                    ${item_data.item_name}
                                </div>
                                ${get_description_html()}
                            </div>
                            ${get_rate_discount_html()}`
                        )
                        $('.btn-xs').css('line-height','1.8')
                        $('.item-qty').css('width','110px')
                     }, 500);
                }
                
                
                //added by tushar
                    // this.check_minimum_sales_qty=false;
                    // if(!this.custom_change_call)
                    //  { 
                    // 	 var s = $('.cart-item-wrapper .item-amount').text();
                    // 	var k = s.split(" ")
                        
                    // 	console.log(item_data,frappe.model.get_value(item_data.doctype, item_data.name,'rate'),"get_value")
                    // 	if (k.length>1 && flt(k[k.length-1] )==flt(item_data.rate) )
                    // 	{	
                    // 		if(	this.old_val_set<10){
                    // 			this.old_val_set += 1;
                    // 		}
                    // 		else
                    // 		this.custom_change_call = true; 
                    // 		}
                    //     $('.cart-item-wrapper .quantity input').change();
                    // }
                    //     this.check_minimum_sales_qty=true;
                ///////////////////////////////
                
                
                set_dynamic_rate_header_width();
                this.scroll_to_item($item_to_update);
        
                function set_dynamic_rate_header_width() {
                    const rate_cols = Array.from(me.$cart_items_wrapper.find(".item-rate-amount"));
                    me.$cart_header.find(".rate-amount-header").css("width", "");
                    me.$cart_items_wrapper.find(".item-rate-amount").css("width", "");
                    let max_width = rate_cols.reduce((max_width, elm) => {
                        if ($(elm).width() > max_width)
                            max_width = $(elm).width();
                        return max_width;
                    }, 0);
        
                    max_width += 1;
                    if (max_width == 1) max_width = "";
        
                    me.$cart_header.find(".rate-amount-header").css("width", max_width);
                    me.$cart_items_wrapper.find(".item-rate-amount").css("width", max_width);
                }
                            
                // function get_rate_discount_html() {
                // 	if (item_data.rate && item_data.amount && item_data.rate !== item_data.amount) {
                // 		return `
                // 			<div class="item-qty-rate">
                // 				<div class="item-qty"><span>${item_data.qty || 0}</span></div>
                // 				<div class="item-rate-amount">
                // 					<div class="item-rate">${format_currency(item_data.amount, currency)}</div>
                // 					<div class="item-amount">${format_currency(item_data.rate, currency)}</div>
                // 				</div>
                // 			</div>`
                // 	} else {
                // 		return `
                // 			<div class="item-qty-rate">
                // 				<div class="item-qty"><span>${item_data.qty || 0}</span></div>
                // 				<div class="item-rate-amount">
                // 					<div class="item-rate">${format_currency(item_data.rate, currency)}</div>
                // 				</div>
                // 			</div>`
                // 	}
                // }
                //Comment and updated by shiby 
                function get_rate_discount_html() {
                    let _item = Object.assign({}, item_data)
                    
                    if (item_data.rate && item_data.amount && item_data.rate !== item_data.amount) {
                        
                        return `
                            <div class="item-qty-rate">
                                <div class="item-qty">
                                <div class="quantity list-item__content text-right">
                                <div class="input-group input-group-xs">
                            <span class="input-group-btn">
                                <button class="btn-default btn-xs" data-action="increment">+</button>
                            </span>
        
                            <input class="form-control" type="number" value="${item_data.qty || 0}" style="padding: unset;text-align:right">
        
                            <span class="input-group-btn">
                                <button class="btn-default btn-xs" data-action="decrement">-</button>
                            </span>
                        </div>
                                </div>
                                </div>
                                <div class="item-rate-amount">
                                    <div class="item-rate">${format_currency(item_data.amount, currency,2)}</div>
                                    <div class="item-amount">${format_currency(item_data.rate, currency,2)}</div>
                                </div>
                            </div>`
                    } else {
                        return `
                            <div class="item-qty-rate">
                                <div class="item-qty">
                                <div class="quantity list-item__content text-right">
                                <div class="input-group input-group-xs">
                            <span class="input-group-btn">
                                <button class="btn-default btn-xs" data-action="increment">+</button>
                            </span>
        
                            <input class="form-control" type="number" value="${item_data.qty || 0}" style="text-align:right;padding: unset;">
        
                            <span class="input-group-btn">
                                <button class="btn-default btn-xs" data-action="decrement">-</button>
                            </span>
                        </div>
                                </div>
                                </div>
                                <div class="item-rate-amount">
                                    <div class="item-rate">${format_currency(item_data.rate, currency,2)}</div>
                                </div>
                            </div>`
                    }
        
                }
        
                function get_description_html() {
                    if (item_data.description) {
                        if (item_data.description.indexOf('<div>') != -1) {
                            try {
                                item_data.description = $(item_data.description).text();
                            } catch (error) {
                                item_data.description = item_data.description.replace(/<div>/g, ' ').replace(/<\/div>/g, ' ').replace(/ +/g, ' ');
                            }
                        }
                        item_data.description = frappe.ellipsis(item_data.description, 45);
                        return `<div class="item-desc">${item_data.description}</div>`;
                    }
                    return ``;
                }
        
                function get_item_image_html() {
                    const { image, item_name } = item_data;
                    if (image) {
                        return `<div class="item-image"><img src="${image}" alt="${image}""></div>`;
                    } else {
                        return `<div class="item-image item-abbr">${frappe.get_abbr(item_name)}</div>`;
                    }
                }
                
            
            }
        
            scroll_to_item($item) {
                if ($item.length === 0) return;
                const scrollTop = $item.offset().top - this.$cart_items_wrapper.offset().top + this.$cart_items_wrapper.scrollTop();
                this.$cart_items_wrapper.animate({ scrollTop });
            }
        
            update_selector_value_in_cart_item(selector, value, item) {
                const $item_to_update = this.get_cart_item(item);
                $item_to_update.attr(`data-${selector}`, escape(value));
            }
        
            toggle_checkout_btn(show_checkout) {
                if (show_checkout) {
                    this.$totals_section.find('.checkout-btn').css('display', 'flex');
                    this.$totals_section.find('.edit-cart-btn').css('display', 'none');
                } else {
                    this.$totals_section.find('.checkout-btn').css('display', 'none');
                    this.$totals_section.find('.edit-cart-btn').css('display', 'flex');
                }
            }
        
            highlight_checkout_btn(toggle) {
                if (toggle) {
                    this.$add_discount_elem.css('display', 'flex');
                    this.$cart_container.find('.checkout-btn').css({
                        'background-color': 'var(--blue-500)'
                    });
                } else {
                    this.$add_discount_elem.css('display', 'none');
                    this.$cart_container.find('.checkout-btn').css({
                        'background-color': 'var(--blue-200)'
                    });
                }
            }
        
            update_empty_cart_section(no_of_cart_items) {
                const $no_item_element = this.$cart_items_wrapper.find('.no-item-wrapper');
        
                // if cart has items and no item is present
                no_of_cart_items > 0 && $no_item_element && $no_item_element.remove() && this.$cart_header.css('display', 'flex');
        
                no_of_cart_items === 0 && !$no_item_element.length && this.make_no_items_placeholder();
            }
        
            on_numpad_event($btn) {
                const current_action = $btn.attr('data-button-value');
                const action_is_field_edit = ['qty', 'discount_percentage', 'rate'].includes(current_action);
                const action_is_allowed = action_is_field_edit ? (
                    (current_action == 'rate' && this.allow_rate_change) ||
                    (current_action == 'discount_percentage' && this.allow_discount_change) ||
                    (current_action == 'qty')) : true;
        
                const action_is_pressed_twice = this.prev_action === current_action;
                const first_click_event = !this.prev_action;
                const field_to_edit_changed = this.prev_action && this.prev_action != current_action;
        
                if (action_is_field_edit) {
                    if (!action_is_allowed) {
                        const label = current_action == 'rate' ? 'Rate'.bold() : 'Discount'.bold();
                        const message = __('Editing {0} is not allowed as per POS Profile settings', [label]);
                        frappe.show_alert({
                            indicator: 'red',
                            message: message
                        });
                        frappe.utils.play_sound("error");
                        return;
                    }
        
                    if (first_click_event || field_to_edit_changed) {
                        this.prev_action = current_action;
                    } else if (action_is_pressed_twice) {
                        this.prev_action = undefined;
                    }
                    this.numpad_value = '';
        
                } else if (current_action === 'checkout') {
                    this.prev_action = undefined;
                    this.toggle_item_highlight();
                    this.events.numpad_event(undefined, current_action);
                    return;
                } else if (current_action === 'remove') {
                    this.prev_action = undefined;
                    this.toggle_item_highlight();
                    
                    this.events.numpad_event(undefined, current_action);
                    return;
                } else {
                    this.numpad_value = current_action === 'delete' ? this.numpad_value.slice(0, -1) : this.numpad_value + current_action;
                    this.numpad_value = this.numpad_value || 0;
                }
        
                const first_click_event_is_not_field_edit = !action_is_field_edit && first_click_event;
        
                if (first_click_event_is_not_field_edit) {
                    frappe.show_alert({
                        indicator: 'red',
                        message: __('Please select a field to edit from numpad')
                    });
                    frappe.utils.play_sound("error");
                    return;
                }
        
                if (flt(this.numpad_value) > 100 && this.prev_action === 'discount_percentage') {
                    frappe.show_alert({
                        message: __('Discount cannot be greater than 100%'),
                        indicator: 'orange'
                    });
                    frappe.utils.play_sound("error");
                    this.numpad_value = current_action;
                }
        
                this.highlight_numpad_btn($btn, current_action);
                this.events.numpad_event(this.numpad_value, this.prev_action);
            }
            
            
            highlight_numpad_btn($btn, curr_action) {
                const curr_action_is_highlighted = $btn.hasClass('highlighted-numpad-btn');
                const curr_action_is_action = ['qty', 'discount_percentage', 'rate', 'done'].includes(curr_action);
        
                if (!curr_action_is_highlighted) {
                    $btn.addClass('highlighted-numpad-btn');
                }
                if (this.prev_action === curr_action && curr_action_is_highlighted) {
                    // if Qty is pressed twice
                    $btn.removeClass('highlighted-numpad-btn');
                }
                if (this.prev_action && this.prev_action !== curr_action && curr_action_is_action) {
                    // Order: Qty -> Rate then remove Qty highlight
                    const prev_btn = $(`[data-button-value='${this.prev_action}']`);
                    prev_btn.removeClass('highlighted-numpad-btn');
                }
                if (!curr_action_is_action || curr_action === 'done') {
                    // if numbers are clicked
                    setTimeout(() => {
                        $btn.removeClass('highlighted-numpad-btn');
                    }, 200);
                }
            }
        
            toggle_numpad(show) {
                if (show) {
                    this.$totals_section.css('display', 'none');
                    this.$numpad_section.css('display', 'flex');
                } else {
                    this.$totals_section.css('display', 'flex');
                    this.$numpad_section.css('display', 'none');
                }
                this.reset_numpad();
            }
          
            reset_numpad() {
                this.numpad_value = '';
                this.prev_action = undefined;
                this.$numpad_section.find('.highlighted-numpad-btn').removeClass('highlighted-numpad-btn');
            }
        
            toggle_numpad_field_edit(fieldname) {
                if (['qty', 'discount_percentage', 'rate'].includes(fieldname)) {
                    this.$numpad_section.find(`[data-button-value="${fieldname}"]`).click();
                }
            }
        
            // toggle_customer_info(show) {
            // 	if (show) {
            // 		const { customer } = this.customer_info || {};
                   
            // 		this.$cart_container.css('display', 'none');
            // 		this.$customer_section.css({
            // 			'height': '100%',
            // 			'padding-top': '0px'
            // 		});
            // 		this.$customer_section.find('.customer-details').html(
            // 			`<div class="header">
            // 				<div class="label">Contact Details</div>
            // 				<div class="close-details-btn">
            // 					<svg width="32" height="32" viewBox="0 0 14 14" fill="none">
            // 						<path d="M4.93764 4.93759L7.00003 6.99998M9.06243 9.06238L7.00003 6.99998M7.00003 6.99998L4.93764 9.06238L9.06243 4.93759" stroke="#8D99A6"/>
            // 					</svg>
            // 				</div>
            // 			</div>
            // 			<div class="customer-display">
            // 				${this.get_customer_image()}
            // 				<div class="customer-name-desc">
            // 					<div class="customer-name">${customer}</div>
            // 					<div class="customer-desc"></div>
            // 				</div>
            // 			</div>
            // 			<div class="customer-fields-container">
            // 				<div class="email_id-field"></div>
            // 				<div class="mobile_no-field"></div>
            // 				<div class="loyalty_program-field"></div>
            // 				<div class="loyalty_points-field"></div>
            // 			</div>
                        
            // 			<div class="location-fields-container">
            // 			<div class="visitdate-field"></div>
            // 			<div class="so-field"></div>
            // 			<div class="event-field"></div>
            // 			<div class="event_slot-field"></div>
                        
            // 				<div class="brand-field"></div>
            // 				<div class="city-field"></div>
            // 				<div class="branch-field"></div>
            // 				<div class="department-field"></div>
            // 			</div>
            // 			<div class="transactions-label">Recent Transactions</div>`
            // 		);
            // 		//added by shiby
        
            //         $('.location-fields-container').css({
            // 				'background-color': '#0799a3bd',
            // 				'display': 'grid',
            // 				'grid-template-columns': 'repeat(2,minmax(0,1fr))',
            // 				'margin-top': 'var(--margin-md)',
            // 				'-moz-column-gap': 'var(--padding-sm)',
            // 				'column-gap': 'var(--padding-sm)',
            // 				'row-gap': 'var(--padding-xs)',
            // 				'padding-right': '3px',
            // 				'padding-left': '3px'
            //         });
            // 		this.$customer_section.append(`<div class="location-details"></div>`);
            // 		//
            // 		// transactions need to be in diff div from sticky elem for scrolling
            // 		this.$customer_section.append(`<div class="customer-transactions"></div>`);
                    
        
            // 		this.render_customer_fields();
            // 		//added by shiby
            // 		this.render_location_fields();
            // 		//
                  
            // 		this.fetch_customer_transactions();
        
            // 	} else {
                    
            // 		if(this.non_sharable_slot==1 )
            // 			{
            // 				if(!cur_pos.cart.location_visitdate_field.value)
            // 				{
            // 					frappe.show_alert({
            // 						message: __("Please select Visit Date."),
            // 						indicator: 'red'
            // 					})
            // 					return frappe.utils.play_sound("error");
        
            // 				}
            // 				if(!cur_pos.cart.location_event_slot_field.value)
            // 				{
            // 					frappe.show_alert({
            // 						message: __("Please select slot."),
            // 						indicator: 'red'
            // 					})
            // 					return frappe.utils.play_sound("error");
        
            // 				}
            // 				if(!cur_pos.cart.location_brand_field.value)
            // 				{
            // 					frappe.show_alert({
            // 						message: __("Please select brand."),
            // 						indicator: 'red'
            // 					})
            // 					return frappe.utils.play_sound("error");
        
            // 				}
            // 				if(!cur_pos.cart.location_city_field.value)
            // 				{
            // 					frappe.show_alert({
            // 						message: __("Please select city."),
            // 						indicator: 'red'
            // 					})
            // 					return frappe.utils.play_sound("error");
        
            // 				}
            // 				if(!cur_pos.cart.location_branch_field.value)
            // 				{
            // 					frappe.show_alert({
            // 						message: __("Please select branch."),
            // 						indicator: 'red'
            // 					})
            // 					return frappe.utils.play_sound("error");
        
            // 				}
                            
                            
                        
            // 			}
            // 			this.$cart_container.css('display', 'flex');
            // 		this.$customer_section.css({
            // 			'height': '',
            // 			'padding-top': ''
            // 		});
        
            // 		this.update_customer_section();
                   
                        
            // }
                    
            // }
            toggle_customer_info(show) {
                if (show) {
                    const { customer } = this.customer_info || {};
                   
                    this.$cart_container.css('display', 'none');
                    this.$customer_section.css({
                        'height': '100%',
                        'padding-top': '0px'
                    });
                    this.$customer_section.find('.customer-details').html(
                        `<div class="header">
                            <div class="label">Contact Details</div>
                            <div class="close-details-btn">
                                <svg width="32" height="32" viewBox="0 0 14 14" fill="none">
                                    <path d="M4.93764 4.93759L7.00003 6.99998M9.06243 9.06238L7.00003 6.99998M7.00003 6.99998L4.93764 9.06238L9.06243 4.93759" stroke="#8D99A6"/>
                                </svg>
                            </div>
                        </div>
                        <div class="customer-display">
                            ${this.get_customer_image()}
                            <div class="customer-name-desc">
                                <div class="customer-name">${customer}</div>
                                <div class="customer-desc"></div>
                            </div>
                        </div>
                        <div class="customer-fields-container">
                            <div class="email_id-field"></div>
                            <div class="mobile_no-field"></div>
                            <div class="loyalty_program-field"></div>
                            <div class="loyalty_points-field"></div>
                           
                        </div>
                        
                         
                         <div class="btn edit-customer-btn"  style="background-color: rgba(7, 153, 163, 0.74);font-weight: bold">Edit Customer</div>
                        <div class="transactions-label">Recent Transactions</div>`
                    );
                    //added by shiby
        
                   
                    this.$customer_section.append(`<div class="location-details"></div>`);
                    //
                    // transactions need to be in diff div from sticky elem for scrolling
                    this.$customer_section.append(`<div class="customer-transactions"></div>`);
                    const me = this;
                    this.$customer_section.on('click', '.edit-customer-btn', function () {
                       
                        window.open('#Form/Customer/'+me.customer_info.customer, '_blank')
                            
                            
                    });
                    this.render_customer_fields();
                    //added by shiby
                    //this.render_location_fields();
                    //
                  
                    this.fetch_customer_transactions();
        
                } else {
            
                        this.$cart_container.css('display', 'flex');
                    this.$customer_section.css({
                        'height': '',
                        'padding-top': ''
                    });
        
                    this.update_customer_section();
                   
                        
            }
                    
            }
            render_customer_fields() {
                const $customer_form = this.$customer_section.find('.customer-fields-container');
        
                const dfs = [{
                    fieldname: 'email_id',
                    label: __('Email'),
                    fieldtype: 'Data',
                    options: 'email',
                    placeholder: __("Enter customer's email")
                },{
                    fieldname: 'mobile_no',
                    label: __('Phone Number'),
                    fieldtype: 'Data',
                    placeholder: __("Enter customer's phone number")
                },{
                    fieldname: 'loyalty_program',
                    label: __('Loyalty Program'),
                    fieldtype: 'Link',
                    options: 'Loyalty Program',
                    placeholder: __("Select Loyalty Program")
                },{
                    fieldname: 'loyalty_points',
                    label: __('Loyalty Points'),
                    fieldtype: 'Data',
                    read_only: 1
                }];
        
                const me = this;
                dfs.forEach(df => {
                    
                        this[`customer_${df.fieldname}_field`] = frappe.ui.form.make_control({
                       
                            df: { ...df,
                                onchange: handle_customer_field_change,
                            },
                            parent: $customer_form.find(`.${df.fieldname}-field`),
                            render_input: true,
                        });
        
                    
                    
                    //console.log(this[`customer_edit_customer_field`],"customer_edit_customer_field")
                    this[`customer_${df.fieldname}_field`].set_value(this.customer_info[df.fieldname]);
                    const frm=this.events.get_frm();
                    if(frm.doc.items.length==0)
                    {
                        
                        if(cur_pos.cart.customer_mobile_no_field){cur_pos.cart.customer_mobile_no_field.input.readOnly=false}
                        }
                    else{
                        
                        if(cur_pos.cart.customer_mobile_no_field){cur_pos.cart.customer_mobile_no_field.input.readOnly=true}
                        
                        //this[`customer_mobile_no_field`].attr('readonly', false);
                    }
                    
                   
                })
                
                function handle_customer_field_change() {
                    const current_value = me.customer_info[this.df.fieldname];
                    const current_customer = me.customer_info.customer;
                    
        
        
                    if (this.value && current_value != this.value && this.df.fieldname != 'loyalty_points') {
                        
        
                        frappe.call({
                            method: 'erpnext.selling.page.point_of_sale.point_of_sale.set_customer_info',
                            args: {
                                fieldname: this.df.fieldname,
                                customer: current_customer,
                                value: this.value
                            },
                            callback: (r) => {
                                if(!r.exc) {
                                    me.customer_info[this.df.fieldname] = this.value;
                                    frappe.show_alert({
                                        message: __("Customer contact updated successfully."),
                                        indicator: 'green'
                                    });
                                    frappe.utils.play_sound("submit");
                                }
                            }
                        });
                    }
                }
            }
        //Added by Shiby
            // render_location_fields() {
               
            // 	var slotoptions= this.getslotDetails('','');
            // 	var opbranch=this.getbranchDetails('');
            // 	const $customer_form = this.$customer_section.find('.location-fields-container');
            //     const query = { query: 'ecs_vim.doctype_triggers.point_of_sale.point_of_sale.event_query' };
            //     const soquery = { soquery: 'ecs_vim.doctype_triggers.point_of_sale.point_of_sale.so_query' };
            // 	const dfs = [{
            // 		fieldname: 'visitdate',
            // 		label: __('Visit Date'),
            // 		fieldtype: 'Date'
                    
            // 	}
            //     ,{
            // 		fieldname: 'so',
            // 		label: __('Sales Order'),
            // 		fieldtype: 'Link',
            // 		options:'Sales Order', 
            //         get_query: () => soquery,
            //         filters: {  
            //             "customer":[ "=", this.customer_info.customer?this.customer_info.customer:'' ]  ,           
            //            "pos_status":[ "=", 'Open']
            //         },
            //         placeholder: __("Select SO")
                       
                    
            // 	},{
            // 		fieldname: 'event',
            // 		label: __('Event'),
            // 		fieldtype: 'Link',
            // 		options: 'Item',				
            // 			get_query: () => query,
            // 			placeholder: __("Event"),
                        
            // 	},
            //     ,{
                    
            //         fieldname: 'event_slot',
            // 		label: __('Slot'),
            // 		fieldtype: 'Select',
            // 		options:slotoptions,
            //         placeholder: __("Slot"),
                       
            // 	},{
            // 		fieldname: 'brand',
            // 		label: __('Brand'),
            // 		fieldtype: 'Link',
            // 		options: 'Dimension Brand',
            // 		placeholder: __("Enter customer's email")
            // 	},{
            // 		fieldname: 'city',
            // 		label: __('City'),
            // 		fieldtype: 'Link',
            // 		options:'Dimension City',
            // 		placeholder: __("Enter customer's phone number")
            // 	},{
            // 		fieldname: 'branch',
            // 		label: __('Branch'),
            // 		fieldtype: 'Select',
            // 		options: opbranch,
            // 		placeholder: __("Select Branch")
            // 	},{
            // 		fieldname: 'department',
            // 		label: __('Department'),
            // 		fieldtype: 'Link',
            // 		options:'Dimension Department'
                    
            // 	}
            // ];
        
            // 	const me = this;
            
            // 	dfs.forEach(df => {
            // 		this[`location_${df.fieldname}_field`] = frappe.ui.form.make_control({
            // 			df: { ...df,
            // 				onchange: handle_location_field_change,
                            
            // 			},
            // 			parent: $customer_form.find(`.${df.fieldname}-field`),
            // 			render_input: true,
            // 		});
                  
            //         me.slot_field=this.location_info.event_slot;
            //         me.branch_field=this.location_info.branch;
                
            // 		if(me.branch_field && cur_pos.cart.location_branch_field )
            // 		{
            // 			cur_pos.cart.location_branch_field.set_value(me.branch_field)
            // 			cur_pos.cart.location_branch_field.refresh();
            // 		}
            // 		this[`location_${df.fieldname}_field`].set_value(me.location_info[df.fieldname]);
            // 	})
            // 	function handle_location_field_change() {
            // 		const current_value = me.location_info[this.df.fieldname];
            // 		const current_customer = me.customer_info.customer;
            // 		const visitdate_value=this.value
            // 		if(this.value)
            // 		{
            // 			if(this.df.fieldname == 'so')
            // 			{
            // 			cur_pos.cart.location_event_field.value='';
            // 			cur_pos.cart.location_event_slot_field.value='';
            // 			me.non_sharable_slot=0;
            // 			me.location_info.event='';
            // 			me.location_info.event_slot='';
            // 			cur_pos.cart.location_event_field.refresh();
            // 			cur_pos.cart.location_event_slot_field.refresh();	
            // 			cur_pos.cart.location_so_field.read_only=false;
            // 			cur_pos.cart.location_event_field.read_only=true;
            // 			cur_pos.cart.location_event_slot_field.read_only=true;
                        
            // 			}
            // 			if(this.df.fieldname == 'event')
            // 			{
                        
            // 			cur_pos.cart.location_event_slot_field.value='';
            // 			cur_pos.cart.location_so_field.value='';
            // 			me.location_info.so='';
            // 			//me.location_info.event_slot='';
            // 			me.non_sharable_slot=0;
            // 			cur_pos.cart.location_event_slot_field.refresh();
            // 			cur_pos.cart.location_so_field.refresh();	
            // 			cur_pos.cart.location_so_field.read_only=true;
            // 			cur_pos.cart.location_event_field.read_only=false;
            // 			cur_pos.cart.location_event_slot_field.read_only=false;
                        
            // 			}
            // 			if(this.df.fieldname=='visitdate')
            // 			{
            // 			cur_pos.cart.location_so_field.value='';
            // 			cur_pos.cart.location_event_field.value='';
            // 			cur_pos.cart.location_event_slot_field.value='';
            // 			me.location_info.so='';
                        
            // 			me.location_info.event='';
            //             me.location_info.event_slot='';
            // 			cur_pos.cart.location_so_field.refresh();
            // 			cur_pos.cart.location_event_field.refresh();
            // 			cur_pos.cart.location_event_slot_field.refresh();
            // 			me.non_sharable_slot=0;
            // 			}
        
            // 		}
            // 		else{
            // 			cur_pos.cart.location_event_field.value='';
            // 			cur_pos.cart.location_event_slot_field.value='';
            // 			cur_pos.cart.location_so_field.value='';
            // 			me.location_info.so='';
                        
            // 			me.location_info.event='';
            //             me.location_info.event_slot='';
            // 			me.non_sharable_slot=0;
            // 			cur_pos.cart.location_event_field.refresh();
            // 			cur_pos.cart.location_event_slot_field.refresh();
            // 			cur_pos.cart.location_so_field.refresh();	
            // 			cur_pos.cart.location_so_field.read_only=false;
            // 			cur_pos.cart.location_event_field.read_only=false;
            // 			cur_pos.cart.location_event_slot_field.read_only=false;
                        
        
            // 		}
                
            // 		me.location_info[this.df.fieldname]=this.value;
            // 		const frm = me.events.get_frm();
            // 		if (this.value && current_value != this.value && this.df.fieldname == 'visitdate') {
                        
            // 			//me.location_info.visitdate =this.value;
                        
            // 			frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'visit_date', this.value);
                        
            // 			cur_pos.cart.location_so_field.get_query= function() {					
            // 								return {
            // 								 filters: [
            // 								  ["Sales Order","customer", "=", current_customer?current_customer:''],
            // 								  ["Sales Order","docstatus", "=", 1],
            // 								  ["Sales Order","pos_status", "=", 'Open'],
            // 								  ["Sales Order","delivery_date", "=", me.location_info.visitdate]
            // 								 ]
                                         
            // 								}
                                         
            // 					}
        
            // 		}
            // 		if (this.value && current_value != this.value && this.df.fieldname == 'so') {
            // 				var sorder=this.value;
            // 				var item_list_data=[];
            // 				frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'sales_order', this.value);					
            // 				me.get_items(sorder);
            // 				if(this.value)
            // 				{
            // 					frappe.call({
            // 						method: "ecs_vim.doctype_triggers.point_of_sale.point_of_sale.get_payment_entry",
            // 						args: {
            // 							sorder: sorder
            // 						},
            // 						async: false,
            // 						callback: function(r) {
            // 							item_list_data = (r.message['result_list'] || []); 
            // 							console.log(item_list_data,"item_list_data")
            // 							var allocated_amount = 0;
            // 							Object.entries(item_list_data).forEach(([key, value]) => {
                                            
            // 								allocated_amount=flt(value["allocated_amount"])
            // 							});
            // 							var child = cur_frm.add_child("advances");
            // 							frappe.model.set_value(child.doctype, child.name, "allocated_amount", allocated_amount)
            // 							cur_frm.refresh_field("advances")
            // 						}
            // 					});
            // 				}
            // 		}
                    
            // 		if (this.value && current_value != this.value && this.df.fieldname == 'event') {
            // 			frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'event', this.value);
            // 			var event=this.value
            //             if(me.slot_field==undefined )
            //             {
                            
            //                 me.clear_cart();
            //             }
            //             else if(me.slot_field=='')
            //             {
                           
            //                 me.clear_cart();
            //             }
                        
            //             me.get_items_event(event);
            //             if(me.slot_field && me.slot_field!='')
            //                {
                           
            //                 	me.slot_change=false;
            //                    cur_pos.cart.location_event_slot_field.set_value(me.slot_field)
            //                    cur_pos.cart.location_event_slot_field.refresh();
                              
            //                 }
                       
                               
            // 		}
            // 		if (this.value && current_value != this.value && this.df.fieldname == 'event_slot') {
            // 			//me.location_info.event_slot =this.value;
            // 			frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'slot', this.value);
            // 			var slot=this.value
                       
            //             if(me.slot_change==undefined )
            //             {
                            
            //                 me.make_item_slot(slot,cur_pos.cart.location_event_field.value)
            //             }
            //             else if(me.slot_change==true)
            //             {
                           
            //                 me.make_item_slot(slot,cur_pos.cart.location_event_field.value)
            //             }
            // 		}
            //         if (this.value && current_value != this.value && this.df.fieldname == 'brand') {
            // 			frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'brand', this.value);
            // 			var brand=this.value
            //             me.get_branch_list(this.value);
                      
            //             if(me.branch_field && me.branch_field!='')
            //                {
                                
                            
            // 				   cur_pos.cart.location_branch_field.set_value(me.branch_field)
            //                    cur_pos.cart.location_branch_field.refresh();
            //                 }
                       
            // 		}
            // 		if (this.value && current_value != this.value && this.df.fieldname == 'city') {
            // 			frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'city', this.value);
                        
            // 		}
            // 		if (this.value && current_value != this.value && this.df.fieldname == 'branch') {
            // 			frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'branch', this.value);
                        
            // 		}
            // 		if (this.value && current_value != this.value && this.df.fieldname == 'department') {
            // 			frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'department', this.value);
                        
            // 		}
                    
            // 		//me.location_info[this.df.fieldname]=this.value;
            // 	}
                
            // }
            //
            render_location_fields() {
                const $customer_form = this.$location_fields_container;
                const soquery = { soquery: 'ecs_vim.doctype_triggers.point_of_sale.point_of_sale.so_query' };
                const dfs = [{
                    fieldname: 'visitdate',
                    label: __('Visit Date'),
                    fieldtype: 'Date',
                    default:frappe.datetime.nowdate()
                }
                ,{
                    fieldname: 'so',
                    label: __('Sales Order'),
                    fieldtype: 'Link',
                    options:'Sales Order', 
                    get_query: () => soquery,
                    filters: {  
                        "customer":[ "=", this.customer_info.customer?this.customer_info.customer:'' ]  ,           
                       "pos_status":[ "=", 'Open'],
                       "delivery_date":["=",frappe.datetime.nowdate()]
                    },
                    placeholder: __("Select SO")
                }
               
            ];
                const me = this;
                if(!cur_pos.cart.location_visitdate_field)
                {
                    dfs.forEach(df => {
                        this[`location_${df.fieldname}_field`] = frappe.ui.form.make_control({
                            df: { ...df,
                                onchange: handle_location_field_change,
                                
                            },
                            parent: $customer_form.find(`.${df.fieldname}-field`),
                            render_input: true,
                        });
                        this[`location_${df.fieldname}_field`].set_value(me.location_info[df.fieldname]);
                    })
                        cur_pos.cart.location_visitdate_field.set_value(String(frappe.datetime.nowdate()))
                        //me.get_default_so();
                        
                        
                }
                else{
                    
                    if(cur_pos.cart.location_visitdate_field)
                    {
                        cur_pos.cart.location_visitdate_field.set_value(String(frappe.datetime.nowdate()))
                        //me.get_default_so();
                        
                        
                    }
                        
                    
                    
                    
                }
                
                function handle_location_field_change() {
                    const current_value = me.location_info[this.df.fieldname];
                    const current_customer = me.customer_info.customer;
                    
                    if(this.value)
                    {
                        if(this.df.fieldname == 'so')
                        {
                         me.non_sharable_slot=0;
                        
                        }
                        
                        if(this.df.fieldname=='visitdate')
                        {
                            cur_pos.cart.location_so_field.value='';
                            me.location_info.so='';
                            me.non_sharable_slot=0;
                            cur_pos.cart.location_so_field.set_value('');
                            //me.get_default_so();
                        }
                    }
                    else{
                        me.location_info.so='';
                    }
                
                    me.location_info[this.df.fieldname]=this.value;
                    const frm = me.events.get_frm();
                   
                    if (this.value && current_value != this.value && this.df.fieldname == 'visitdate') {
                        frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'visit_date', this.value);
                       if(cur_frm.doc.__islocal==1)
                       {
                        
                        cur_pos.cart.location_so_field.get_query= function() {					
                            return {
                             filters: [
                              ["Sales Order","customer", "=", current_customer?current_customer:''],
                              ["Sales Order","docstatus", "=", 1],
                              ["Sales Order","pos_status", "=", 'Open'],
                              ["Sales Order","delivery_date", "=", me.location_info.visitdate]
                             ]
                            }
                        }
                        //me.get_default_so();
                        
                       }
                       else{
                         
                        
                        cur_pos.cart.location_so_field.get_query= function() {					
                            return {
                             filters: [
                              ["Sales Order","customer", "=", current_customer?current_customer:''],
                              ["Sales Order","docstatus", "=", 1],
                              ["Sales Order","pos_status", "=", 'Executed'],
                              ["Sales Order","delivery_date", "=", me.location_info.visitdate]
                             ]
                            }
                        }
                       }
                        
                    }
                    if (this.value && current_value != this.value && this.df.fieldname == 'so') {
                            var sorder=this.value;
                            var item_list_data=[];
                            frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'sales_order', this.value);	
                            frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'sales_order_no', this.value);						
                        if(cur_pos.cart.location_visitdate_field.value!='')
                        {
                            
                            me.get_positems(sorder);
                            if(this.value)
                            {
                                frappe.call({
                                    method: "ecs_vim.doctype_triggers.point_of_sale.point_of_sale.get_payment_entry",
                                    args: {
                                        sorder: sorder
                                    },
                                    async: false,
                                    callback: function(r) {
                                        item_list_data = (r.message['result_list'] || []); 
                                        
                                        var allocated_amount = 0;
                                        if(item_list_data.length>0)
                                        {
                                            Object.entries(item_list_data).forEach(([key, value]) => {
                                            
                                                allocated_amount=flt(value["allocated_amount"])
                                            });
                                            var child = cur_frm.add_child("advances");
                                            frappe.model.set_value(child.doctype, child.name, "allocated_amount", allocated_amount)
                                            cur_frm.refresh_field("advances")
                                        }
                                        
                                        
                                    }
                                });
                            }
                        }
                           
                    }
                    
                }
                
            }
            
            async get_default_so()
            {
                if(cur_frm.doc.__islocal==1)
                {
                    
                    const  res = await frappe.db.get_value("Sales Order",{'customer': cur_frm.doc.customer,'delivery_date':cur_pos.cart.location_visitdate_field.value,'pos_status':'Open','docstatus':1}  , "name");
                    
                    if(cur_frm.doc.customer)
                    {
                        cur_pos.cart.location_so_field.set_value(String(res.message.name))
                    }
                }
        
                
                //cur_pos.cart.location_so_field.set_value(String(res.message.name))
                //return res.message.name;
            }
            
            fetch_customer_transactions() {
                frappe.db.get_list('POS Invoice', {
                    filters: { customer: this.customer_info.customer, docstatus: 1 },
                    fields: ['name', 'grand_total', 'status', 'posting_date', 'posting_time', 'currency'],
                    limit: 20
                }).then((res) => {
                    const transaction_container = this.$customer_section.find('.customer-transactions');
        
                    if (!res.length) {
                        transaction_container.html(
                            `<div class="no-transactions-placeholder">No recent transactions found</div>`
                        )
                        return;
                    };
        
                    const elapsed_time = moment(res[0].posting_date+" "+res[0].posting_time).fromNow();
                    this.$customer_section.find('.customer-desc').html(`Last transacted ${elapsed_time}`);
        
                    res.forEach(invoice => {
                        const posting_datetime = moment(invoice.posting_date+" "+invoice.posting_time).format("Do MMMM, h:mma");
                        let indicator_color = {
                            'Paid': 'green',
                            'Draft': 'red',
                            'Return': 'gray',
                            'Consolidated': 'blue'
                        };
        
                        transaction_container.append(
                            `<div class="invoice-wrapper" data-invoice-name="${escape(invoice.name)}">
                                <div class="invoice-name-date">
                                    <div class="invoice-name">${invoice.name}</div>
                                    <div class="invoice-date">${posting_datetime}</div>
                                </div>
                                <div class="invoice-total-status">
                                    <div class="invoice-total">
                                        ${format_currency(invoice.grand_total, invoice.currency, 0) || 0}
                                    </div>
                                    <div class="invoice-status">
                                        <span class="indicator-pill whitespace-nowrap ${indicator_color[invoice.status]}">
                                            <span>${invoice.status}</span>
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="seperator"></div>`
                        )
                    });
                });
            }
            //Added by Shiby
            // fetch_location_details() {
            // 	frappe.db.get_value('POS Profile', this.pos_profile, ["is_event"]).then(({ message }) => {
                            
            // 		this.location_info = { ...message };
                    
                
            // });
            
            // }
        
            load_invoice() {
                const frm = this.events.get_frm();
                
                
                this.fetch_customer_details(frm.doc.customer).then(() => {
                    this.events.customer_details_updated(this.customer_info);
                    this.update_customer_section();
                });
                //added by shiby
                this.location_info={}
                this.render_location_fields();
                this.fetch_location_details(frm.doc.name)
                this.non_sharable_slot=0;
                
               
                //
                this.$cart_items_wrapper.html('');
                if (frm.doc.items.length) {
                  
                    frm.doc.items.forEach(item => {
                        this.update_item_html(item);
                    });
                } else {
                    this.make_no_items_placeholder();
                    this.highlight_checkout_btn(false);
                }
        
                this.update_totals_section(frm);
             
                if(frm.doc.docstatus === 1) {
                    this.$totals_section.find('.checkout-btn').css('display', 'none');
                    this.$totals_section.find('.edit-cart-btn').css('display', 'none');
                } else {
                    this.$totals_section.find('.checkout-btn').css('display', 'flex');
                    this.$totals_section.find('.edit-cart-btn').css('display', 'none');
                }
        
                this.toggle_component(true);
        
                var tbl = cur_frm.doc.seleceted_packed_items || [];
                var item_list_data=[];
                    var i = tbl.length;
                    if(cur_frm.doc.is_return)
                    {
                        while (i--)
                         {
                            tbl[i].packed_quantity=tbl[i].packed_quantity*-1
                         }
                        frappe.call({
                            method: "ecs_vim.doctype_triggers.point_of_sale.point_of_sale.get_return_packed_items",
                            args: {
                                pos_invoice: cur_frm.doc.return_against
                            },
                            async: false,
                            callback: function(r) {
                                item_list_data=   (r.message['result_list'] || []);
                                
                                var item_code="",parent_item='',set_no='',packed_quantity=0
                                Object.entries(item_list_data).forEach(([key, value]) => {
                                    
                                     item_code=value["item_code"]
                                    parent_item=value["parent_item"]
                                    set_no=value["set_no"]
                                    packed_quantity=value["packed_quantity"]
                                    
                                
                                    var itr = tbl.length;
                                    
                                    while (itr--)
                                    {
                                      
                                        if(tbl[itr].set_no==set_no && tbl[itr].parent_item==parent_item && tbl[itr].item_code==item_code)
                                         {
                                            
                                            var quantity=(parseInt(Math.abs(tbl[itr].packed_quantity))-parseInt(Math.abs(packed_quantity)))*-1
                                            frappe.model.set_value(tbl[itr].doctype, tbl[itr].name, "packed_quantity", quantity)
                                            frappe.model.set_value(tbl[itr].doctype, tbl[itr].name, "quantity", quantity*parseInt(tbl[itr].combo_qty))
                                            combo_qty
                                            cur_frm.refresh_field("seleceted_packed_items")
                                         }
                                        }
                                    
                                   
                                    });
                                cur_frm.doc.seleceted_packed_items=tbl
                              
                                // cur_frm.refresh_field("seleceted_packed_items")
                            }
                        });
                       
                    }
                    cur_frm.refresh();
        
        
            }
        
            toggle_component(show) {
                show ? this.$component.css('display', 'flex') : this.$component.css('display', 'none');
            }
            //Added by Shiby
            clear_cart(){
                cur_pos.cart.location_event_slot_field.set_value(undefined)
                cur_pos.cart.location_event_slot_field.refresh();
                const frm = this.events.get_frm();
                if(frm.doc.items.length){
                    frm.doc.items.forEach(item => {
                        const $item = this.get_cart_item(item);	
                        var current_item={}
                        current_item.item_code = item.item_code
                        current_item.batch_no = item.batch_no
                        current_item.uom = item.uom
                        frappe.model.set_value(item.doctype, item.name, 'qty', 0)
                            .then(() => {
                                frappe.model.clear_doc(item.doctype, item.name);
                                cur_pos.update_cart_html(current_item, true);
                                
                            })
                            .catch(e => console.log(e));
                        
                        
                    });
                this.events.numpad_event(undefined, "remove");
        
                }
                    
            }
            //clear cart and added selected SO Items to cart
            async get_positems(sorder) {
                
                       const me=this;	
                
                    const frm = this.events.get_frm();
                
                    frm.doc.items.forEach(item => {
                        
                        const $item = this.get_cart_item(item);	
                        var current_item={}
                        current_item.item_code = item.item_code
                        current_item.batch_no = item.batch_no
                        current_item.uom = item.uom
                        current_item.rate = item.rate
                      // 
                        
                        frappe.model.set_value(item.doctype, item.name, 'qty', 0)
                            .then(() => {
                                frappe.model.clear_doc(item.doctype, item.name);
                                cur_pos.update_cart_html(current_item, true);
                                
                            })
                            .catch(e => console.log(e));
                        
                        
                    });
                this.events.numpad_event(undefined, "remove");
                
                if(sorder)
                {	
                    const  res = await frappe.db.get_value("Sales Order",{'name': sorder,'pos_status':'Open'}  , "select_slot");
                    
                    // if(!res || !res.message.select_slot || res.message.select_slot=='')
                    // {
                         this.get_so_pos_items(sorder);
                        
                        
                        //  frappe.db.get_value('Sales Order', {'name': sorder}, ['additional_discount_percentage','discount_amount','coupon_code']).then(({ message }) => {
                        //     frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'applied_coupen',message.coupon_code);
                        //     frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'couponcode',message.coupon_code);
                        //     this.update_discount_so(message.additional_discount_percentage,message.discount_amount)
                            
                        //  })
                        frappe.db.get_value('Sales Order', {'name': sorder}, ['additional_discount_percentage','discount_amount','coupon_code']).then(({ message }) => {
                            console.log(message.coupon_code,message)  
                            this.update_discount_so(message.additional_discount_percentage,message.discount_amount)
                            frappe.db.get_value('Coupon Code', {'name':message.coupon_code}, ['coupon_code']).then(({ message }) => {
                              console.log(message.coupon_code,message)  
                            frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'applied_coupen',message.coupon_code);
                            frappe.model.set_value(frm.doc.doctype, frm.doc.name, 'couponcode',message.coupon_code);
                            
                        })
                         })
                        
                    // }
                    // else{
                    // 	frappe.db.get_value('Work Order', {'sales_order': sorder}, ['docstatus','status']).then(({ message }) => {
                        
                    // 		if(message.docstatus==1)
                    // 		{
                    // 			this.get_so_pos_items(sorder);	
                    // 		}
                    // 		else if(message.docstatus==undefined)
                    // 		{
                    // 			cur_pos.cart.location_so_field.set_value('')
                    // 			frappe.show_alert({
                    // 				indicator: 'red',
                    // 				message: "Work Order Not Created"
                    // 			});
                    // 			return;
                    // 		}
                    // 		else {
                                
                    // 			cur_pos.cart.location_so_field.set_value('')
                    // 			frappe.show_alert({
                    // 				indicator: 'red',
                    // 				message: "Work Order Not Submitted. Status: "+message.status
                    // 			});
                    // 			return;
                                
                    // 		}
            
                    // 	});
            
                    // }
                
        
                }
                
                
            }
            async	get_so_pos_items(sorder )
            {
                var item_list_data=[];var packed_list_data=[];
                const me=this;	
                
                frappe.call({
                    method: "ecs_vim.doctype_triggers.point_of_sale.point_of_sale.get_items",
                    args: {
                        sorder: sorder
                    },
                    async: false,
                    callback: function(r) {
                        item_list_data = (r.message['result_list'] || []); 
                        packed_list_data= (r.message['packed_list_data'] || []); 
                        ////console.log('Anuppppp', item_list_data);
                         let item_row = undefined;   if(item_list_data.length>0) 
                         {
                            // console.log("getsoitem")
                         }             
                        Object.entries(item_list_data).forEach(([key, value]) => {
                           
                            //item_row = this.get_item_from_frm(item_code, batch_no, uom)
                            var rate=0;var item_code = "";	var batch_no = "";	var serial_no = "";	var stock_uom = "";var conversion_factor = "";	var uom="";	var bundle_item="";				
                            // item.price_list_rate,item.base_price_list_rate,item.base_rate,item.base_amount,item.base_net_rate,item.base_net_amount,
                            // item.base_rate_with_margin,item.actual_qty,item.valuation_rate,item.conversion_factor,item.net_rate,item.net_amount
                            item_code=(value["item_code"]);
                            batch_no=(value["batch_no"]);
                            serial_no=(value["serial_no"]);
                            stock_uom=(value["stock_uom"]);
                            rate=(value["rate"]);
                            uom=(value["uom"]); 
                            if(value["bundle_item"])
                            {
                                bundle_item=(value["bundle_item"]); 
                            }
                        
                            //cur_pos.item_selector.bundle_item=bundle_item==''?null:1
                            me.events.so_item_selected({ field: 'qty', value: value["qty"], item: { item_code, batch_no, serial_no, stock_uom,rate,conversion_factor,uom }})
                            
                            
                        });
                        Object.entries(packed_list_data).forEach(([key, value]) => {
                        var child = cur_frm.add_child("seleceted_packed_items");
                            frappe.model.set_value(child.doctype, child.name, "parent_item", value["parent_item"])
                            frappe.model.set_value(child.doctype, child.name, "item_code", value["item_code"])
                            frappe.model.set_value(child.doctype, child.name, "set_no",parseInt(value["set_no"]))
                            frappe.model.set_value(child.doctype, child.name, "combo_qty",parseInt(value["qty"]))
                            if(value["set_no"]!=0)
                            {
                                frappe.model.set_value(child.doctype, child.name, "packed_quantity", 0)
                            }
                            else{
                                frappe.model.set_value(child.doctype, child.name, "packed_quantity", parseInt(value["packed_quantity"]))
                            }
                            
                            frappe.model.set_value(child.doctype, child.name, "default_item", value["default_item_in_pos"])
                            cur_frm.refresh_field("seleceted_packed_items")
                        })
                        
                        
                    }
                });
                // callback();
            }
            //clear cart and added selected event to cart if non_sharable_slot=1
            // get_items_event(event) {
                
            //     const slot_= this.location_info.event_slot
               
            // 	//cur_pos.cart.slot_field.set_value('');
               
            
            // 	this.non_sharable_slot=0;	
            // 	if(event)
            //     {
            // 		frappe.db.get_value('Item', event, ["non_sharable_slot","minimum_sales_quantity"]).then(({ message }) => {
            // 			this.minimum_sales_quantity=message.minimum_sales_quantity
            // 			if (message.non_sharable_slot==1){
                        
            // 				this.non_sharable_slot=1;
            //        			// $(`.slot-field`).css('display', 'block');
            //        			 var resultlist=[];var slotlist=[];
            // 				if(cur_pos.cart.location_visitdate_field.value){
            //        			 frappe.call({
            //                 "method": "ecs_vim.doctype_triggers.point_of_sale.point_of_sale.get_slot_list",
            //                 async: false,
            //                 args:{item_name:event?event:'',is_new:0,delivery_date:cur_pos.cart.location_visitdate_field.value},
            //                 callback: function (r) {
                                
            //                     resultlist = (r.message['result_list'] || []);
                                
            //                     Object.entries(resultlist).forEach(([key, value]) => {
            //                         var item = "";
            //                         item=(value["slot_name"]);
            //                         slotlist.push(item);
            //                     });
                                
            //                     this.slot_change=true;
            // 					cur_pos.cart.location_event_slot_field.df.options = slotlist
            //                     cur_pos.cart.location_event_slot_field.refresh();
                                
            //                 }})
                            
                        
            // 				}
            // 				else{
            // 					frappe.show_alert({
            // 						indicator: 'red',
            // 						message: "Select Visit date"
            // 					});
            // 				}
                    
                        
            // 				}
            // 				else{
                            
            // 					this.make_item_slot('',cur_pos.cart.location_event_field.value,this.minimum_sales_quantity)
                               
            // 				}
                            
            // 			});	 
                
                    
                               
            //     }
                                
            // }
            //added selected event to cart if non_sharable_slot=0
            // make_item_slot(slot,item){
           
            //    const me=this;
            //     const item_code = item;
            //     let batch_no = '';
            //     let serial_no = '';
            //     let uom = '';
            // 	let slot_name='';
              
            //     batch_no = batch_no === "undefined" ? undefined : batch_no;
            //     serial_no = serial_no === "undefined" ? undefined : serial_no;
            //     uom = uom === "undefined" ? undefined : uom;
            // 	slot_name = slot === "undefined" ? undefined : slot;
            //     me.events.item_selected({ field: 'qty', value: me.minimum_sales_quantity, item: { item_code, batch_no, serial_no, uom,slot }});
              
        
            // }
            // get_branch_list(brandname){
            
            // 	var resultlist=[];
            // 	frappe.call({
            // 	"method": "ecs_vim.doctype_triggers.point_of_sale.point_of_sale.get_branch_list",
            // 	async: false,
            // 	    args:{brand:brandname?brandname:''},
            // 	    callback: function (r) {
                    
            // 		resultlist = (r.message['branch_list'] || []);
            // 		cur_pos.cart.location_branch_field.df.options = resultlist
                    
            // 		cur_pos.cart.location_branch_field.set_value(cur_frm.doc.branch)
            //         cur_pos.cart.location_branch_field.refresh();
            // 	}
            // })
            
                    
                
            // }
            save_as_draft(){
               
                cur_pos.save_draft_invoice();
                // if(cur_pos.cart.discount_field)
                // {
                //     this.disremark=''
                //     this.hide_discount_control(0,'') 
                //     this.discount_field.value=0;
                    
                // }  
                 
        
        }
        validate_approver(){
            const me = this;
            const dialog = new frappe.ui.Dialog({
                title: __('Approve Discount'),
                  fields: [
                      {fieldtype: "Section Break"},
                      {fieldtype: 'Data', label: __('User'), fieldname: 'appuser',reqd:1
                                },
                      {fieldtype: 'Password', label: __('Password'), fieldname: 'apppassword',reqd:1
                           },
                    
                    ],
                    primary_action: async function({ appuser, apppassword}) {
                        if (!appuser) {
                            frappe.show_alert({
                                message: __("Please enter user name & password."),
                                indicator: 'red'
                            })
                            return frappe.utils.play_sound("error");
                        }
                       
                        const method = "ecs_vim.doctype_triggers.point_of_sale.point_of_sale.validate_user_permission";
                        const res = await frappe.call({ method, args: { appuser, apppassword }, freeze:true });
                        
                        if(res.message==1)
                        {
                            me.approve_discount(appuser);
                        }
                        else
                        {
                            frappe.show_alert({
                                message: __("No Permission."),
                                indicator: 'red'
                            })
                        }
                        
                        
                        dialog.hide();
                    },
                    primary_action_label: __('Login')
                    });
        
        dialog.show()
        dialog.$wrapper.find('.modal-dialog').css("width", "400px");
        
           
        }
        approve_discount(){
            const me = this;
            const dialog = new frappe.ui.Dialog({
                title: __('Approve Discount'),
                  fields: [
                      {fieldtype: "Section Break"},
                      {fieldtype: 'Float', label: __('Discount'), default: cur_frm.doc.additional_discount_percentage,
                                     fieldname: 'discount'
                                },
                      {fieldtype: 'Data', label: __('Remarks'), default: cur_frm.doc.discount_remark,
                                fieldname: 'remarks'
                           },
                    
                    ],
                    primary_action: async function({ discount, remarks }) {
                        
                        cur_pos.update_discount_approval(discount, remarks);
                        dialog.hide();
                    },
                    primary_action_label: __('Submit')
                    });
        
        dialog.show()
        dialog.$wrapper.find('.modal-dialog').css("width", "400px");
        dialog.$wrapper.find('.modal-dialog').css("height", "300px");
           
        }
        
            
        //end
            
        
        }),
        (erpnext.PointOfSale.ItemDetails = class {
            constructor(t) {
                var e = t.wrapper,
                    i = t.events,
                    a = t.settings;
                (this.wrapper = e), (this.events = i), (this.allow_rate_change = a.allow_rate_change), (this.allow_discount_change = a.allow_discount_change), (this.current_item = {}), this.init_component();
            }
            init_component() {
                this.prepare_dom(), this.init_child_components(), this.bind_events(), this.attach_shortcuts();
            }
            prepare_dom() {
                this.wrapper.append('<section class="item-details-container"></section>'), (this.$component = this.wrapper.find(".item-details-container"));
            }
            init_child_components() {
                this.$component.html(
                    '<div class="item-details-header" >\n\t\t\t\t<div class="label">Item Details</div>\n\t\t\t\t<div class="close-btn">\n\t\t\t\t\t<svg width="32" height="32" viewBox="0 0 14 14" fill="none">\n\t\t\t\t\t\t<path d="M4.93764 4.93759L7.00003 6.99998M9.06243 9.06238L7.00003 6.99998M7.00003 6.99998L4.93764 9.06238L9.06243 4.93759" stroke="#8D99A6"/>\n\t\t\t\t\t</svg>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class="item-display">\n\t\t\t\t<div class="item-name-desc-price">\n\t\t\t\t\t<div class="item-name"></div>\n\t\t\t\t\t<div class="item-desc"></div>\n\t\t\t\t\t<div class="item-price"></div>\n\t\t\t\t</div>\n\t\t\t\t<div class="item-image"></div>\n\t\t\t</div>\n\t\t\t<div class="discount-section"></div>\n\t\t\t<div class="form-container"></div>'
                ),
                    (this.$item_name = this.$component.find(".item-name")),
                    (this.$item_description = this.$component.find(".item-desc")),
                    (this.$item_price = this.$component.find(".item-price")),
                    (this.$item_image = this.$component.find(".item-image")),
                    (this.$form_container = this.$component.find(".form-container")),
                    (this.$dicount_section = this.$component.find(".discount-section"));
            }
            toggle_item_details_section(t) {
                var e = this.current_item,
                    i = e.item_code,
                    a = e.batch_no,
                    n = e.uom,
                    o = (e.rate, t && i === t.item_code),
                    s = t && a == t.batch_no,
                    r = t && n === t.uom;
                (this.item_has_changed = !!t && !(o && s && r)),
                    this.events.toggle_item_selector(this.item_has_changed),
                    this.toggle_component(this.item_has_changed),
                    this.item_has_changed
                        ? ((this.doctype = t.doctype),
                          (this.item_meta = frappe.get_meta(this.doctype)),
                          (this.name = t.name),
                          (this.item_row = t),
                          (this.currency = this.events.get_frm().doc.currency),
                          (this.current_item = { item_code: t.item_code, batch_no: t.batch_no, uom: t.uom, rate: t.rate }),
                          this.render_dom(t),
                          this.render_discount_dom(t),
                          this.render_form(t))
                        : (this.validate_serial_batch_item(), (this.current_item = {}));
            }
            validate_serial_batch_item() {
                var t = this,
                    e = this.events.get_frm().doc.items.find(function (e) {
                        return e.name === t.name;
                    });
                if (e) {
                    var i = e.has_serial_no,
                        a = e.has_batch_no,
                        n = !e.serial_no,
                        o = !e.batch_no;
                    ((i && n) || (a && o) || (i && a && (o || n))) &&
                        (frappe.show_alert({ message: __("Item will be removed since no serial / batch no selected."), indicator: "orange" }),
                        frappe.utils.play_sound("cancel"),
                        cur_pos.doc.items.length > 0 && (console.log("remove_item_from_cart"), this.events.remove_item_from_cart()));
                }
            }
            render_dom(t) {
                var e = t.item_name,
                    i = t.description,
                    a = t.image,
                    n = t.price_list_rate;
                this.$item_name.html(e),
                    this.$item_description.html(i ? (i = -1 === i.indexOf("...") && i.length > 140 ? i.substr(0, 139) + "..." : i) : ""),
                    this.$item_price.html(format_currency(n, this.currency, 2)),
                    a ? this.$item_image.html('<img src="' + a + '" alt="' + a + '">') : this.$item_image.html('<div class="item-abbr">' + frappe.get_abbr(e) + "</div>");
            }
            render_discount_dom(t) {
                t.discount_percentage
                    ? (this.$dicount_section.html('<div class="item-rate">' + format_currency(t.price_list_rate, this.currency, 2) + '</div>\n\t\t\t\t<div class="item-discount">' + t.discount_percentage + "% off</div>"),
                      this.$item_price.html(format_currency(t.rate, this.currency, 2)))
                    : this.$dicount_section.html("");
            }
            render_form(t) {
                var e = this,
                    i = this.get_form_fields(t);
                this.$form_container.html("");
                var a = "display:block;";
                i.forEach(function (i, n) {
                    (a = "uom" == i || "warehouse" == i || "conversion_factor" == i || "slot_name" == i ? "display: none;" : "display:block;"),
                        e.$form_container.append('<div class="' + i + '-control" data-fieldname="' + i + '" style="' + a + '"></div>');
                    var o = e.item_meta.fields.find(function (t) {
                        return t.fieldname === i;
                    });
                    "discount_percentage" === i && (o.label = __("Discount (%)"));
                    var s = e;
                    (e[i + "_control"] = frappe.ui.form.make_control({
                        df: Object.assign({}, o, {
                            onchange: function () {
                                s.events.form_updated(s.doctype, s.name, i, this.value);
                            },
                        }),
                        parent: e.$form_container.find("." + i + "-control"),
                        render_input: !0,
                    })),
                        e[i + "_control"].set_value(t[i]);
                }),
                    this.make_auto_serial_selection_btn(t),
                    this.bind_custom_control_change_event();
            }
            get_form_fields(t) {
                var e = ["qty", "uom", "rate", "conversion_factor", "discount_percentage", "warehouse", "actual_qty", "price_list_rate", "slot_name"];
                return t.has_serial_no && e.push("serial_no"), t.has_batch_no && e.push("batch_no"), e;
            }
            make_auto_serial_selection_btn(t) {
                t.has_serial_no &&
                    (t.has_batch_no || this.$form_container.append('<div class="grid-filler no-select"></div>'),
                    this.$form_container.append('<div class="btn btn-sm btn-secondary auto-fetch-btn">Auto Fetch Serial Numbers</div>'),
                    this.$form_container.find(".serial_no-control").find("textarea").css("height", "6rem"));
            }
            bind_custom_control_change_event() {
                var t = this,
                    e = this;
                this.rate_control &&
                    (this.allow_rate_change
                        ? (this.rate_control.df.onchange = function () {
                              (this.value || 0 === flt(this.value)) &&
                                  e.events.form_updated(e.doctype, e.name, "rate", this.value).then(function () {
                                      var t = frappe.get_doc(e.doctype, e.name),
                                          i = e.events.get_frm().doc;
                                      e.$item_price.html(format_currency(t.rate, i.currency, 2)), e.render_discount_dom(t);
                                  });
                          })
                        : (this.rate_control.df.read_only = 1),
                    this.rate_control.refresh()),
                    this.discount_percentage_control && !this.allow_discount_change && ((this.discount_percentage_control.df.read_only = 1), this.discount_percentage_control.refresh()),
                    this.serial_no_control &&
                        ((this.serial_no_control.df.reqd = 1),
                        (this.serial_no_control.df.onchange = async function () {
                            !e.current_item.batch_no && (await e.auto_update_batch_no()), e.events.form_updated(e.doctype, e.name, "serial_no", this.value);
                        }),
                        this.serial_no_control.refresh()),
                    this.batch_no_control &&
                        ((this.batch_no_control.df.reqd = 1),
                        (this.batch_no_control.df.get_query = function () {
                            return { query: "erpnext.controllers.queries.get_batch_no", filters: { item_code: e.item_row.item_code, warehouse: e.item_row.warehouse, posting_date: e.events.get_frm().doc.posting_date } };
                        }),
                        (this.batch_no_control.df.onchange = function () {
                            e.events.set_value_in_current_cart_item("batch-no", this.value), e.events.form_updated(e.doctype, e.name, "batch_no", this.value), (e.current_item.batch_no = this.value);
                        }),
                        this.batch_no_control.refresh()),
                    this.uom_control &&
                        (this.uom_control.df.onchange = function () {
                            e.events.set_value_in_current_cart_item("uom", this.value), e.events.form_updated(e.doctype, e.name, "uom", this.value), (e.current_item.uom = this.value);
                            var t = frappe.get_doc(e.doctype, e.name);
                            (e.conversion_factor_control.df.read_only = t.stock_uom == this.value), e.conversion_factor_control.refresh();
                        }),
                    frappe.model.on("POS Invoice Item", "*", function (e, i, a) {
                        var n = t[e + "_control"],
                            o = t.current_item,
                            s = o.item_code,
                            r = o.batch_no,
                            c = o.uom,
                            d = s === a.item_code,
                            _ = r == a.batch_no,
                            l = c === a.uom;
                        !!(d && _ && l) && n && n.get_value() !== i && (n.set_value(i), cur_pos.update_cart_html(a));
                    });
            }
            async set_uom_value(t, e) {
                var i = t;
                cur_pos.item_details.uom_control.set_value(i), $(".uom_control").change();
            }
            async check_is_stock_item(t) {
                return (await frappe.db.get_value("Item", t, "is_stock_item")).message.is_stock_item;
            }
            async auto_update_batch_no() {
                if (this.serial_no_control && this.batch_no_control) {
                    var t = this.serial_no_control
                        .get_value()
                        .split("\n")
                        .filter(function (t) {
                            return t;
                        });
                    if (!t.length) return;
                    var e = (await frappe.db.get_list("Serial No", { filters: { name: ["in", t] }, fields: ["batch_no", "name"] })).reduce(function (t, e) {
                            return t[e.batch_no] || (t[e.batch_no] = []), (t[e.batch_no] = t[e.batch_no].concat([e.name])), t;
                        }, {}),
                        i = Object.keys(e)[0],
                        a = e[i].join("\n"),
                        n = t.length !== e[i].length;
                    this.batch_no_control.get_value() != i && (await this.batch_no_control.set_value(i)),
                        n && (this.serial_no_control.set_value(a), this.qty_control.set_value(e[i].length)),
                        delete e[i],
                        n && this.events.clone_new_batch_item_in_frm(e, this.current_item);
                }
            }
            bind_events() {
                var t = this;
                this.bind_auto_serial_fetch_event(),
                    this.bind_fields_to_numpad_fields(),
                    this.$component.on("click", ".close-btn", function () {
                        t.events.close_item_details();
                    });
            }
            attach_shortcuts() {
                var t = this;
                this.wrapper.find(".close-btn").attr("title", "Esc"),
                    frappe.ui.keys.on("escape", function () {
                        t.$component.is(":visible") && t.events.close_item_details();
                    });
            }
            bind_fields_to_numpad_fields() {
                var t = this;
                this.$form_container.on("click", ".input-with-feedback", function () {
                    var e = $(this).attr("data-fieldname");
                    this.last_field_focused != e && (t.events.item_field_focused(e), (this.last_field_focused = e));
                });
            }
            bind_auto_serial_fetch_event() {
                var t = this;
                this.$form_container.on("click", ".auto-fetch-btn", function () {
                    t.batch_no_control && t.batch_no_control.set_value("");
                    var e = t.qty_control.get_value(),
                        i = t.conversion_factor_control.get_value(),
                        a = t.item_row.has_batch_no ? t.events.get_frm().doc.posting_date : "",
                        n = frappe.call({
                            method: "erpnext.stock.doctype.serial_no.serial_no.auto_fetch_serial_number",
                            args: { qty: e * i, item_code: t.current_item.item_code, warehouse: t.warehouse_control.get_value() || "", batch_nos: t.current_item.batch_no || "", posting_date: a, for_doctype: "POS Invoice" },
                        });
                    n.then(function (i) {
                        var a = i.message,
                            o = a.length;
                        if (o) o < e && (frappe.msgprint(__("Fetched only {0} available serial numbers.", [o])), t.qty_control.set_value(o));
                        else {
                            var s = t.warehouse_control.get_value().bold(),
                                r = t.current_item.item_code.bold();
                            frappe.msgprint(__("Serial numbers unavailable for Item {0} under warehouse {1}. Please try changing warehouse.", [r, s]));
                        }
                        (n = a.join("\n")), t.serial_no_control.set_value(n);
                    });
                });
            }
            toggle_component(t) {
                t ? this.$component.css("display", "flex") : this.$component.css("display", "none");
            }
        }),
        (erpnext.PointOfSale.NumberPad = class {
            constructor(t) {
                var e = t.wrapper,
                    i = t.events,
                    a = t.cols,
                    n = t.keys,
                    o = t.css_classes,
                    s = t.fieldnames_map;
                (this.wrapper = e), (this.events = i), (this.cols = a), (this.keys = n), (this.css_classes = o || []), (this.fieldnames = s || {}), this.init_component();
            }
            init_component() {
                this.prepare_dom(), this.bind_events();
            }
            prepare_dom() {
                this.cols;
                var t = this.keys,
                    e = this.css_classes,
                    i = this.fieldnames;
                this.wrapper.html(
                    '<div class="numpad-container">\n\t\t\t\t' +
                        t.reduce(function (t, a, n) {
                            return (
                                t +
                                a.reduce(function (t, a, o) {
                                    return t + '<div class="numpad-btn ' + (e && e[n] ? e[n][o] : "") + '" data-button-value="' + (i && i[a] ? i[a] : "string" == typeof a ? frappe.scrub(a) : a) + '">' + a + "</div>";
                                }, "")
                            );
                        }, "") +
                        "\n\t\t\t</div>"
                );
            }
            bind_events() {
                var t = this;
                this.wrapper.on("click", ".numpad-btn", function () {
                    var e = $(this);
                    t.events.numpad_event(e);
                });
            }
        }),
        (erpnext.PointOfSale.Payment = class {
            constructor({ events, wrapper }) {
                this.wrapper = wrapper;
                this.events = events;
        
                this.init_component();
            }
            
            init_component() {
                this.prepare_dom();
                this.initialize_numpad();
                this.bind_events();
                this.attach_shortcuts();
                
        
            }
            
            prepare_dom() {
                this.wrapper.append(
                    `<section class="payment-container">
                        <div class="section-label payment-section">Payment Method</div>
                        
                        <div class="payment-modes ">                
                        </div>
                        <div class="fields-numpad-container"  style="margin-top: -335px;flex:0;
                        margin-left: 300px;
                        width: 100%;
                        display: block;height:250px">
                        <div class="number-pad"></div></div>
                        
                        
                            <div class="fields-section">
                                <div class="section-label">Additional Information</div>
                                <div class="invoice-fields"></div>
                            </div>
                            
                        
                        <div class="totals-section">
                            <div class="totals"></div>
                        </div>
                        <div class="submit-order-btn">Complete Order</div>
                    </section>`
                );
                this.$component = this.wrapper.find('.payment-container');
                this.$payment_modes = this.$component.find('.payment-modes');
                this.$totals_section = this.$component.find('.totals-section');
                this.$totals = this.$component.find('.totals');
                this.$numpad = this.$component.find('.number-pad');
                this.$invoice_fields_section = this.$component.find('.fields-section');
                this.$payment_modes.css({
                    'display':'block',
                    'width':'50%',
                    'height':'320px',
                    'overflow-y': 'scroll'
                })
                //this.$totals_section.css('margin-top','0')
                this.$numpad.css({'height': '270px'})
                this.$component.find('.numpad-container').css('gap','0')
                this.$component.css('height','90vh')
            }
        
            make_invoice_fields_control() {
                const me=this
                frappe.db.get_doc("POS Settings", undefined).then((doc) => {
                    const fields = doc.invoice_fields;
                    if (!fields.length) return;
        
                    this.$invoice_fields = this.$invoice_fields_section.find('.invoice-fields');
                    this.$invoice_fields.html('');
                    const frm = this.events.get_frm();
        
                    fields.forEach(df => {
                        this.$invoice_fields.append(
                            `<div class="invoice_detail_field ${df.fieldname}-field" data-fieldname="${df.fieldname}" ></div>`
                        );
                        let df_events = {
                            onchange: function() {
                                
                                const doc = me.events.get_frm().doc;
                                const paid_amount = doc.paid_amount;
                                const items = doc.items;
                                frm.set_value(this.df.fieldname, this.value);
                                
                            }
                        };
                        if (df.fieldtype == "Button") {
                            df_events = {
                                click:  function() {
                                    if(!frm.doc.applied_coupen){
                                    if ( frm.script_manager.has_handlers(df.fieldname, frm.doc.doctype)) {
                                         frm.script_manager.trigger(df.fieldname, frm.doc.doctype, frm.doc.docname)
                                    }
                                }
                                else{
                                    frappe.throw("Only one Coupon can applied; Applied Coupon: "+frm.doc.applied_coupen)
                                }
                                    setTimeout(() => {
                                    me.update_coupen_section()},500)
                                   
                                    
                                    
                                }
                            };
                        }
        
                        this[`${df.fieldname}_field`] = frappe.ui.form.make_control({
                            df: {
                                ...df,
                                ...df_events
                            },
                            parent: this.$invoice_fields.find(`.${df.fieldname}-field`),
                            render_input: true,
                        });
                        this[`${df.fieldname}_field`].set_value(frm.doc[df.fieldname]);
                    });
                });
                
               
            }
           
            initialize_numpad() {
                const me = this;
                this.number_pad = new erpnext.PointOfSale.NumberPad({
                    wrapper: this.$numpad,
                    events: {
                        numpad_event: function($btn) {
                            me.on_numpad_clicked($btn);
                        }
                    },
                    cols: 3,
                    keys: [
                        [ 1, 2, 3 ],
                        [ 4, 5, 6 ],
                        [ 7, 8, 9 ],
                        [ '.', 0, 'Delete' ]
                    ],
                });
        
                this.numpad_value = '';
            }
        
            on_numpad_clicked($btn) {
                const button_value = $btn.attr('data-button-value');
        
                highlight_numpad_btn($btn);
                this.numpad_value = button_value === 'delete' ? this.numpad_value.slice(0, -1) : this.numpad_value + button_value;
                this.selected_mode.$input.get(0).focus();
                this.selected_mode.set_value(this.numpad_value);
        
                function highlight_numpad_btn($btn) {
                    $btn.addClass('shadow-base-inner bg-selected');
                    setTimeout(() => {
                        $btn.removeClass('shadow-base-inner bg-selected');
                    }, 100);
                }
            }
        
            bind_events() {
                const me = this;
        
                this.$payment_modes.on('click', '.mode-of-payment', function(e) {
                    const mode_clicked = $(this);
                    // if clicked element doesn't have .mode-of-payment class then return
                    if (!$(e.target).is(mode_clicked)) return;
        
                    const scrollLeft = mode_clicked.offset().left - me.$payment_modes.offset().left + me.$payment_modes.scrollLeft();
                    me.$payment_modes.animate({ scrollLeft });
        
                    const mode = mode_clicked.attr('data-mode');
        
                    // hide all control fields and shortcuts
                    $(`.mode-of-payment-control`).css('display', 'none');
                    $(`.cash-shortcuts`).css('display', 'none');
                    $(`.shortcut`).css('padding', '0');
                    me.$payment_modes.find(`.pay-amount`).css('display', 'inline');
                    me.$payment_modes.find(`.loyalty-amount-name`).css('display', 'none');
        
                    // remove highlight from all mode-of-payments
                    $('.mode-of-payment').removeClass('border-primary');
                    $('.mode-of-payment').css({
                        'padding':'3px'
                    })
        
                    if (mode_clicked.hasClass('border-primary')) {
                        // clicked one is selected then unselect it
                        mode_clicked.removeClass('border-primary');
                        me.selected_mode = '';
                    } else {
                        // clicked one is not selected then select it
                        mode_clicked.addClass('border-primary');
                        mode_clicked.find('.mode-of-payment-control').css('display', 'flex');
                        mode_clicked.find('.cash-shortcuts').css('display', 'grid');
                        me.$payment_modes.find(`.${mode}-amount`).css('display', 'none');
                        me.$payment_modes.find(`.${mode}-name`).css('display', 'inline');
        
                        me.selected_mode = me[`${mode}_control`];
                        me.selected_mode && me.selected_mode.$input.get(0).focus();
                        me.auto_set_remaining_amount();
                    }
                });
        
                frappe.ui.form.on('POS Invoice', 'contact_mobile', (frm) => {
                    const contact = frm.doc.contact_mobile;
                    var request_button = null;
                    if (this && this.request_for_payment_field)
                     request_button = $(this.request_for_payment_field.$input[0]);
                    if(request_button){if (contact) {
                        request_button.removeClass('btn-default').addClass('btn-primary');
                    } else {
                        request_button.removeClass('btn-primary').addClass('btn-default');
              }}
            });
        
                this.setup_listener_for_payments();
        
                this.$payment_modes.on('click', '.shortcut' , function()  {
                    const cash_clicked = $(this);
                    const value = $(this).attr('data-value');
                  
                    me.selected_mode.set_value(value);
                });
        
                this.$component.on('click', '.submit-order-btn', () => {
                    const doc = this.events.get_frm().doc;
                    const paid_amount = doc.paid_amount;
                    const items = doc.items;
                    
                    if (!cur_pos.cart.customer_field.value) {
                        cur_pos.cart.customer_field.value=$('.reset-customer-btn').attr("data-customer")
                        
                        if($('.reset-customer-btn').attr("data-customer")=='')
                        {
                            const message = items.length ? __("You cannot submit the order without Customer.") : __("You cannot submitthe order without Customer.");
                            frappe.show_alert({ message, indicator: "orange" });
                            frappe.utils.play_sound("error");
                            return;
                        }
                        
                    }
                    if(!cur_frm.doc.customer && !cur_frm.doc.customer_name){
                        const message = items.length ? __("You cannot submit the order without Customer.") : __("You cannot submit the order without Customer.");
                            frappe.show_alert({ message, indicator: "orange" });
                            frappe.utils.play_sound("error");
                            return;
                    }
                   // console.log((doc.grand_total-doc.total_advance)-paid_amount,"paid_amount+doc.total_advance")
                    if (flt((doc.grand_total-doc.total_advance).toFixed(2))-paid_amount> 0  ||  !items.length) {
                        const message = items.length ? __("You cannot submit the order without payment.") : __("You cannot submit empty order.");
                        frappe.show_alert({ message, indicator: "orange" });
                        frappe.utils.play_sound("error");
                        return;
                    }
                    cur_frm.doc.items.forEach(item => {
                        if(item.bundle_item && item.bundle_item==1){
                            var check_bundle_item = cur_frm.doc.seleceted_packed_items.filter(bundle_item => 
                              (bundle_item.parent_item === item.item_code ));
                              if(check_bundle_item.length==0)
                              {
                                const message = items.length ? __("You cannot submit the order without select bundle for item :"+item.item_code) : __("You cannot submit the order select bundle for item :"+item.item_code);
                                frappe.throw({ message, indicator: "orange" });
                                frappe.utils.play_sound("error");
                                return;
                              }
        
                        }
                        if(!item.income_account){
                            console.log(cur_frm.doc.company)
                            frappe.db.get_value('Company', cur_frm.doc.company, 'default_income_account').then(({ message }) => {
                                item.income_account = (message.default_income_account) || false;
                            });
                        }
                       
                    })
                    var tbl = cur_frm.doc.seleceted_packed_items || [];
                   console.log(cur_frm.doc.items,"cur_frm.doc.items")
                    var i = tbl.length;
                    while (i--)
                    {
                         if(tbl[i].packed_quantity == 0)
                            {
                             cur_frm.get_field("seleceted_packed_items").grid.grid_rows[i].remove();
                             }
                            //  else if(cur_frm.doc.is_return){
                            //     tbl[i].packed_quantity=tbl[i].packed_quantity*-1
                            //  }
                    }
                    
                    
                    var tbl_itm = cur_frm.doc.payments || [];
                   
                    var m = tbl_itm.length;
                    while (m--)
                    {
                         if(tbl_itm[m].amount == '')
                            {
                                tbl_itm[m].amount=0
                             }
                            
                    }
                    
                    cur_frm.refresh();
                    
                    doc.advance=[];
                   
                    this.events.submit_invoice();	
                    cur_pos.item_selector.item_group_field.set_value('');
                    cur_pos.item_selector.$items_container.html('')
                    cur_pos.item_selector.load_items_data()
                    cur_pos.combo_item_details.combo_items = [];
                    cur_pos.combo_item_details.combo_default_items = [];
                    cur_pos.combo_item_details.total_packed_qty=0
                    cur_pos.item_selector.bundle_item=0
                    
                    $(cur_pos.cart.sosearch_field.$input[0]).val('')
                    
                });
        
                frappe.ui.form.on('POS Invoice', 'paid_amount', (frm) => {
                    this.update_totals_section(frm.doc);
        
                    // need to re calculate cash shortcuts after discount is applied
                    const is_cash_shortcuts_invisible = !this.$payment_modes.find('.cash-shortcuts').is(':visible');
                    this.attach_cash_shortcuts(frm.doc);
                    !is_cash_shortcuts_invisible && this.$payment_modes.find('.cash-shortcuts').css('display', 'grid');
                });
               
                frappe.ui.form.on('POS Invoice', 'loyalty_amount', (frm) => {
                    const formatted_currency = format_currency(frm.doc.loyalty_amount, frm.doc.currency,2);
                    this.$payment_modes.find(`.loyalty-amount-amount`).html(formatted_currency);
                });
        
                frappe.ui.form.on("Sales Invoice Payment", "amount", (frm, cdt, cdn) => {
                    // for setting correct amount after loyalty points are redeemed
                    const default_mop = locals[cdt][cdn];
                   
                    const mode = default_mop.mode_of_payment.replace(/ +/g, "_").toLowerCase();
                    if (this[`${mode}_control`] && this[`${mode}_control`].get_value() != default_mop.amount) {
                        this[`${mode}_control`].set_value(default_mop.amount);
                    }
                });
               
                
            
            }
            
            setup_listener_for_payments() {
                frappe.realtime.on("process_phone_payment", (data) => {
                    const doc = this.events.get_frm().doc;
                    const { response, amount, success, failure_message } = data;
                    let message, title;
        
                    if (success) {
                        title = __("Payment Received");
                        const grand_total = cint(frappe.sys_defaults.disable_rounded_total) ? doc.grand_total : doc.rounded_total;
                        if (amount >= grand_total) {
                            frappe.dom.unfreeze();
                            message = __("Payment of {0} received successfully.", [format_currency(amount, doc.currency, 0)]);
                            this.events.submit_invoice();
                            
                            cur_frm.reload_doc();
        
                        } else {
                            message = __("Payment of {0} received successfully. Waiting for other requests to complete...", [format_currency(amount, doc.currency, 0)]);
                        }
                    } else if (failure_message) {
                        message = failure_message;
                        title = __("Payment Failed");
                    }
        
                    frappe.msgprint({ "message": message, "title": title });
                });
            }
        
            // auto_set_remaining_amount() {
            // 	const doc = this.events.get_frm().doc;
            // 	const grand_total = cint(frappe.sys_defaults.disable_rounded_total) ? doc.grand_total : doc.rounded_total;
            // 	//const remaining_amount = grand_total - doc.paid_amount;
            //     const remaining_amount = grand_total - doc.paid_amount-(doc.total_advance?doc.total_advance:0);
            // 	const current_value = this.selected_mode ? this.selected_mode.get_value() : undefined;
            // 	if (!current_value && remaining_amount > 0 && this.selected_mode) {
            // 		this.selected_mode.set_value(remaining_amount);
            // 	}
            // }
            auto_set_remaining_amount() {
                const doc = this.events.get_frm().doc;
                const grand_total = cint(frappe.sys_defaults.disable_rounded_total) ? doc.grand_total : doc.rounded_total;
                const remaining_amount = grand_total - doc.paid_amount;
                const current_value = this.selected_mode ? this.selected_mode.get_value() : undefined;
                console.log("auto_set_remaining_amount=1")
                if (!current_value && remaining_amount > 0 && this.selected_mode) {
                    this.selected_mode.set_value(flt(remaining_amount.toFixed(2)));
                }
            }
            setup_listener_for_payments() {
                frappe.realtime.on("process_phone_payment", (data) => {
                    const doc = this.events.get_frm().doc;
                    const { response, amount, success, failure_message } = data;
                    let message, title;
        
                    if (success) {
                        title = __("Payment Received");
                        if (amount >= doc.grand_total) {
                            frappe.dom.unfreeze();
                            message = __("Payment of {0} received successfully.", [format_currency(amount, doc.currency, 0)]);
                            
                            this.events.submit_invoice();                   
                           
                            cur_frm.reload_doc();
        
                        } else {
                            message = __("Payment of {0} received successfully. Waiting for other requests to complete...", [format_currency(amount, doc.currency, 0)]);
                        }
                    } else if (failure_message) {
                        message = failure_message;
                        title = __("Payment Failed");
                    }
        
                    frappe.msgprint({ "message": message, "title": title });
                });
            }
            auto_set_remaining_amount() {
                const doc = this.events.get_frm().doc;
                const remaining_amount = doc.grand_total - doc.paid_amount;
                const current_value = this.selected_mode ? this.selected_mode.get_value() : undefined;
                // console.log("auto_set_remaining_amount=2")
                // console.log(remaining_amount,current_value,"hkgkjfjh")
                if (!current_value && remaining_amount > 0 && this.selected_mode) {
                   // console.log(flt((remaining_amount-doc.total_advance).toFixed(2)),current_value,remaining_amount,this.selected_mode,doc.total_advance,"doc.total_advance")
                    //this.selected_mode.set_value(remaining_amount-doc.total_advance);
                    this.selected_mode.set_value(flt((remaining_amount-doc.total_advance).toFixed(2)));
                }
            }
            // auto_set_remaining_amount() {
            // 	const doc = this.events.get_frm().doc;
            // 	//const remaining_amount = doc.grand_total - doc.paid_amount;
            //     const remaining_amount = doc.grand_total - doc.paid_amount-(doc.total_advance?doc.total_advance:0);
            // 	const current_value = this.selected_mode ? this.selected_mode.get_value() : undefined;
            // 	if (!current_value && remaining_amount > 0 && this.selected_mode) {
            // 		this.selected_mode.set_value(remaining_amount);
            // 	}
            // }
        
            attach_shortcuts() {
                const ctrl_label = frappe.utils.is_mac() ? '⌘' : 'Ctrl';
                this.$component.find('.submit-order-btn').attr("title", `${ctrl_label}+Enter`);
                frappe.ui.keys.on("ctrl+enter", () => {
                    const payment_is_visible = this.$component.is(":visible");
                    const active_mode = this.$payment_modes.find(".border-primary");
                    if (payment_is_visible && active_mode.length) {
                        this.$component.find('.submit-order-btn').click();
                    }
                });
        
                frappe.ui.keys.add_shortcut({
                    shortcut: "tab",
                    action: () => {
                        const payment_is_visible = this.$component.is(":visible");
                        let active_mode = this.$payment_modes.find(".border-primary");
                        active_mode = active_mode.length ? active_mode.attr("data-mode") : undefined;
        
                        if (!active_mode) return;
        
                        const mode_of_payments = Array.from(this.$payment_modes.find(".mode-of-payment")).map(m => $(m).attr("data-mode"));
                        const mode_index = mode_of_payments.indexOf(active_mode);
                        const next_mode_index = (mode_index + 1) % mode_of_payments.length;
                        const next_mode_to_be_clicked = this.$payment_modes.find(`.mode-of-payment[data-mode="${mode_of_payments[next_mode_index]}"]`);
        
                        if (payment_is_visible && mode_index != next_mode_index) {
                            next_mode_to_be_clicked.click();
                        }
                    },
                    condition: () => this.$component.is(':visible') && this.$payment_modes.find(".border-primary").length,
                    description: __("Switch Between Payment Modes"),
                    ignore_inputs: true,
                    page: cur_page.page.page
                });
            }
        
            toggle_numpad() {
                // pass
            }
        
            render_payment_section() {
                this.render_payment_mode_dom();
                this.make_invoice_fields_control();
                this.update_totals_section();
            }
        
            edit_cart() {
                this.events.toggle_other_sections(false);
                this.toggle_component(false);
            }
        
            checkout() {
                this.events.toggle_other_sections(true);
                this.toggle_component(true);
        
                this.render_payment_section();
            }
        
            toggle_remarks_control() {
                if (this.$remarks.find('.frappe-control').length) {
                    this.$remarks.html('+ Add Remark');
                } else {
                    this.$remarks.html('');
                    this[`remark_control`] = frappe.ui.form.make_control({
                        df: {
                            label: __('Remark'),
                            fieldtype: 'Data',
                            onchange: function() {
                               
        
                            }
                        },
                        parent: this.$totals_section.find(`.remarks`),
                        render_input: true,
                    });
                    this[`remark_control`].set_value('');
                }
            }
        
            render_payment_mode_dom() {
                const doc = this.events.get_frm().doc;
                const payments = doc.payments;
                const currency = doc.currency;
                console.log(doc.payments,"doc.payments")
                
                this.$payment_modes.html(`${
                    payments.map((p, i) => {
                        const mode = p.mode_of_payment.replace(/ +/g, "_").toLowerCase();
                        const payment_type = p.type;
                        const margin = i % 2 === 0 ? 'pr-2' : 'pl-2';
                        const amount = p.amount > 0 ?  format_currency(p.amount, currency,2): '';
                        //console.log(p.amount,"payamt",amount,doc.advances)
                        return (`
                            <div class="payment-mode-wrapper">
                                <div class="mode-of-payment" data-mode="${mode}" data-payment-type="${payment_type}">
                                    ${p.mode_of_payment}
                                    <div class="${mode}-amount pay-amount">${amount}</div>
                                    <div class="${mode} mode-of-payment-control"></div>
                                </div>
                            </div>
                        `);
                    }).join('')
                }`);
                //flt(this.value)==doc.total_advance? '':flt(this.value)
                payments.forEach(p => {
                    const mode = p.mode_of_payment.replace(/ +/g, "_").toLowerCase();
                    const me = this;
                    this[`${mode}_control`] = frappe.ui.form.make_control({
                        df: {
                            label: p.mode_of_payment,
                            fieldtype: 'Currency',
                            placeholder: __('Enter {0} amount.', [p.mode_of_payment]),
                            onchange: function() {
                                const current_value = frappe.model.get_value(p.doctype, p.name, 'amount');
                                if (current_value != this.value) {
                                    frappe.model
                                        .set_value(p.doctype, p.name, 'amount', flt(flt(this.value).toFixed(2)))
                                        .then(() => me.update_totals_section())
        
                                    const formatted_currency = format_currency(this.value, currency,2);
                                    me.$payment_modes.find(`.${mode}-amount`).html(formatted_currency);
                                }
                            }
                            // onchange: function() {
                            // 	const current_value = frappe.model.get_value(p.doctype, p.name, 'amount');
                            // 	if (current_value != this.value) {
                            //         var totAmt=flt(this.value)
                            //         if(doc.total_advance>0)
                            //         {
                            //             if(flt(this.value)==doc.total_advance)
                            //             {
                            //                 totAmt=""
                            //             }
                            //             else if(flt(this.value)>doc.total_advance)
                            //             {
                            //                 totAmt=flt(this.value)-doc.total_advance
                            //             }
                            //             else{
                            //                 totAmt=''
                            //             }
                            //         }
                            // 		frappe.model
                            // 			.set_value(p.doctype, p.name, 'amount', totAmt)
                            // 			.then(() => me.update_totals_section())
        
                            // 		const formatted_currency = format_currency(this.value, currency,2);
                            // 		me.$payment_modes.find(`.${mode}-amount`).html(formatted_currency);
                            // 	}
                            // }
                        },
                        parent: this.$payment_modes.find(`.${mode}.mode-of-payment-control`),
                        render_input: true,
                    });
                    this[`${mode}_control`].toggle_label(false);
                    this[`${mode}_control`].set_value(0.0);
        
                    // if (p.default) {
                    // 	setTimeout(() => {
                    // 		this.$payment_modes.find(`.${mode}.mode-of-payment-control`).parent().click();
                    // 	}, 500);
                    // }
                });
        
                this.render_loyalty_points_payment_mode();
        
                this.attach_cash_shortcuts(doc);
            }
        
            attach_cash_shortcuts(doc) {
                const grand_total = cint(frappe.sys_defaults.disable_rounded_total) ? doc.grand_total : doc.rounded_total;
                const currency = doc.currency;
        
                const shortcuts = this.get_cash_shortcuts(flt(grand_total));
        
                this.$payment_modes.find('.cash-shortcuts').remove();
                let shortcuts_html = shortcuts.map(s => {
                    return `<div class="shortcut" data-value="${s}">${format_currency(s, currency, 0)}</div>`;
                }).join('');
        
                this.$payment_modes.find('[data-payment-type="Cash"]').find('.mode-of-payment-control')
                    .after(`<div class="cash-shortcuts">${shortcuts_html}</div>`);
            }
        
            get_cash_shortcuts(grand_total) {
                let steps = [1, 5, 10];
                const digits = String(Math.round(grand_total)).length;
        
                steps = steps.map(x => x * (10 ** (digits - 2)));
        
                const get_nearest = (amount, x) => {
                    let nearest_x = Math.ceil((amount / x)) * x;
                    return nearest_x === amount ? nearest_x + x : nearest_x;
                };
        
                return steps.reduce((finalArr, x) => {
                    let nearest_x = get_nearest(grand_total, x);
                    nearest_x = finalArr.indexOf(nearest_x) != -1 ? nearest_x + x : nearest_x;
                    return [...finalArr, nearest_x];
                }, []);
            }
        
            render_loyalty_points_payment_mode() {
                const me = this;
                const doc = this.events.get_frm().doc;
                const { loyalty_program, loyalty_points, conversion_factor } = this.events.get_customer_details();
        
                this.$payment_modes.find(`.mode-of-payment[data-mode="loyalty-amount"]`).parent().remove();
        
                if (!loyalty_program) return;
        
                let description, read_only, max_redeemable_amount;
                if (!loyalty_points) {
                    description = __("You don't have enough points to redeem.");
                    read_only = true;
                } else {
                    max_redeemable_amount = flt(flt(loyalty_points) * flt(conversion_factor), precision("loyalty_amount", doc));
                    description = __("You can redeem upto {0}.", [format_currency(max_redeemable_amount)]);
                    read_only = false;
                }
        
                const margin = this.$payment_modes.children().length % 2 === 0 ? 'pr-2' : 'pl-2';
                const amount = doc.loyalty_amount > 0 ? format_currency(doc.loyalty_amount, doc.currency,2) : '';
                this.$payment_modes.append(
                    `<div class="payment-mode-wrapper">
                        <div class="mode-of-payment" data-mode="loyalty-amount" data-payment-type="loyalty-amount">
                            Redeem Loyalty Points
                            <div class="loyalty-amount-amount pay-amount">${amount}</div>
                            <div class="loyalty-amount-name">${loyalty_program}</div>
                            <div class="loyalty-amount mode-of-payment-control"></div>
                        </div>
                    </div>`
                );
        
                this['loyalty-amount_control'] = frappe.ui.form.make_control({
                    df: {
                        label: __("Redeem Loyalty Points"),
                        fieldtype: 'Currency',
                        placeholder: __("Enter amount to be redeemed."),
                        options: 'company:currency',
                        read_only,
                        onchange: async function() {
                            if (!loyalty_points) return;
        
                            if (this.value > max_redeemable_amount) {
                                frappe.show_alert({
                                    message: __("You cannot redeem more than {0}.", [format_currency(max_redeemable_amount)]),
                                    indicator: "red"
                                });
                                frappe.utils.play_sound("submit");
                                me['loyalty-amount_control'].set_value(0);
                                return;
                            }
                            const redeem_loyalty_points = this.value > 0 ? 1 : 0;
                            await frappe.model.set_value(doc.doctype, doc.name, 'redeem_loyalty_points', redeem_loyalty_points);
                            frappe.model.set_value(doc.doctype, doc.name, 'loyalty_points', parseInt(this.value / conversion_factor));
                        },
                        description
                    },
                    parent: this.$payment_modes.find(`.loyalty-amount.mode-of-payment-control`),
                    render_input: true,
                });
                this['loyalty-amount_control'].toggle_label(false);
               
                // this.render_add_payment_method_dom();
            }
        
            render_add_payment_method_dom() {
                const docstatus = this.events.get_frm().doc.docstatus;
                if (docstatus === 0)
                    this.$payment_modes.append(
                        `<div class="w-full pr-2">
                            <div class="add-mode-of-payment w-half text-grey mb-4 no-select pointer">+ Add Payment Method</div>
                        </div>`
                    );
            }
            async update_coupen_section(){
                console.log(cur_frm.doc.applied_coupen,"cur_frm.doc.applied_coupen")
                if(cur_frm.doc.applied_coupen)
                    {
                        $('input[data-fieldname="couponcode"]').css("pointer-events", "none")
        
                    }
               else{
                $('input[data-fieldname="couponcode"]').css("pointer-events", "auto")
        
               }
               
        
            }
            update_totals_section(doc) {
                if (!doc) doc = this.events.get_frm().doc;
                const paid_amount = doc.paid_amount+(doc.total_advance?doc.total_advance:0);
                const grand_total = cint(frappe.sys_defaults.disable_rounded_total) ? doc.grand_total : doc.rounded_total;
                //const remaining = grand_total - doc.paid_amount;
                const remaining = grand_total - doc.paid_amount-(doc.total_advance?doc.total_advance:0);
                const change = doc.change_amount || remaining <= 0 ? -1 * remaining : undefined;
                const currency = doc.currency;
                const label = change ? __('Change') : __('To Be Paid');
               
                this.$totals.html(
                    `<div class="col">
                        <div class="total-label">Grand Total</div>
                        <div class="value">${format_currency(grand_total, currency,2)}</div>
                    </div>
                    <div class="seperator-y"></div>
                    <div class="col">
                        <div class="total-label">Paid Amount</div>
                        <div class="value">${format_currency(paid_amount, currency,2)}</div>
                    </div>
                    <div class="seperator-y"></div>
                    <div class="col">
                        <div class="total-label">${label}</div>
                        <div class="value">${format_currency(change || remaining, currency,2)}</div>
                    </div>`
                );
            }
          
            toggle_component(show) {
                show ? this.$component.css('display', 'flex') : this.$component.css('display', 'none');
            }
        }),
        (erpnext.PointOfSale.PastOrderList = class {
            constructor(t) {
                var e = t.wrapper,
                    i = t.events,
                    a = t.pos_profile;
                (this.wrapper = e), (this.events = i), (this.pos_profile = a), this.init_component();
            }
            init_component() {
                this.prepare_dom(), this.make_filter_section(), this.bind_events();
            }
            prepare_dom() {
                this.wrapper.append(
                    '<section class="past-order-list">\n\t\t\t\t<div class="filter-section">\n\t\t\t\t\t<div class="label">Recent Orders</div>\n\t\t\t\t\t<div class="search-field"></div>\n\t\t\t\t\t<div class="status-field"></div>\n                    <div class="approved-field"></div>\n\t\t\t\t</div>\n\t\t\t\t<div class="invoices-container"></div>\n\t\t\t</section>'
                ),
                    (this.$component = this.wrapper.find(".past-order-list")),
                    (this.$invoices_container = this.$component.find(".invoices-container"));
            }
            bind_events() {
                var t = this;
                this.search_field.$input.on("input", function (e) {
                    clearTimeout(t.last_search),
                        (t.last_search = setTimeout(function () {
                            var i = e.target.value;
                            t.refresh_list(i, t.status_field.get_value());
                        }, 300));
                });
                var e = this;
                this.$invoices_container.on("click", ".invoice-wrapper", function () {
                    var t = unescape($(this).attr("data-invoice-name"));
                    e.events.open_invoice_data(t);
                });
            }
            make_filter_section() {
                var t = this;
                (this.search_field = frappe.ui.form.make_control({
                    df: { label: __("Search"), fieldtype: "Data", placeholder: __("Search by invoice id or customer name") },
                    parent: this.$component.find(".search-field"),
                    render_input: !0,
                })),
                    (this.status_field = frappe.ui.form.make_control({
                        df: {
                            label: __("Invoice Status"),
                            fieldtype: "Select",
                            options: "Draft\nPaid\nReturn",
                            placeholder: __("Filter by invoice status"),
                            onchange: function () {
                                t.$component.is(":visible") && t.refresh_list();
                            },
                        },
                        parent: this.$component.find(".status-field"),
                        render_input: !0,
                    })),
                    this.search_field.toggle_label(!1),
                    this.status_field.toggle_label(!1),
                    this.status_field.set_value("Draft");
            }
            refresh_list() {
                var t = this;
                frappe.dom.freeze(), this.events.reset_summary();
                var e = this.search_field.get_value(),
                    i = this.status_field.get_value(),
                    a = this.events.get_frm().doc.pos_profile;
                return (
                    this.$invoices_container.html(""),
                    frappe.call({
                        method: "ecs_vim.doctype_triggers.point_of_sale.point_of_sale.get_past_order_list",
                        freeze: !0,
                        args: { search_term: e, status: i, pos_profile: a },
                        callback: function (e) {
                            frappe.dom.unfreeze(),
                                console.log(e)
                                t.$invoices_container.html(""),
                                e.message.forEach(function (e) {
                                    var i = t.get_invoice_html(e);
                                    t.$invoices_container.append(i);
                                });
                        },
                    })
                );
            }
            get_invoice_html(invoice) {
                const posting_datetime = moment(invoice.posting_date+" "+invoice.posting_time).format("Do MMMM, h:mma");
                let indicator_color = {
                    'Paid': 'green',
                    'Draft': 'red',
                    'Return': 'red',
                    'Consolidated': 'blue'
                };
                if (!invoice.status){
                    invoice.status = ""
                }
                return (
                    `<div class="invoice-wrapper" data-invoice-name="${escape(invoice.name)}">
                        <div class="invoice-name-date">
                            <div class="invoice-name">${invoice.name}</div>
                            <div class="invoice-date">
                                <svg class="mr-2" width="12" height="12" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round">
                                    <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"/><circle cx="12" cy="7" r="4"/>
                                </svg>
                                ${frappe.ellipsis(invoice.customer, 20)} / ${invoice.customer_name} / ${invoice.customer_mobile ? invoice.customer_mobile : ''}
                            </div>
                        </div>
                        <div class="invoice-total-status">
                            <div class="invoice-total"><span class="indicator-pill whitespace-nowrap ${indicator_color[invoice.status]}"><span>${invoice.status}</span></span> / ${format_currency(invoice.grand_total, invoice.currency, 0) || 0}</div>
                            <div class="invoice-date">${posting_datetime}</div>
                        </div>
                    </div>
                    <div class="seperator"></div>`
                );
            }
            toggle_component(t) {
                t ? this.$component.css("display", "flex") && this.refresh_list() : this.$component.css("display", "none");
            }
        }),
        (erpnext.PointOfSale.PastOrderSummary = class {
            constructor(t) {
                var e = t.wrapper,
                    i = t.events;
                (this.wrapper = e), (this.events = i), (this.sendinvoicesms = 0), (this.posinvoice = 0), this.init_component();
            }
            init_component() {
                this.prepare_dom(), this.init_email_print_dialog(), this.bind_events(), this.attach_shortcuts();
            }
            prepare_dom() {
                this.wrapper.append(
                    '<section class="past-order-summary">\n\t\t\t\t<div class="no-summary-placeholder">\n\t\t\t\t\tSelect an invoice to load summary data\n\t\t\t\t</div>\n\t\t\t\t<div class="invoice-summary-wrapper">\n\t\t\t\t\t<div class="abs-container">\n\t\t\t\t\t\t<div class="upper-section"></div>\n\t\t\t\t\t\t<div class="label">Items</div>\n\t\t\t\t\t\t<div class="items-container summary-container"></div>\n\t\t\t\t\t\t<div class="label">Totals</div>\n\t\t\t\t\t\t<div class="totals-container summary-container"></div>\n\t\t\t\t\t\t<div class="label">Payments</div>\n\t\t\t\t\t\t<div class="payments-container summary-container"></div>\n\t\t\t\t\t\t<div class="summary-btns"></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</section>'
                ),
                    (this.$component = this.wrapper.find(".past-order-summary")),
                    (this.$summary_wrapper = this.$component.find(".invoice-summary-wrapper")),
                    (this.$summary_container = this.$component.find(".abs-container")),
                    (this.$upper_section = this.$summary_container.find(".upper-section")),
                    (this.$items_container = this.$summary_container.find(".items-container")),
                    (this.$totals_container = this.$summary_container.find(".totals-container")),
                    (this.$payment_container = this.$summary_container.find(".payments-container")),
                    (this.$summary_btns = this.$summary_container.find(".summary-btns"));
            }
            init_email_print_dialog() {
                var t = this,
                    e = new frappe.ui.Dialog({
                        title: "Email Receipt",
                        fields: [{ fieldname: "email_id", fieldtype: "Data", options: "Email", label: "Email ID" }],
                        primary_action: function () {
                            t.send_email();
                        },
                        primary_action_label: __("Send"),
                    });
                this.email_dialog = e;
                var i = new frappe.ui.Dialog({
                    title: "Print Receipt",
                    fields: [{ fieldname: "print", fieldtype: "Data", label: "Print Preview" }],
                    primary_action: function () {
                        t.print_receipt();
                    },
                    primary_action_label: __("Print"),
                });
                this.print_dialog = i;
            }
            get_upper_section_html(doc) {
                const { status } = doc;
                let indicator_color = '';
                in_list(['Paid', 'Consolidated'], status) && (indicator_color = 'green');
                status === 'Draft' && (indicator_color = 'red');
                status === 'Return' && (indicator_color = 'grey');
        
                return `<div class="left-section">
                            <div class="customer-name">${doc.customer}</div>
                            <div class="customer-email">${this.customer_email}</div>
                            <div class="cashier">Sold by: ${doc.owner}</div>
                        </div>
                        <div class="right-section">
                            <div class="paid-amount">${format_currency(doc.paid_amount, doc.currency,2)}</div>
                            <div class="invoice-name">${doc.name} / ${doc.customer_name}</div>
                            <span class="indicator-pill whitespace-nowrap ${indicator_color}"><span>${doc.status}</span></span>
                        </div>`;
            }
            get_item_html(t, e) {
                return (
                    '<div class="item-row-wrapper">\n\t\t\t\t\t<div class="item-name">' +
                    e.item_name +
                    '</div>\n\t\t\t\t\t<div class="item-qty">' +
                    (e.qty || 0) +
                    '</div>\n\t\t\t\t\t<div class="item-rate-disc">' +
                    (e.rate && e.price_list_rate && e.rate !== e.price_list_rate
                        ? '<span class="item-disc">(' + e.discount_percentage + '% off)</span>\n\t\t\t\t\t\t<div class="item-rate">' + format_currency(e.rate, t.currency, 2) + "</div>"
                        : '<div class="item-rate">' + format_currency(e.price_list_rate || e.rate, t.currency, 2) + "</div>") +
                    "</div>\n\t\t\t\t</div>"
                );
            }
            get_discount_html(t) {
                return t.discount_amount
                    ? '<div class="summary-row-wrapper">\n\t\t\t\t\t\t<div>Discount (' + t.additional_discount_percentage + " %)</div>\n\t\t\t\t\t\t<div>" + format_currency(t.discount_amount, t.currency, 2) + "</div>\n\t\t\t\t\t</div>"
                    : "";
            }
            get_net_total_html(t) {
                return '<div class="summary-row-wrapper">\n\t\t\t\t\t<div>Net Total</div>\n\t\t\t\t\t<div>' + format_currency(t.net_total, t.currency, 2) + "</div>\n\t\t\t\t</div>";
            }
            get_taxes_html(t) {
                return t.taxes.length
                    ? '<div class="taxes-wrapper">' +
                          t.taxes
                              .map(function (e) {
                                  return (
                                      '\n\t\t\t\t<div class="tax-row">\n\t\t\t\t\t<div class="tax-label">' +
                                      (/[0-9]+/.test(e.description) ? e.description : e.description + " @ " + e.rate + "%") +
                                      '</div>\n\t\t\t\t\t<div class="tax-value">' +
                                      format_currency(e.tax_amount_after_discount_amount, t.currency, 2) +
                                      "</div>\n\t\t\t\t</div>\n\t\t\t"
                                  );
                              })
                              .join("") +
                          "</div>"
                    : "";
            }
            get_grand_total_html(t) {
                return '<div class="summary-row-wrapper grand-total">\n\t\t\t\t\t<div>Grand Total</div>\n\t\t\t\t\t<div>' + format_currency(t.grand_total, t.currency, 2) + "</div>\n\t\t\t\t</div>";
            }
            get_payment_html(t, e) {
                return '<div class="summary-row-wrapper payments">\n\t\t\t\t\t<div>' + e.mode_of_payment + "</div>\n\t\t\t\t\t<div>" + format_currency(e.amount, t.currency, 2) + "</div>\n\t\t\t\t</div>";
            }
            bind_events() {
                var t = this;
                cur_pos.item_selector.search_item_group.css("width", "10%"),
                    this.$summary_container.on("click", ".return-btn", function () {
                        var e = t,
                            i = new frappe.ui.Dialog({
                                title: __("Approve Return"),
                                fields: [{ fieldtype: "Section Break" }, { fieldtype: "Data", label: __("User"), fieldname: "appuser", reqd: 1 }, { fieldtype: "Password", label: __("Password"), fieldname: "apppassword", reqd: 1 }],
                                primary_action: async function (t) {
                                    var a = t.appuser,
                                        n = t.apppassword;
                                    if (!a) return frappe.show_alert({ message: __("Please enter user name & password."), indicator: "red" }), frappe.utils.play_sound("error");
                                    1 == (await frappe.call({ method: "ecs_vim.doctype_triggers.point_of_sale.point_of_sale.validate_user_permission", args: { appuser: a, apppassword: n }, freeze: !0 })).message
                                        ? (e.events.process_return(e.doc.name), e.toggle_component(!1), e.$component.find(".no-summary-placeholder").css("display", "flex"), e.$summary_wrapper.css("display", "none"), i.hide())
                                        : frappe.show_alert({ message: __("No Permission."), indicator: "red" });
                                },
                                primary_action_label: __("Login"),
                            });
                        i.show(), i.$wrapper.find(".modal-dialog").css("width", "400px");
                    }),
                    this.$summary_container.on("click", ".edit-btn", function () {
                        t.events.edit_order(t.doc.name), t.toggle_component(!1), t.$component.find(".no-summary-placeholder").css("display", "flex"), t.$summary_wrapper.css("display", "none");
                    }),
                    this.$summary_container.on("click", ".delete-btn", function () {
                        t.events.delete_order(t.doc.name), t.show_summary_placeholder();
                    }),
                    this.$summary_container.on("click", ".delete-btn", function () {
                        t.events.delete_order(t.doc.name), t.show_summary_placeholder();
                    }),
                    this.$summary_container.on("click", ".new-btn", function () {
                        t.events.new_order(),
                            t.toggle_component(!1),
                            t.$component.find(".no-summary-placeholder").css("display", "flex"),
                            t.$summary_wrapper.css("display", "none"),
                            $(".search-item-group").find(".dropdown-menu").find("a:first").trigger("click");
                    }),
                    this.$summary_container.on("click", ".email-btn", function () {
                        t.email_dialog.fields_dict.email_id.set_value(t.customer_email), t.email_dialog.show();
                    }),
                    this.$summary_container.on("click", ".print-btn", function () {
                        t.print_receipt();
                    }),
                    this.$summary_container.on("click", ".send-btn", function () {
                        console.log(t.doc, "dssdds"), t.make_dialog(t.doc.customer, t.doc.name);
                    }),
                    this.$summary_container.on("click", ".issue-btn", function () {
                        var e = t,
                            i = frappe.model.get_new_doc("Customer RFID");
                        (i.pos_invoice = e.doc.name), frappe.set_route("Form", "Customer RFID", i.name), cur_pos.show_header();
                    });
            }
            async validate_approver() {}
            print_receipt() {
                var t = this.events.get_frm();
                frappe.utils.print(this.doc.doctype, this.doc.name, t.pos_print_format, this.doc.letter_head, this.doc.language || frappe.boot.lang);
            }
            attach_shortcuts() {
                var t = this,
                    e = frappe.utils.is_mac() ? "⌘" : "Ctrl";
                this.$summary_container.find(".print-btn").attr("title", e + "+P"),
                    frappe.ui.keys.add_shortcut({
                        shortcut: "ctrl+p",
                        action: function () {
                            return t.$summary_container.find(".print-btn").click();
                        },
                        condition: function () {
                            return t.$component.is(":visible") && t.$summary_container.find(".print-btn").is(":visible");
                        },
                        description: __("Print Receipt"),
                        page: cur_page.page.page,
                    }),
                    this.$summary_container.find(".new-btn").attr("title", e + "+Enter"),
                    frappe.ui.keys.on("ctrl+enter", function () {
                        t.$component.is(":visible") && t.$summary_container.find(".new-btn").is(":visible") && t.$summary_container.find(".new-btn").click();
                    }),
                    this.$summary_container.find(".edit-btn").attr("title", e + "+E"),
                    frappe.ui.keys.add_shortcut({
                        shortcut: "ctrl+e",
                        action: function () {
                            return t.$summary_container.find(".edit-btn").click();
                        },
                        condition: function () {
                            return t.$component.is(":visible") && t.$summary_container.find(".edit-btn").is(":visible");
                        },
                        description: __("Edit Receipt"),
                        page: cur_page.page.page,
                    });
            }
            send_email() {
                var t = this,
                    e = this.events.get_frm(),
                    i = this.email_dialog.get_values().email_id,
                    a = this.doc || e.doc,
                    n = e.pos_print_format;
                frappe.call({
                    method: "frappe.core.doctype.communication.email.make",
                    args: { recipients: i, subject: __(e.meta.name) + ": " + a.name, doctype: a.doctype, name: a.name, send_email: 1, print_format: n, sender_full_name: frappe.user.full_name(), _lang: a.language },
                    callback: function (e) {
                        e.exc
                            ? frappe.msgprint(__("There were errors while sending email. Please try again."))
                            : (frappe.utils.play_sound("email"),
                              e.message.emails_not_sent_to
                                  ? frappe.msgprint(__("Email not sent to {0} (unsubscribed / disabled)", [frappe.utils.escape_html(e.message.emails_not_sent_to)]))
                                  : frappe.show_alert({ message: __("Email sent successfully."), indicator: "green" }),
                              t.email_dialog.hide());
                    },
                });
            }
            add_summary_btns(t) {
                var e = this;
                this.$summary_btns.html(""),
                    t.forEach(function (t) {
                        t.condition &&
                            t.visible_btns.forEach(function (t) {
                                var i = t.split(" ")[0].toLowerCase();
                                e.$summary_btns.append('<div class="summary-btn btn btn-default ' + i + '-btn">' + t + "</div>");
                            });
                    }),
                    this.$summary_btns.children().last().removeClass("mr-4");
            }
            toggle_summary_placeholder(t) {
                t
                    ? (this.$summary_wrapper.css("display", "none"), this.$component.find(".no-summary-placeholder").css("display", "flex"))
                    : (this.$summary_wrapper.css("display", "flex"), this.$component.find(".no-summary-placeholder").css("display", "none"));
            }
            make_dialog(t, e) {
                var i = document.getElementsByClassName("send-btn")[0];
                frappe.call({
                    method: "frappe.client.get_value",
                    args: { doctype: "Selling Settings", fieldname: ["send_invoice_sms", "pos_invoice"] },
                    callback: function (a) {
                        console.log(a, "sdfdsf"),
                            (this.sendinvoicesms = a.message.send_invoice_sms),
                            (this.posinvoice = a.message.pos_invoice),
                            1 == this.sendinvoicesms && 1 == this.posinvoice
                                ? frappe.call({
                                      method: "frappe.client.get_value",
                                      args: { doctype: "Customer", filters: { name: t }, fieldname: "mobile_no" },
                                      callback: function (a) {
                                          var n = new frappe.ui.Dialog({
                                              title: __("Send sms to"),
                                              static: !0,
                                              fields: [
                                                  { fieldtype: "Link", label: __("Customer"), fieldname: "customer_name", options: "Customer", reqd: 1, default: t, read_only: 1 },
                                                  { fieldtype: "Int", label: __("Mobile No"), fieldname: "mobile_no", reqd: 1, default: a.message.mobile_no },
                                              ],
                                              primary_action: async function (t) {
                                                  t.customer_name;
                                                  var a = t.mobile_no;
                                                  return (
                                                      (a.toString().length < 9 || a.toString().length > 10) && frappe.throw("Invalid Mobile No !!"),
                                                      frappe.call({
                                                          method: "ecs_vim.sms.send_sms.send_invoice_sms",
                                                          args: { mobile_no: a, name: e, type: "POS" },
                                                          callback: function (t) {
                                                              (i.disabled = !0), n.hide();
                                                          },
                                                      })
                                                  );
                                              },
                                              primary_action_label: __("Submit"),
                                          });
                                      },
                                  })
                                : (i.disabled = !0);
                    },
                });
            }
            get_condition_btn_map(t) {
                return t
                    ? [{ condition: !0, visible_btns: ["Print Receipt", "Email Receipt", "Issue RFID", "New Order", "Send SMS"] }]
                    : [
                          { condition: 0 === this.doc.docstatus, visible_btns: ["Edit Order", "Delete Order"] },
                          { condition: !this.doc.is_return && 1 === this.doc.docstatus, visible_btns: ["Print Receipt", "Email Receipt", "Issue RFID", "Return"] },
                          { condition: this.doc.is_return && 1 === this.doc.docstatus, visible_btns: ["Print Receipt", "Email Receipt"] },
                      ];
            }
            load_summary_of(t, e) {
                void 0 === e && (e = !1),
                    e ? this.$component.css("grid-column", "span 10 / span 10") : this.$component.css("grid-column", "span 6 / span 6"),
                    this.toggle_summary_placeholder(!1),
                    (this.doc = t),
                    this.attach_document_info(t),
                    this.attach_items_info(t),
                    this.attach_totals_info(t),
                    this.attach_payments_info(t);
                var i = this.get_condition_btn_map(e);
                this.add_summary_btns(i);
            }
            attach_document_info(t) {
                var e = this;
                frappe.db.get_value("Customer", this.doc.customer, "email_id").then(function (i) {
                    var a = i.message;
                    e.customer_email = a.email_id || "";
                    var n = e.get_upper_section_html(t);
                    e.$upper_section.html(n);
                });
            }
            attach_items_info(t) {
                var e = this;
                this.$items_container.html(""),
                    t.items.forEach(function (i) {
                        var a = e.get_item_html(t, i);
                        e.$items_container.append(a), e.set_dynamic_rate_header_width();
                    });
            }
            set_dynamic_rate_header_width() {
                var t = Array.from(this.$items_container.find(".item-rate-disc"));
                this.$items_container.find(".item-rate-disc").css("width", "");
                var e = t.reduce(function (t, e) {
                    return $(e).width() > t && (t = $(e).width()), t;
                }, 0);
                1 == (e += 1) && (e = ""), this.$items_container.find(".item-rate-disc").css("width", e);
            }
            attach_payments_info(t) {
                var e = this;
                if (
                    (this.$payment_container.html(""),
                    t.payments.forEach(function (i) {
                        if (i.amount) {
                            var a = e.get_payment_html(t, i);
                            e.$payment_container.append(a);
                        }
                    }),
                    t.redeem_loyalty_points && t.loyalty_amount)
                ) {
                    var i = this.get_payment_html(t, { mode_of_payment: "Loyalty Points", amount: t.loyalty_amount });
                    this.$payment_container.append(i);
                }
            }
            attach_totals_info(t) {
                this.$totals_container.html("");
                var e = this.get_net_total_html(t),
                    i = this.get_taxes_html(t),
                    a = this.get_discount_html(t),
                    n = this.get_grand_total_html(t);
                this.$totals_container.append(e), this.$totals_container.append(i), this.$totals_container.append(a), this.$totals_container.append(n);
            }
            toggle_component(t) {
                t ? this.$component.css("display", "flex") : this.$component.css("display", "none");
            }
        }),
        (erpnext.PointOfSale.Controller = class {
            constructor(t) {
                (this.wrapper = $(t).find(".layout-main-section")), (this.page = t.page), this.check_opening_entry(), this.hide_header();
            }
            hide_header() {
                $(".sticky-top").css("display", "none"), $(".page-head").css("position", "unset"), $(".page-head .page-head-content").css("height", "25px"), $(".layout-main-section-wrapper").css("margin-bottom", "10px");
            }
            show_header() {
                $(".sticky-top").css("display", "flex"), $(".page-head").css("position", "sticky"), $(".page-head .page-head-content").css("height", "var(--page-head-height)"), $(".layout-main-section-wrapper").css("margin-bottom", "10px");
            }
            fetch_opening_entry() {
                return frappe.call("erpnext.selling.page.point_of_sale.point_of_sale.check_opening_entry", { user: frappe.session.user });
            }
            check_opening_entry() {
                var t = this;
                this.fetch_opening_entry().then(function (e) {
                    e.message.length ? t.prepare_app_defaults(e.message[0]) : t.create_opening_voucher();
                });
            }
            create_closing_voucher() {
                var t,
                    e = this,
                    i = [
                        { fieldname: "mode_of_payment", fieldtype: "Link", in_list_view: 1, label: "Mode of Payment", options: "Mode of Payment", filters: { type: ["=", "Cash"] }, reqd: 1 },
                        {
                            fieldname: "closing_amount",
                            fieldtype: "Currency",
                            in_list_view: 1,
                            label: "Closing Amount",
                            options: "company:company_currency",
                            change: function () {
                                var t = this;
                                a.fields_dict.closing_details.df.data.some(function (e) {
                                    if (e.idx == t.doc.idx) return (e.closing_amount = t.value), a.fields_dict.closing_details.grid.refresh(), a.fields_dict.closing_details.grid.wrapper.find(".grid-add-row").hide(), !0;
                                });
                            },
                        },
                    ],
                    a = new frappe.ui.Dialog({
                        title: __("Create POS Closing Entry"),
                        static: !0,
                        fields: [{ fieldname: "closing_details", fieldtype: "Table", label: "Closing Details", cannot_add_rows: !1, in_place_edit: !0, reqd: 1, data: [], fields: i }],
                        primary_action: async function (t) {
                            t.company, t.pos_profile;
                            var i = t.closing_details;
                            if (!i.length) return frappe.show_alert({ message: __("Please add Mode of payments and closing details."), indicator: "red" }), frappe.utils.play_sound("error");
                            i = i.filter(function (t) {
                                return t.mode_of_payment;
                            });
                            var n = frappe.model.get_new_doc("POS Closing Entry");
                            (n.pos_profile = e.frm.doc.pos_profile),
                                (n.user = frappe.session.user),
                                (n.company = e.frm.doc.company),
                                (n.pos_opening_entry = e.pos_opening),
                                (n.cash_closing_amont = i[0].closing_amount),
                                (n.period_end_date = frappe.datetime.now_datetime()),
                                (n.posting_date = frappe.datetime.now_date()),
                                frappe.set_route("Form", "POS Closing Entry", n.name),
                                a.hide();
                        },
                        primary_action_label: __("Submit"),
                    });
                (t = cur_frm.doc.pos_profile) &&
                    frappe.db.get_doc("POS Profile", t).then(function (t) {
                        var e = t.payments;
                        (a.fields_dict.closing_details.df.data = []),
                            e.forEach(function (t) {
                                var e = t.mode_of_payment;
                                frappe.db.get_value("Mode of Payment", e, "type").then(function (t) {
                                    var i = t.message;
                                    "Cash" == String(i.type) &&
                                        (a.fields_dict.closing_details.df.data.push({ mode_of_payment: e, closing_amount: "0" }),
                                        a.fields_dict.closing_details.grid.refresh(),
                                        a.fields_dict.closing_details.grid.wrapper.find(".grid-add-row").hide());
                                });
                            }),
                            a.fields_dict.closing_details.grid.refresh(),
                            a.fields_dict.closing_details.grid.wrapper.find(".grid-add-row").hide();
                    }),
                    a.show(),
                    this.show_header();
            }
            create_opening_voucher() {
                var t = this,
                    e = [
                        { fieldname: "mode_of_payment", fieldtype: "Link", in_list_view: 1, label: "Mode of Payment", options: "Mode of Payment", filters: { type: ["=", "Cash"] }, reqd: 1 },
                        {
                            fieldname: "opening_amount",
                            fieldtype: "Currency",
                            in_list_view: 1,
                            label: "Opening Amount",
                            options: "company:company_currency",
                            change: function () {
                                var t = this;
                                i.fields_dict.balance_details.df.data.some(function (e) {
                                    if (e.idx == t.doc.idx) return (e.opening_amount = t.value), i.fields_dict.balance_details.grid.refresh(), i.fields_dict.balance_details.grid.wrapper.find(".grid-add-row").hide(), !0;
                                });
                            },
                        },
                    ],
                    i = new frappe.ui.Dialog({
                        title: __("Create POS Opening Entry"),
                        static: !0,
                        fields: [
                            { fieldtype: "Link", label: __("Company"), default: frappe.defaults.get_default("company"), options: "Company", fieldname: "company", reqd: 1 },
                            {
                                fieldtype: "Link",
                                label: __("POS Profile"),
                                options: "POS Profile",
                                fieldname: "pos_profile",
                                reqd: 1,
                                get_query: function () {
                                    return a;
                                },
                                onchange: function () {
                                    var t;
                                    (t = i.fields_dict.pos_profile.get_value()) &&
                                        frappe.db.get_doc("POS Profile", t).then(function (t) {
                                            var e = t.payments;
                                            (i.fields_dict.balance_details.df.data = []),
                                                e.forEach(function (t) {
                                                    var e = t.mode_of_payment;
                                                    frappe.db.get_value("Mode of Payment", e, "type").then(function (t) {
                                                        var a = t.message;
                                                        "Cash" == String(a.type) &&
                                                            (i.fields_dict.balance_details.df.data.push({ mode_of_payment: e, opening_amount: "0" }),
                                                            i.fields_dict.balance_details.grid.refresh(),
                                                            i.fields_dict.balance_details.grid.wrapper.find(".grid-add-row").hide());
                                                    });
                                                }),
                                                i.fields_dict.balance_details.grid.refresh(),
                                                i.fields_dict.balance_details.grid.wrapper.find(".grid-add-row").hide();
                                        });
                                },
                            },
                            { fieldname: "balance_details", fieldtype: "Table", label: "Opening Balance Details", cannot_add_rows: !1, in_place_edit: !0, reqd: 1, data: [], fields: e },
                        ],
                        primary_action: async function (e) {
                            var a = e.company,
                                n = e.pos_profile,
                                o = e.balance_details;
                            if (!o.length) return frappe.show_alert({ message: __("Please add Mode of payments and opening balance details."), indicator: "red" }), frappe.utils.play_sound("error");
                            o = o.filter(function (t) {
                                return t.mode_of_payment;
                            });
                            var s = await frappe.call({ method: "erpnext.selling.page.point_of_sale.point_of_sale.create_opening_voucher", args: { pos_profile: n, company: a, balance_details: o }, freeze: !0 });
                            !s.exc && t.prepare_app_defaults(s.message), i.hide();
                        },
                        primary_action_label: __("Submit"),
                    });
                i.show();
                var a = { query: "erpnext.accounts.doctype.pos_profile.pos_profile.pos_profile_query", filters: { company: i.fields_dict.company.get_value() } };
            }
            async prepare_app_defaults(t) {
                var e = this;
                (this.pos_opening = t.name),
                    (this.company = t.company),
                    (this.pos_profile = t.pos_profile),
                    (this.pos_opening_time = t.period_start_date),
                    (this.item_stock_map = {}),
                    (this.settings = {}),
                    frappe.db.get_value("Stock Settings", void 0, "allow_negative_stock").then(function (t) {
                        var i = t.message;
                        e.allow_negative_stock = flt(i.allow_negative_stock) || !1;
                    }),
                    frappe.db.get_doc("POS Profile", this.pos_profile).then(function (t) {
                        Object.assign(e.settings, t),
                            (e.settings.customer_groups = t.customer_groups.map(function (t) {
                                return t.customer_group;
                            })),
                            e.make_app();
                    });
            }
            set_opening_entry_status() {
                this.page.set_title_sub(
                    '<span class="indicator orange">\n\t\t\t\t<a class="text-muted" href="#Form/POS%20Opening%20Entry/' +
                        this.pos_opening +
                        '">\n\t\t\t\t\tOpened at ' +
                        moment(this.pos_opening_time).format("Do MMMM, h:mma") +
                        "\n\t\t\t\t</a>\n\t\t\t</span>"
                );
            }
            make_app() {
                this.prepare_dom(), this.prepare_components(), this.prepare_menu(), this.make_new_invoice(), this.hide_header();
            }
            prepare_dom() {
                this.wrapper.append('<div class="point-of-sale-app">\n            </div>'), (this.$components_wrapper = this.wrapper.find(".point-of-sale-app")), $(".point-of-sale-app section").css("min-height", "35rem");
            }
            prepare_components() {
                this.init_item_selector(), this.init_item_details(), this.init_item_cart(), this.init_payments(), this.init_recent_order_list(), this.init_order_summary(), this.init_combo_item_details();
            }
            prepare_menu() {
                this.page.clear_menu(),
                    this.page.add_menu_item(__("Home"), this.open_home.bind(this), !1, "Ctrl+"),
                    this.page.add_menu_item(__("Open Form View"), this.open_form_view.bind(this), !1, "Ctrl+F"),
                    this.page.add_menu_item(__("Toggle Recent Orders"), this.toggle_recent_order.bind(this), !1, "Ctrl+O"),
                    this.page.add_menu_item(__("Save as Draft"), this.save_draft_invoice.bind(this), !1, "Ctrl+S"),
                    this.page.add_menu_item(__("Close the POS"), this.close_pos.bind(this), !1, "Shift+Ctrl+C"),
                    this.page.add_menu_item(__("Approve Discount"), this.validate_approver.bind(this), !1, "Shift+Ctrl+D"),
                    this.page.add_menu_item(__("Issue RFID"), this.issue_rfid.bind(this), !1, "Ctrl+R");
            }
            open_home() {
                frappe.set_route("Form", "Home"), this.show_header();
            }
            open_form_view() {
                frappe.model.sync(this.frm.doc), frappe.set_route("Form", this.frm.doc.doctype, this.frm.doc.name);
            }
            toggle_recent_order() {
                var t = this.recent_order_list.$component.is(":hidden");
                this.toggle_recent_order_list(t);
            }
            save_draft_invoice() {
                var t = this;
                if (this.$components_wrapper.is(":visible"))
                    return 0 == this.frm.doc.items.length
                        ? (frappe.show_alert({ message: __("You must add atleast one item to save it as draft."), indicator: "red" }), void frappe.utils.play_sound("error"))
                        : void this.frm
                              .save(void 0, void 0, void 0, function () {
                                  frappe.show_alert({ message: __("There was an error saving the document."), indicator: "red" }), frappe.utils.play_sound("error");
                              })
                              .then(function () {
                                  frappe.run_serially([
                                      function () {
                                          return frappe.dom.freeze();
                                      },
                                      function () {
                                          return t.make_new_invoice();
                                      },
                                      function () {
                                          return frappe.dom.unfreeze();
                                      },
                                  ]),
                                      t.update_POS();
                              });
            }
            issue_rfid() {
                var t = frappe.model.get_new_doc("Customer RFID");
                (t.pos_invoice = this.frm.doc.name), frappe.set_route("Form", "Customer RFID", t.name), this.show_header();
            }
            close_pos() {
                this.$components_wrapper.is(":visible") && this.create_closing_voucher();
            }
            async update_discount_approval(t, e) {
                cur_pos.cart.update_discount(e, t), cur_pos.cart.hide_discount_control(t, e);
            }
            validate_approver() {
                var t = this,
                    e = new frappe.ui.Dialog({
                        title: __("Approve Discount"),
                        fields: [{ fieldtype: "Section Break" }, { fieldtype: "Data", label: __("User"), fieldname: "appuser", reqd: 1 }, { fieldtype: "Password", label: __("Password"), fieldname: "apppassword", reqd: 1 }],
                        primary_action: async function (i) {
                            var a = i.appuser,
                                n = i.apppassword;
                            if (!a) return frappe.show_alert({ message: __("Please enter user name & password."), indicator: "red" }), frappe.utils.play_sound("error");
                            1 == (await frappe.call({ method: "ecs_vim.doctype_triggers.point_of_sale.point_of_sale.validate_user_permission", args: { appuser: a, apppassword: n }, freeze: !0 })).message
                                ? t.approve_discount(a)
                                : frappe.show_alert({ message: __("No Permission."), indicator: "red" }),
                                e.hide();
                        },
                        primary_action_label: __("Login"),
                    });
                e.show(), e.$wrapper.find(".modal-dialog").css("width", "400px");
            }
            approve_discount() {
                var t = this,
                    e = new frappe.ui.Dialog({
                        title: __("Approve Discount"),
                        fields: [
                            { fieldtype: "Section Break" },
                            { fieldtype: "Float", label: __("Discount"), default: cur_frm.doc.additional_discount_percentage, fieldname: "discount" },
                            { fieldtype: "Data", label: __("Remarks"), default: cur_frm.doc.discount_remark, fieldname: "remarks" },
                        ],
                        primary_action: async function (i) {
                            var a = i.discount,
                                n = i.remarks;
                            t.update_discount_approval(a, n), e.hide();
                        },
                        primary_action_label: __("Submit"),
                    });
                e.show(), e.$wrapper.find(".modal-dialog").css("width", "400px"), e.$wrapper.find(".modal-dialog").css("height", "300px");
            }
            init_item_selector() {
                var t = this;
                this.item_selector = new erpnext.PointOfSale.ItemSelector({
                    wrapper: this.$components_wrapper,
                    pos_profile: this.pos_profile,
                    settings: this.settings,
                    events: {
                        item_selected: function (e) {
                            return t.on_cart_update(e);
                        },
                        bundle_item_selected: function (e) {
                            return t.on_bundle_cart_update(e);
                        },
                        get_frm: function () {
                            return t.frm || {};
                        },
                    },
                });
            }
            init_item_cart() {
                var t = this;
                this.cart = new erpnext.PointOfSale.ItemCart({
                    wrapper: this.$components_wrapper,
                    settings: this.settings,
                    events: {
                        item_selected: function (e) {
                            return t.on_cart_update(e);
                        },
                        item_selected_desc: function (e) {
                            return t.on_cart_update_desc(e);
                        },
                        so_item_selected: function (e) {
                            return t.on_cart_update_from_so(e);
                        },
                        get_frm: function () {
                            return t.frm;
                        },
                        cart_item_clicked: function (e, i, a, n) {
                            var o = i ? "batch_no" : "item_code",
                                s = i || e,
                                r = t.frm.doc.items.find(function (t) {
                                    return t[o] === s && t.uom === a && t.rate === parseFloat(n);
                                });
                            console.log(t.frm.doc.items, parseFloat(n)), r.is_free_item || t.item_details.toggle_item_details_section(r);
                        },
                        cart_combo_item_clicked: function (e, i, a, n, o) {
                            var s = i ? "batch_no" : "item_code",
                                r = i || e,
                                c = t.frm.doc.items.find(function (t) {
                                    return t[s] === r && t.uom === a && t.rate === parseFloat(n);
                                });
                            console.log(c, "AAAAAAAAAAA"),
                                c && !c.is_free_item
                                    ? ((cur_pos.combo_item_details.combo_items = []),
                                      (cur_pos.combo_item_details.combo_default_items = []),
                                      (cur_pos.combo_item_details.total_packed_qty = c.qty),
                                      cur_frm.doc.seleceted_packed_items.forEach(function (t) {
                                          var i = {};
                                          e == t.parent_item &&
                                              ((i.parent_item = t.parent_item),
                                              (i.item_code = t.item_code),
                                              (i.packed_quantity = t.packed_quantity),
                                              (i.set_no = t.set_no),
                                              (i.combo_qty = t.combo_qty),
                                              cur_pos.combo_item_details.combo_items.push(i));
                                      }),
                                      t.combo_item_details.toggle_combo_item_details_section(c))
                                    : t.on_cart_update(o);
                        },
                        numpad_event: function (e, i) {
                            return t.update_item_field(e, i);
                        },
                        checkout: function () {
                            return t.payment.checkout();
                        },
                        edit_cart: function () {
                            return t.payment.edit_cart();
                        },
                        customer_details_updated: function (e) {
                            (t.customer_details = e), t.payment.render_loyalty_points_payment_mode();
                        },
                    },
                });
            }
            init_item_details() {
                var t = this;
                this.item_details = new erpnext.PointOfSale.ItemDetails({
                    wrapper: this.$components_wrapper,
                    settings: this.settings,
                    events: {
                        get_frm: function () {
                            return t.frm;
                        },
                        toggle_item_selector: function (e) {
                            t.item_selector.resize_selector(e), t.cart.toggle_numpad(e);
                        },
                        form_updated: function (e, i, a, n) {
                            var o = frappe.model.get_doc(e, i);
                            if (o && o[a] != n) {
                                var s = t.item_details.current_item,
                                    r = { field: a, value: n, item: { item_code: s.item_code, batch_no: s.batch_no, uom: s.uom } };
                                return t.on_cart_update(r);
                            }
                        },
                        item_field_focused: function (e) {
                            t.cart.toggle_numpad_field_edit(e);
                        },
                        set_value_in_current_cart_item: function (e, i) {
                            t.cart.update_selector_value_in_cart_item(e, i, t.item_details.current_item);
                        },
                        clone_new_batch_item_in_frm: function (e, i) {
                            Object.keys(e).forEach(function (a) {
                                var n = i.item_code,
                                    o = i.batch_no,
                                    s = t.frm.doc.items.find(function (t) {
                                        return t.item_code === n && t.batch_no === o;
                                    }),
                                    r = t.frm.add_child("items", Object.assign({}, s));
                                (r.batch_no = a),
                                    (r.serial_no = e[a].join("\n")),
                                    (r.qty = e[a].length),
                                    t.frm.doc.items.forEach(function (e) {
                                        n === e.item_code && t.update_cart_html(e);
                                    });
                            });
                        },
                        remove_item_from_cart: function () {
                            return t.remove_item_from_cart();
                        },
                        get_item_stock_map: function () {
                            return t.item_stock_map;
                        },
                        close_item_details: function () {
                            t.item_details.toggle_item_details_section(void 0), (t.cart.prev_action = void 0), t.cart.toggle_item_highlight();
                        },
                        get_available_stock: function (e, i) {
                            return t.get_available_stock(e, i);
                        },
                    },
                });
            }
            init_combo_item_details() {
                var t = this;
                this.combo_item_details = new erpnext.PointOfSale.ComboItemDetails({
                    wrapper: this.$components_wrapper,
                    settings: this.settings,
                    events: {
                        item_selected: function (e) {
                            return t.on_cart_update(e);
                        },
                        get_frm: function () {
                            return t.frm;
                        },
                        toggle_combo_item_selector: function (e) {
                            t.item_selector.resize_selector(e), t.cart.toggle_checkout_btn(!1), t.cart.$totals_section.find(".edit-cart-btn").css("display", "none");
                        },
                        remove_item_from_cart: function () {
                            return t.remove_item_from_cart();
                        },
                        combo_numpad_event: function () {
                            return t.update_combo_item_field();
                        },
                        close_combo_item_details: function () {
                            t.combo_item_details.toggle_combo_item_details_section(void 0), (t.cart.prev_action = void 0), t.cart.toggle_item_highlight(), t.cart.toggle_checkout_btn(!0);
                        },
                    },
                });
            }
            init_payments() {
                var t = this;
                this.payment = new erpnext.PointOfSale.Payment({
                    wrapper: this.$components_wrapper,
                    events: {
                        get_frm: function () {
                            return t.frm || {};
                        },
                        item_selected: function (e) {
                            return t.on_cart_update(e);
                        },
                        get_customer_details: function () {
                            return t.customer_details || {};
                        },
                        toggle_other_sections: function (e) {
                            e ? (t.item_details.$component.is(":visible") && t.item_details.$component.css("display", "none"), t.item_selector.$component.css("display", "none")) : t.item_selector.$component.css("display", "flex");
                        },
                        submit_invoice: function () {
                            try {
                                t.update_Item(),
                                    t.frm.savesubmit().then(function (e) {
                                        t.toggle_components(!1),
                                            t.order_summary.toggle_component(!0),
                                            t.order_summary.load_summary_of(t.frm.doc, !0),
                                            frappe.show_alert({ indicator: "green", message: __("POS invoice {0} created succesfully", [e.doc.name]) }),
                                            t.update_POS();
                                    });
                            } catch (t) {
                                frappe.show_alert({ indicator: "red", message: __(t) });
                            }
                        },
                    },
                });
            }
            init_recent_order_list() {
                var t = this;
                this.recent_order_list = new erpnext.PointOfSale.PastOrderList({
                    wrapper: this.$components_wrapper,
                    events: {
                        open_invoice_data: function (e) {
                            frappe.db.get_doc("POS Invoice", e).then(function (e) {
                                t.order_summary.load_summary_of(e);
                            });
                        },
                        reset_summary: function () {
                            return t.order_summary.toggle_summary_placeholder(!0);
                        },
                        get_frm: function () {
                            return t.frm || {};
                        },
                    },
                });
            }
            init_order_summary() {
                var t = this;
                this.order_summary = new erpnext.PointOfSale.PastOrderSummary({
                    wrapper: this.$components_wrapper,
                    events: {
                        get_frm: function () {
                            return t.frm;
                        },
                        process_return: function (e) {
                            t.recent_order_list.toggle_component(!1),
                                frappe.db.get_doc("POS Invoice", e).then(function (e) {
                                    frappe.run_serially([
                                        function () {
                                            return t.make_return_invoice(e);
                                        },
                                        function () {
                                            return t.cart.load_invoice();
                                        },
                                        function () {
                                            return t.item_selector.toggle_component(!0);
                                        },
                                    ]);
                                });
                        },
                        edit_order: function (e) {
                            t.recent_order_list.toggle_component(!1),
                                frappe.run_serially([
                                    function () {
                                        return t.frm.refresh(e);
                                    },
                                    function () {
                                        return t.frm.call("reset_mode_of_payments");
                                    },
                                    function () {
                                        return t.cart.load_invoice();
                                    },
                                    function () {
                                        return t.item_selector.toggle_component(!0);
                                    },
                                ]);
                        },
                        delete_order: function (e) {
                            frappe.model.delete_doc(t.frm.doc.doctype, e, function () {
                                t.recent_order_list.refresh_list();
                            });
                        },
                        new_order: function () {
                            frappe.run_serially([
                                function () {
                                    return frappe.dom.freeze();
                                },
                                function () {
                                    return t.make_new_invoice();
                                },
                                function () {
                                    return t.item_selector.toggle_component(!0);
                                },
                                function () {
                                    return frappe.dom.unfreeze();
                                },
                            ]);
                        },
                    },
                });
            }
            toggle_recent_order_list(t) {
                this.toggle_components(!t), this.recent_order_list.toggle_component(t), this.order_summary.toggle_component(t);
            }
            toggle_components(t) {
                this.cart.toggle_component(t), this.item_selector.toggle_component(t), !t && (this.item_details.toggle_component(!1) || this.payment.toggle_component(!1));
            }
            make_new_invoice() {
                var t = this;
                return frappe.run_serially([
                    function () {
                        return frappe.dom.freeze();
                    },
                    function () {
                        return t.make_sales_invoice_frm();
                    },
                    function () {
                        return t.set_pos_profile_data();
                    },
                    function () {
                        return t.set_pos_profile_status();
                    },
                    function () {
                        return t.cart.load_invoice();
                    },
                    function () {
                        return frappe.dom.unfreeze();
                    },
                ]);
            }
            make_sales_invoice_frm() {
                var t = this;
                return new Promise(function (e) {
                    t.frm
                        ? ((t.frm = t.get_new_frm(t.frm)), (t.frm.doc.items = []), (t.frm.doc.is_pos = 1), e())
                        : frappe.model.with_doctype("POS Invoice", function () {
                              (t.frm = t.get_new_frm()), (t.frm.doc.items = []), (t.frm.doc.is_pos = 1), e();
                          });
                });
            }
            get_new_frm(t) {
                var e = $("<div>"),
                    i = t || new frappe.ui.form.Form("POS Invoice", e, !1),
                    a = frappe.model.make_new_doc_and_get_name("POS Invoice", !0);
                return i.refresh(a), i;
            }
            async make_return_invoice(t) {
                frappe.dom.freeze(), (this.frm = this.get_new_frm(this.frm)), (this.frm.doc.items = []);
                var e = await frappe.call({ method: "erpnext.accounts.doctype.pos_invoice.pos_invoice.make_sales_return", args: { source_name: t.name, target_doc: this.frm.doc } });
                frappe.model.sync(e.message), await this.set_pos_profile_data(), frappe.dom.unfreeze();
            }
            set_pos_profile_data() {
                if ((this.company && !this.frm.doc.company && (this.frm.doc.company = this.company), this.pos_profile && !this.frm.doc.pos_profile && (this.frm.doc.pos_profile = this.pos_profile), this.frm.doc.company))
                    return this.frm.trigger("set_pos_data");
            }
            set_pos_profile_status() {
                this.page.set_indicator(this.pos_profile, "blue");
            }
            async on_cart_update_from_so(t) {
                frappe.dom.freeze();
                var e = void 0;
                try {
                    var i = t.field,
                        a = t.value,
                        n = t.item,
                        o = n.item_code,
                        s = n.batch_no,
                        r = n.serial_no,
                        c = n.stock_uom,
                        d = n.rate,
                        _ = n.conversion_factor,
                        l = n.uom;
                    e = this.get_item_from_frm(o, s, l);
                    var m = "qty" === i && "+1" === a;
                    if (e) {
                        if ((m && (a = e.qty + flt(a)), "qty" === i && (a = flt(a)), ["qty", "conversion_factor"].includes(i) && a > 0 && !this.allow_negative_stock)) {
                            var p = "qty" === i ? a * e.conversion_factor : e.qty * a;
                            await this.check_stock_availability(e, p, this.frm.doc.set_warehouse);
                        }
                        (this.is_current_item_being_edited(e) || m) && (await frappe.model.set_value(e.doctype, e.name, i, a), this.update_cart_html(e));
                    } else {
                        if (!this.frm.doc.customer) return frappe.dom.unfreeze(), frappe.show_alert({ message: __("You must select a customer before adding an item."), indicator: "orange" }), void frappe.utils.play_sound("error");
                        if (!o) return;
                        m && (a = flt(a));
                        var u = { item_code: o, batch_no: s, uom: l, stock_uom: c, rate: d, conversion_factor: _ };
                        if (
                            ((u[i] = a),
                            r && (await this.check_serial_no_availablilty(o, this.frm.doc.set_warehouse, r), (u.serial_no = r)),
                            "serial_no" === i && (u.qty = a.split("\n").length || 0),
                            (e = this.frm.add_child("items", u)),
                            "qty" !== i || 0 === a || this.allow_negative_stock || (await this.check_stock_availability(e, a, this.frm.doc.set_warehouse)),
                            await this.trigger_new_item_events_so(e, d, l),
                            this.check_serial_batch_selection_needed(e) && this.edit_item_details_of(e),
                            l != e.uom)
                        ) {
                            var f = {},
                                h = s ? "batch_no" : "item_code",
                                v = s || o;
                            this.frm.doc.items.find(function (t) {
                                return t[h] === v && t.uom === e.uom;
                            });
                            (f.item_code = o),
                                (f.batch_no = s),
                                (f.uom = l),
                                (f.sales_order = cur_pos.cart.location_so_field.value),
                                (cur_pos.item_details.current_item = f),
                                await frappe.model.set_value(e.doctype, e.name, "stock_uom", l),
                                await frappe.model.set_value(e.doctype, e.name, "sales_order", cur_pos.cart.location_so_field.value),
                                await frappe.model.set_value(e.doctype, e.name, "uom", l),
                                await frappe.model.set_value(e.doctype, e.name, "conversion_factor", _),
                                await frappe.model.set_value(e.doctype, e.name, "rate", d),
                                cur_frm.refresh_field("items");
                            var g = this.get_item_from_frm(o, s, l);
                            this.update_cart_html(g);
                        } else this.update_cart_html(e);
                    }
                } catch (t) {
                    console.log(t);
                } finally {
                    return frappe.dom.unfreeze(), e;
                }
            }
            async on_bundle_cart_update(t) {
                frappe.dom.freeze();
                var e = void 0;
                try {
                    t.field, t.value;
                    var i = t.item,
                        a = i.item_code,
                        n = i.batch_no,
                        o = (i.serial_no, i.uom),
                        s = i.rate;
                    (e = this.get_item_from_frm(a, n, o)), console.log(s, "$$$$$$$$"), e ? this.cart.events.cart_combo_item_clicked(a, n, o, s, t) : this.on_cart_update(t);
                } catch (t) {
                    console.log(t);
                } finally {
                    return frappe.dom.unfreeze(), e;
                }
            }
            async on_cart_update(t) {
                frappe.dom.freeze();
                var e = void 0;
                try {
                    var i = t.field,
                        a = t.value,
                        n = t.item,
                        o = n.item_code,
                        s = n.batch_no,
                        r = n.serial_no,
                        c = n.uom,
                        d = n.rate;
                    e = this.get_item_from_frm(o, s, c);
                    var _ = "qty" === i && "+1" === a;
                    if (e && e.rate == d) {
                        if ((console.log(e.rate, "222222222222222", d, e.is_free_item), !e.is_free_item)) {
                            if ((_ && (a = e.qty + flt(a)), "qty" === i && (a = flt(a)), ["qty", "conversion_factor"].includes(i) && a > 0 && !this.allow_negative_stock)) {
                                var l = "qty" === i ? a * e.conversion_factor : e.qty * a;
                                await this.check_stock_availability(e, l, this.frm.doc.set_warehouse);
                            }
                            cur_pos.item_selector.bundle_item &&
                                "" != cur_pos.item_selector.bundle_item &&
                                "null" != cur_pos.item_selector.bundle_item &&
                                "undefined" != cur_pos.item_selector.bundle_item &&
                                0 != cur_pos.item_selector.bundle_item &&
                                ((cur_pos.combo_item_details.total_packed_qty = a),
                                (this.combo_item_details.current_item = e),
                                (this.item_details.current_item = e),
                                (cur_pos.combo_item_details.combo_items = []),
                                this.edit_combo_item_details_of(e)),
                                (this.is_current_item_being_edited(e) || _ || this.is_current_combo_item_being_edited(e)) && (await frappe.model.set_value(e.doctype, e.name, i, a), this.update_cart_html(e));
                        }
                    } else {
                        if (!this.frm.doc.customer) return frappe.dom.unfreeze(), frappe.show_alert({ message: __("You must select a customer before adding an item."), indicator: "orange" }), void frappe.utils.play_sound("error");
                        if (!o) return;
                        _ && (a = flt(a));
                        var m = { item_code: o, batch_no: s };
                        (m[i] = a),
                            r && (await this.check_serial_no_availablilty(o, this.frm.doc.set_warehouse, r), (m.serial_no = r)),
                            "serial_no" === i && (m.qty = a.split("\n").length || 0),
                            (e = this.frm.add_child("items", m)),
                            "qty" !== i || 0 === a || this.allow_negative_stock || (await this.check_stock_availability(e, a, this.frm.doc.set_warehouse)),
                            await this.trigger_new_item_events(e),
                            this.check_serial_batch_selection_needed(e) && this.edit_item_details_of(e),
                            cur_pos.item_selector.bundle_item &&
                                "" != cur_pos.item_selector.bundle_item &&
                                "null" != cur_pos.item_selector.bundle_item &&
                                "undefined" != cur_pos.item_selector.bundle_item &&
                                0 != cur_pos.item_selector.bundle_item &&
                                ((this.combo_item_details.current_item = e),
                                (this.item_details.current_item = e),
                                (cur_pos.combo_item_details.total_packed_qty = e.qty),
                                (cur_pos.combo_item_details.combo_items = []),
                                (cur_pos.combo_item_details.combo_default_items = []),
                                this.edit_combo_item_details_of(e)),
                            this.update_cart_html(e);
                    }
                } catch (t) {
                    console.log(t);
                } finally {
                    return frappe.dom.unfreeze(), e;
                }
            }
            async on_cart_update_desc(t) {
                var e = void 0;
                try {
                    var i = t.field,
                        a = t.value,
                        n = t.item,
                        o = n.item_code,
                        s = n.batch_no,
                        r = (n.serial_no, n.uom);
                    n.rate;
                    e = this.get_item_from_frm(o, s, r);
                    var c = "qty" === i && "-1" === a;
                    if (e && !e.is_free_item) {
                        if ((c && (a = e.qty + flt(a)), "qty" === i && (a = flt(a)), ["qty", "conversion_factor"].includes(i) && a > 0 && !this.allow_negative_stock)) {
                            var d = "qty" === i ? a * e.conversion_factor : e.qty * a;
                            await this.check_stock_availability(e, d, this.frm.doc.set_warehouse);
                        }
                        (this.is_current_item_being_edited(e) || c) && (await frappe.model.set_value(e.doctype, e.name, i, a), this.update_cart_html(e));
                    }
                } catch (t) {
                    console.log(t);
                } finally {
                    return frappe.dom.unfreeze(), e;
                }
            }
            async on_cart_update_uom(t) {
                var e = void 0;
                try {
                    var i = t.field,
                        a = t.value,
                        n = t.item,
                        o = n.item_code,
                        s = n.batch_no,
                        r = (n.serial_no, n.uom);
                    e = this.get_item_from_frm(o, s, r);
                    var c = "qty" === i && "-1" === a;
                    if (e) {
                        if ((c && (a = e.qty + flt(a)), "uom" === i && (a = flt(a)), ["qty", "conversion_factor"].includes(i) && a > 0 && !this.allow_negative_stock)) {
                            var d = "qty" === i ? a * e.conversion_factor : e.qty * a;
                            await this.check_stock_availability(e, d, this.frm.doc.set_warehouse);
                        }
                        (this.is_current_item_being_edited(e) || c) && (await frappe.model.set_value(e.doctype, e.name, i, a), this.update_cart_html(e));
                    }
                } catch (t) {
                    console.log(t);
                } finally {
                    return frappe.dom.unfreeze(), e;
                }
            }
            get_item_from_frm(t, e, i) {
                var a = e;
                return this.frm.doc.items.find(function (n) {
                    return n.item_code === t && (!a || (a && n.batch_no === e)) && n.uom === i && 0 === n.is_free_item;
                });
            }
            get_combo_item_from_frm(t, e) {
                return this.frm.doc.seleceted_packed_items.find(function (i) {
                    return i.item_code === t && i.parent_item === e;
                });
            }
            edit_item_details_of(t) {
                this.item_details.toggle_item_details_section(t);
            }
            edit_combo_item_details_of(t) {
                this.combo_item_details.toggle_combo_item_details_section(t);
            }
            is_current_item_being_edited(t) {
                var e = this.item_details.current_item,
                    i = e.item_code,
                    a = e.batch_no;
                return i === t.item_code && a == t.batch_no;
            }
            is_current_combo_item_being_edited(t) {
                var e = this.combo_item_details.current_item,
                    i = e.item_code,
                    a = e.batch_no;
                return i === t.item_code && a == t.batch_no;
            }
            update_cart_html(t, e) {
                this.cart.update_item_html(t, e), this.cart.update_totals_section(this.frm);
            }
            update_cart_html_uom(t, e, i) {
                this.cart.update_item_html(t, remove_item), this.cart.update_totals_section(this.frm);
            }
            check_serial_batch_selection_needed(t) {
                var e = t.has_serial_no,
                    i = t.has_batch_no,
                    a = !t.serial_no,
                    n = !t.batch_no;
                return !!((e && a) || (i && n) || (e && i && (n || a)));
            }
            async trigger_new_item_events(t) {
                await this.frm.script_manager.trigger("item_code", t.doctype, t.name),
                    await this.frm.script_manager.trigger("qty", t.doctype, t.name),
                    (await frappe.db.get_value("Product Bundle", { new_item_code: t.item_code }, "name")).message.name && (await frappe.model.set_value(t.doctype, t.name, "bundle_item", 1));
            }
            async trigger_new_item_events_so(t, e, i) {
                await this.frm.script_manager.trigger("item_code", t.doctype, t.name),
                    await this.frm.script_manager.trigger("qty", t.doctype, t.name),
                    await frappe.model.set_value(t.doctype, t.name, "stock_uom", i),
                    await frappe.model.set_value(t.doctype, t.name, "uom", i),
                    await frappe.model.set_value(t.doctype, t.name, "rate", e),
                    (await frappe.db.get_value("Product Bundle", { new_item_code: t.item_code }, "name")).message.name && (await frappe.model.set_value(t.doctype, t.name, "bundle_item", 1));
            }
            async check_stock_availability(t, e, i) {
                var a = (await this.get_available_stock(t.item_code, i)).message;
                frappe.dom.unfreeze();
                var n = t.item_code.bold(),
                    o = i.bold(),
                    s = a.toString().bold();
                a > 0
                    ? a < e && (frappe.show_alert({ message: __("Stock quantity not enough for Item Code: {0} under warehouse {1}. Available quantity {2}.", [n, o, s]), indicator: "orange" }), frappe.utils.play_sound("error"))
                    : 1 == (await frappe.db.get_value("Item", t.item_code, "is_stock_item")).message.is_stock_item &&
                      (frappe.model.clear_doc(t.doctype, t.name), frappe.throw({ title: __("Not Available"), message: __("Item Code: {0} is not available under warehouse {1}.", [n, o]) }));
                frappe.dom.freeze();
            }
            async check_serial_no_availablilty(t, e, i) {
                var a = { filters: { item_code: t, warehouse: e } };
                (await frappe.call({ method: "erpnext.stock.doctype.serial_no.serial_no.get_pos_reserved_serial_nos", args: a })).message.includes(i) &&
                    frappe.throw({ title: __("Not Available"), message: __("Serial No: {0} has already been transacted into another POS Invoice.", [i.bold()]) });
            }
            get_available_stock(t, e) {
                var i = this;
                return frappe.call({
                    method: "erpnext.accounts.doctype.pos_invoice.pos_invoice.get_stock_availability",
                    args: { item_code: t, warehouse: e },
                    callback: function (a) {
                        i.item_stock_map[t] || (i.item_stock_map[t] = {}), (i.item_stock_map[t][e] = a.message);
                    },
                });
            }
            update_item_field(t, e) {
                if ("checkout" === e) this.item_details.toggle_item_details_section(void 0);
                else if ("remove" === e) console.log("remove_item_from_cartELSE"), this.remove_item_from_cart();
                else {
                    var i = this.item_details[e + "_control"];
                    if (!i) return;
                    i.set_focus(), "" != t && i.set_value(t);
                }
            }
            update_combo_item_field() {
                this.remove_item_from_combo_cart();
            }
            remove_item_from_combo_cart() {
                var t = this,
                    e = this.combo_item_details,
                    i = e.doctype,
                    a = e.name,
                    n = e.current_item,
                    o = "".combodoctype,
                    s = "".comboname;
                frappe.model
                    .set_value(i, a, "qty", 0)
                    .then(function () {
                        frappe.model.clear_doc(i, a),
                            t.update_cart_html(n, !0),
                            t.item_details.toggle_item_details_section(void 0),
                            cur_frm.doc.seleceted_packed_items.forEach(function (t) {
                                (o = "Selected Packed Items"), (s = t.name), String(t.parent_item) == String(n.item_code) && frappe.model.set_value(o, s, "packed_quantity", 0);
                            }),
                            frappe.dom.unfreeze();
                    })
                    .catch(function (t) {
                        return console.log(t);
                    });
            }
            remove_item_from_cart() {
                var t = this;
                frappe.dom.freeze();
                var e = this.item_details,
                    i = e.doctype,
                    a = e.name,
                    n = e.current_item;
                frappe.model
                    .set_value(i, a, "qty", 0)
                    .then(function () {
                        frappe.model.clear_doc(i, a), t.update_cart_html(n, !0), t.item_details.toggle_item_details_section(void 0), frappe.dom.unfreeze();
                    })
                    .catch(function (t) {
                        return console.log(t);
                    });
            }
            create_event_booking() {
                if (!cur_pos.cart.location_so_field.value && cur_pos.cart.location_event_field.value && cur_pos.cart.location_event_slot_field.value) {
                    frappe.call({
                        method: "ecs_vim.doctype_triggers.point_of_sale.point_of_sale.create_event_booking",
                        freeze: !0,
                        args: {
                            pos_invoice: cur_frm.doc.name,
                            event: cur_pos.cart.location_event_field.value,
                            posting_date: cur_frm.doc.posting_date,
                            slot: cur_pos.cart.location_event_slot_field.value,
                            brand: cur_pos.cart.location_brand_field.value,
                            city: cur_pos.cart.location_city_field.value,
                            branch: cur_pos.cart.location_branch_field.value,
                            department: cur_pos.cart.location_department_field.value,
                        },
                    });
                }
            }
            update_Item() {
                cur_frm.doc.items.forEach(function (t) {
                    frappe.call({ method: "ecs_vim.doctype_triggers.point_of_sale.point_of_sale.update_Item", freeze: !0, args: { event: t.item_code } });
                });
            }
            update_POS_Item() {
                if (!cur_pos.cart.location_so_field.value && cur_pos.cart.location_event_field.value) {
                    frappe.call({
                        method: "ecs_vim.doctype_triggers.point_of_sale.point_of_sale.update_POS_Item",
                        freeze: !0,
                        args: { pos_invoice: cur_frm.doc.name, event: cur_pos.cart.location_event_field.value, slot: cur_pos.cart.location_event_slot_field.value },
                    });
                }
            }
            update_POS() {
                if (cur_pos.cart.location_so_field.value)
                    return frappe.call({ async: !1, method: "ecs_vim.doctype_triggers.point_of_sale.point_of_sale.update_accounting_dimension", args: { sales_order: cur_pos.cart.location_so_field.value, pos_invoice: cur_frm.doc.name } });
            }
        }),
        (erpnext.PointOfSale.ComboItemDetails = class {
            constructor(t) {
                var e = t.wrapper,
                    i = t.events;
                t.settings;
                (this.wrapper = e), (this.events = i), (this.current_item = {}), this.init_component(), (this.total_packed_qty = 0), (this.combo_items = []), (this.set_items = []), (this.combo_default_items = []);
            }
            init_component() {
                this.prepare_dom(), (this.combo_items = []), (this.combo_default_items = []), (this.set_items = []), this.init_child_components(), this.bind_events(), this.toggle_component(!1);
            }
            prepare_dom() {
                this.wrapper.append('<section class="combo-item-details-container" style="width: 600px; overflow-y: scroll;" >            \n            </section>'), (this.$component = this.wrapper.find(".combo-item-details-container"));
            }
            init_child_components() {
                this.$component.html(
                    '<div class="combo-item-details-header">\n\t\t\t\t\n\t\t\t\t<div class="combo-close-btn" style=" text-align:right;">\n\t\t\t\t\t<svg width="32" height="32" viewBox="0 0 14 14" fill="none">\n\t\t\t\t\t\t<path d="M4.93764 4.93759L7.00003 6.99998M9.06243 9.06238L7.00003 6.99998M7.00003 6.99998L4.93764 9.06238L9.06243 4.93759" stroke="#8D99A6"/>\n\t\t\t\t\t</svg>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class="row col-md-12 total-qty"  >\n\t\t\t\t<div class="  col-md-3 label text-center" style="font-weight: bolder;">Total Qty</div>\n\t\t\t\t<div class=" col-md-5">\n                <span class="input-group-append d-sm-inline-block">\n            <button class="btn tot-btn" data-dir="inc" onclick="updatetotalQty(this)" >\n             +\n            </button>\n            </span>\n\t\t\t\t<input class="form-control text-center combo-total-qty" style="font-weight: bolder;width: 50px;display: inline; !important " value=' +
                        (this.total_packed_qty ? this.total_packed_qty : 0) +
                        '   onclick="changetotqty(this)">\n\t\t\t\t<span class="input-group-append d-sm-inline-block">\n            <button class="btn tot-btn" data-dir="dec" onclick="updatetotalQty(this)" \n            >\n                -\n            </button>\n            </span>\n                </div><div class="col-md-4 btn combo-item-rm-btn"  style="color: red;font-weight: bold">Remove from cart</div></div>\n\t\t\t\t\n\t\t\t\t<div class="col-md-12 combo-defalt-items-container" style=" align-self: flex-end;\n\t\t\t\tdisplay: grid;\n\t\t\t\t ">\n\t\t\t\t\n\t\t\t</div>\n\t\t\t<div class="col-md-12 combo-items-container" style=" align-self: flex-end;\n\t\t\tdisplay: grid;\n\t\t\t">\n\t\t\t\t\n\t\t\t</div>\n            <div  class="col-md-12  row" style="margin-left: 0px;"> <div ></div>\n            <div class="col-md-12 btn combo-item-ok-btn"   style="font-weight: bold;text-align: right;background-color: var(--blue-500);\n            color: rgb(255, 255, 255);\n            ">OK</div><div ></div></div>\n            <script>\n            function updatetotalQty(elmnt) {\n    \n                var btn = $(elmnt),\n                        input = btn.closest(\'.total-qty\').find(\'input\'),\n                        oldValue = input.val().trim(),\n                        newVal = 0;\n                    if (btn.attr(\'data-dir\') == \'inc\') {\n                        newVal = parseInt(oldValue) + 1;\n                    }\n                    else\n                    {\n                        if (oldValue >= 1) {\n                            newVal = parseInt(oldValue) - 1;\n                        }\n                    }\n                    input.val(newVal);\n            \n            }\n            </script>\n            '
                ),
                    (this.$items_container = this.$component.find(".combo-items-container")),
                    (this.$default_items_container = this.$component.find(".combo-defalt-items-container"));
            }
            init_numpad_components() {
                this.$component.append('<div class="combo-numpad-section"></div>'), this.make_combo_numpad();
            }
            toggle_combo_item_details_section(t) {
                var e = this.current_item,
                    i = e.item_code,
                    a = e.batch_no,
                    n = e.uom;
                e.rate;
                this.total_packed_qty = cur_pos.combo_item_details.current_item.qty;
                var o = t && i === t.item_code,
                    s = t && a == t.batch_no,
                    r = t && n === t.uom;
                (this.item_has_changed = !!t && !(o && s && r)),
                    (this.item_has_changed = !!t),
                    this.events.toggle_combo_item_selector(this.item_has_changed),
                    this.toggle_component(this.item_has_changed),
                    this.item_has_changed &&
                        ((this.doctype = t.doctype),
                        (this.item_meta = frappe.get_meta(this.doctype)),
                        (this.name = t.name),
                        (this.item_row = t),
                        (this.currency = this.events.get_frm().doc.currency),
                        (this.current_item = { item_code: t.item_code, batch_no: t.batch_no, uom: t.uom, rate: t.rate }),
                        this.load_combo_items_data(t.item_code, t.qty));
            }
            toggle_component(t) {
                t ? this.$component.css("display", "block") : this.$component.css("display", "none");
            }
            check_set_total() {
                var t = [];
                return (
                    this.set_items.forEach(function (e) {
                        var i = cur_pos.combo_item_details.combo_items.filter(function (t) {
                                return parseInt(t.set_no) === parseInt(e.set_no);
                            }),
                            a = 0;
                        if (i) for (var n = 0; n < i.length; n++) a += Math.abs(i[n].packed_quantity);
                        var o = {};
                        (o.set_no = e.set_no),
                            (o.set_total = a),
                            0 ==
                                t.filter(function (t) {
                                    return parseInt(t.set_no) === parseInt(e.set_no);
                                }).length && t.push(o);
                    }),
                    t
                );
            }
            bind_events() {
                var t = this,
                    e = this;
                this.$component.on("click", ".combo-close-btn,.combo-item-ok-btn", function () {
                    e.total_packed_qty = $(".combo-total-qty").val();
                    var i = e.current_item,
                        a = i.item_code,
                        n = i.batch_no,
                        o = i.serial_no,
                        s = i.uom,
                        r = i.rate,
                        c = 1;
                    cur_pos.get_item_from_frm(a, n, s),
                        0 == t.combo_default_items.length && t.set_items.length > 0 && 0 == cur_pos.combo_item_details.combo_items.length && frappe.throw("Select Set Item"),
                        e.check_set_total().forEach(function (t) {
                            console.log("item", t)
                            console.log("e.total_packed_qty", e.total_packed_qty)
                            // t.set_total != e.total_packed_qty && frappe.throw("Total Set Quantity must be Total Cart Quantity");
                        }),
                        0 !=
                            cur_pos.combo_item_details.combo_items.reduce(function (t, e) {
                                return t + e.x;
                            }, 0) || t.combo_default_items.length > 0
                            ? (cur_pos.combo_item_details.combo_items.forEach(function (t) {
                                  var i = cur_pos.combo_item_details.combo_items.filter(function (e) {
                                          if (e.set_no == t.set_no) return e;
                                      }),
                                      a =
                                          0 != t.set_no
                                              ? i.reduce(function (t, e) {
                                                    return t + Math.abs(e.packed_quantity);
                                                }, 0)
                                              : 0;
                                  parseInt(Math.abs(a)) > parseInt(Math.abs(e.total_packed_qty)) ? frappe.throw("Set Quantity Exceeds Total Quantity") : (c = 1);
                                  for (
                                      var n = cur_pos.combo_item_details.combo_items.filter(function (e) {
                                              return parseInt(e.set_no) === parseInt(t.set_no);
                                          }),
                                          o = 0,
                                          s = 0;
                                      s < n.length;
                                      s++
                                  )
                                      o += Math.abs(n[s].packed_quantity);
                                  0 != t.set_no && !cur_frm.doc.is_return && parseInt(Math.abs(o)) < parseInt(Math.abs(e.total_packed_qty)) && frappe.throw("Set quantity must be total quantity");
                              }),
                              1 == c
                                  ? (e.update_selected_pack_item(),
                                    e.events.item_selected({ field: "qty", value: flt(e.total_packed_qty), item: { item_code: a, batch_no: n, serial_no: o, uom: s, rate: r } }).then(function () {
                                        flt(e.total_packed_qty);
                                        setTimeout(function () {
                                            cur_pos.cart.make_no_items_placeholder(),
                                                cur_frm.doc.items.forEach(function (t) {
                                                    cur_pos.cart.update_item_html(t);
                                                }),
                                                e.events.close_combo_item_details();
                                        }, 900);
                                    }))
                                  : frappe.throw("Set Quantity Exceeds Total Quantity"))
                            : e.events.item_selected({ field: "qty", value: 0, item: { item_code: a, batch_no: n, serial_no: o, uom: s } }).then(function () {
                                  setTimeout(function () {
                                      cur_pos.cart.make_no_items_placeholder(),
                                          cur_frm.doc.items.forEach(function (t) {
                                              cur_pos.cart.update_item_html(t);
                                          }),
                                          e.events.close_combo_item_details();
                                  }, 900);
                              });
                }),
                    this.$component.on("click", ".combo-item-rm-btn", function () {
                        e.events.combo_numpad_event(), e.events.close_combo_item_details();
                    });
            }
            update_selected_pack_item() {
                var t = this.events.get_frm();
                cur_frm.doc.__islocal,
                    this.combo_default_items.forEach(function (t) {
                        var e = 0;
                        if (
                            (cur_pos.combo_item_details.combo_items.forEach(function (i) {
                                t.item_code == i.item_code && t.parent_item == i.parent_item && (e = 1);
                            }),
                            0 == e)
                        ) {
                            var i = {};
                            (i.item_code = t.item_code),
                                (i.parent_item = cur_pos.combo_item_details.current_item.item_code),
                                (i.packed_quantity = $(".combo-total-qty").val()),
                                (i.set_no = t.set_no),
                                (i.combo_qty = t.qty),
                                (i.default_item_in_pos = 1),
                                cur_pos.combo_item_details.combo_items.push(i);
                        }
                    }),
                    cur_pos.combo_item_details.combo_items.forEach(function (e) {
                        var i = 0;
                        if (
                            (t.doc.seleceted_packed_items.forEach(function (t) {
                                if (e.item_code == t.item_code && e.parent_item == t.parent_item) {
                                    i = 1;
                                    var a;
                                    (a = cur_pos.get_combo_item_from_frm(t.item_code, t.parent_item)), frappe.model.set_value(a.doctype, a.name, "packed_quantity", e.packed_quantity), cur_frm.refresh_field("seleceted_packed_items");
                                }
                            }),
                            0 == i)
                        ) {
                            var a = cur_frm.add_child("seleceted_packed_items");
                            frappe.model.set_value(a.doctype, a.name, "parent_item", e.parent_item),
                                frappe.model.set_value(a.doctype, a.name, "item_code", e.item_code),
                                frappe.model.set_value(a.doctype, a.name, "set_no", e.set_no),
                                frappe.model.set_value(a.doctype, a.name, "combo_qty", e.combo_qty),
                                frappe.model.set_value(a.doctype, a.name, "packed_quantity", e.packed_quantity),
                                frappe.model.set_value(a.doctype, a.name, "default_item", e.default_item_in_pos),
                                cur_frm.refresh_field("seleceted_packed_items");
                        }
                    }),
                    cur_frm.doc.__islocal;
            }
            async load_combo_items_data(t, e) {
                var i = this;
                $(".combo-total-qty").val(e),
                    this.get_items(t).then(function (t) {
                        var a = t.message;
                        cur_pos.combo_item_details.combo_items.forEach(function (t) {
                            a.ditems.forEach(function (e) {
                                e.item_code == t.item_code && (e.packed_quantity = t.packed_quantity);
                            });
                        }),
                            cur_pos.combo_item_details.combo_items.forEach(function (t) {
                                a.items.forEach(function (e) {
                                    e.item_code == t.item_code && (e.packed_quantity = t.packed_quantity);
                                });
                            }),
                            (i.combo_default_items = a.ditems),
                            (i.set_items = a.items),
                            i.render_item_list(a.items, a.sets, e, a.ditems);
                    });
            }
            get_items(t) {
                if (t) return frappe.call({ method: "ecs_vim.doctype_triggers.point_of_sale.point_of_sale.get_combo_items", freeze: !0, args: { item: t } });
            }
            render_item_list(t, e, i, a) {
                var n = this;
                this.$items_container.html("");
                var o = "",
                    s = "";
                this.$default_items_container.html(""),
                    (s =
                        '<div class="combo-defautl-item-wrapper" style="font-size: 12px;\n\t\tpadding: 0.3rem;\n\t\tbox-shadow: var(--shadow-base); position: relative; font-weight: bolder;background-color: rgba(7, 153, 163, 0.74); text-align: center;color:white;" >Default Items\n\t\t<table class="table mt-3 cart-table" style="margin:0px;margin-bottom:0px;margin-top: 0px!important;">\n    \n\t\t<tbody><tr style="background-color:white!important;display: grid;\n        grid-template-columns: repeat(5, minmax(0px, 1fr));">'),
                    a.forEach(function (t) {
                        s +=
                            '<td style="width: 40%;padding: 0.55rem;font-weight: normal;"><div class="row col-md-12">\n\t\t<div  class="ditem-detail" data-item-code="' +
                            escape(t.item_code) +
                            '" data-qty="' +
                            escape(t.qty) +
                            '"\n\t\tdata-description="' +
                            escape(t.description) +
                            '" data-set-no="' +
                            escape(t.set_no) +
                            '"\n >\t\t<div><img class="h-full" src="' +
                            t.item_image +
                            '"  style="object-fit: cover;height: 40px;"></div><div>' +
                            frappe.ellipsis(t.item_code, 18) +
                            "</div></div>\n\t\t\t\t</div></td>";
                    }),
                    (s += "</tr></tbody></table></div>"),
                    this.$default_items_container.html(s),
                    e.forEach(function (e) {
                        (o = n.get_combo_item_html(e, t, i)), n.$items_container.append(o);
                    });
            }
            get_combo_item_html(t, e, i) {
                var a = 0,
                    n =
                        '<div class="combo-item-wrapper" style="font-size: 12px;\n\t\tpadding: 0.3rem;\n\t\tbox-shadow: var(--shadow-base); position: relative; font-weight: bolder;background-color: rgba(7, 153, 163, 0.74); text-align: center;color:white;">\n\tSet: ' +
                        t.set_no +
                        '\n\t<table class="table mt-3 cart-table" style="margin:0px;margin-bottom:0px;margin-top: 0px!important;">\n    \n    <tbody class="cart-items" >';
                return (
                    e.forEach(function (e) {
                        t.set_no == e.set_no &&
                            ((n +=
                                '<tr style="background-color:white!important;"><td style="padding: 0.55rem;width: 10%;"><div class="d-flex"><div class="item-detail" data-item-code="' +
                                escape(e.item_code) +
                                '" data-qty="' +
                                escape(e.qty) +
                                '"\n\t\t\t   data-description="' +
                                escape(e.description) +
                                '" data-set-no="' +
                                escape(e.set_no) +
                                '"\n\t\t\t    ><div><img class="h-full" src="' +
                                e.item_image +
                                '"  style="object-fit: cover;height: 40px;"></div></div></div>\n\t\t\t   </td>\n\t\t\t   <td  style="width: 60%;\n\t\t\t   text-align: left;word-break: break-word;"> <div>\n\t\t\t   ' +
                                e.item_code +
                                '</div></td>\n\t\t\t   <td class="text-right" style="padding: 0.55rem;"width: 30%;" >\n<div class="d-flex">\n\n<div class="input-group number-spinner mt-1 mb-4" style="margin-bottom: 3.5px!important;" >\n<span class="input-group-append d-sm-inline-block">\n<button class="btn cart-btn" data-dir="up" style="padding:var(--padding-xs) var(--padding-sm);" onclick="updateQty(this)" data-item-code="' +
                                escape(e.item_code) +
                                '" data-qty="' +
                                escape(e.qty) +
                                '"\ndata-description="' +
                                escape(e.description) +
                                '" data-set-no="' +
                                escape(e.set_no) +
                                '">\n    +\n</button>\n</span>\n\n    <input class="form-control text-center cart-qty" readonly onchange="updatetotal(this)" value=' +
                                frappe.ellipsis(e.packed_quantity, 18) +
                                " data-item-code=" +
                                frappe.ellipsis(e.item_code, 18) +
                                ' style="max-width: 70px;">\n    <span class="input-group-prepend d-sm-inline-block">\n    <button class="btn cart-btn" data-dir="dwn" style="padding:var(--padding-xs) var(--padding-sm);" onclick="updateQty(this)" data-item-code="' +
                                escape(e.item_code) +
                                '" data-qty="' +
                                escape(e.qty) +
                                '"\n    data-description="' +
                                escape(e.description) +
                                '" data-set-no="' +
                                escape(e.set_no) +
                                '">\n        –\n    </button>\n</span>\n   \n    </div>\n\n<div>\n    \n    </div>\n</div>\n\n</td></tr>'),
                            (a += e.packed_quantity));
                    }),
                    (n +=
                        ' </tbody>\n    \n\t<tfoot class="cart-tax-items">\n\t\t\x3c!-- Total at the end of the cart items --\x3e\n<tr style="background-color: rgb(236, 238, 240)!important;">\n\n<th  colspan="2" class="text-right item-grand-total" style="font-size: 12px; width:70%;" >Total Set Qty\n</th>\n<th class="text-left item-grand-total totals" style=" width:30%" >\n' +
                        a +
                        "\n</th>\n</tr>\n\t</tfoot>\n\n</table></div>\n<script>\nfunction updatetotal(elmnt) {\n\t\n\tvar btn = $(elmnt)\n\tvar tot=parseInt(btn.val().trim())+(isNaN($(elmnt).closest('table').find('tfoot th:eq(1)').text()) ? 0 : parseInt($(elmnt).closest('table').find('tfoot th:eq(1)').text()))\n\t$(elmnt).closest('table').find('tfoot th:eq(1)').text(tot)\n}\n\nfunction updateQty(elmnt) {\n\tvar tot=isNaN($(elmnt).closest('table').find('tfoot th:eq(1)').text()) ? 0 : parseInt($(elmnt).closest('table').find('tfoot th:eq(1)').text());\n\t\n\tvar btn = $(elmnt),\n\t\t\tinput = btn.closest('.number-spinner').find('input'),\n\t\t\toldValue = input.val().trim(),\n\t\t\tnewVal = 0;\n\t\n\t\tif (btn.attr('data-dir') == 'up') {\n\t\t\tnewVal = parseInt(oldValue) + 1;\n\t\t\t\n\t\t\tif(((isNaN(tot)?0:parseInt(tot))+1)>parseInt($('.combo-total-qty').val()))\n\t\t\t{\n\t\t\t\tnewVal=oldValue;\n\t\t\t\tfrappe.show_alert({\n\t\t\t\t\tindicator: 'red',\n\t\t\t\t\tmessage: \"Selected Quantity exceeded Total Quantity :\"+$('.combo-total-qty').val()\n\t\t\t\t});\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttot=(isNaN(tot)?0:parseInt(tot))+1;\n\t\t\t\tvar flag=0;\t\t\n\t\t\t\tcur_pos.combo_item_details.combo_items.forEach(item => {\t\t\t\t\n\t\t\t\tif(item.item_code==decodeURI(btn.attr('data-item-code')))\n\t\t\t\t{\n\t\t\t\t\titem.packed_quantity=newVal;flag=1;\n\t\t\t\t}\n\t\t\t\t})\n\t\t\t\tif(flag==0){\n\t\t\t\t\n\t\t\t\t\tvar cur_item={};\n\t\t\t\t\tvar item_code=String(btn.attr(\"data-item-code\"));\n\t\t\t\t\tcur_item.item_code=decodeURI(item_code)\n                    cur_item.parent_item=cur_pos.combo_item_details.current_item.item_code\n\t\t\t\t\tcur_item.packed_quantity=newVal\n\t\t\t\t\tcur_item.set_no=btn.attr(\"data-set-no\")\n\t\t\t\t\tcur_item.combo_qty=btn.attr(\"data-qty\")\n\t\t\t\t\tcur_item.default_item_in_pos=0\n\t\t\t\t\tcur_pos.combo_item_details.combo_items.push(cur_item)\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t} else {\n            if(parseInt($('.combo-total-qty').val())<0){\n                newVal = parseInt(oldValue) - 1;\n\t\t\t\ttot=(isNaN(tot)?0:parseInt(tot))-1;\n\t\t\t\tvar flag=0;\t\t\n\t\t\t\tcur_pos.combo_item_details.combo_items.forEach(item => {\t\t\t\t\n\t\t\t\tif(item.item_code==decodeURI(btn.attr('data-item-code')))\n\t\t\t\t{\n\t\t\t\t\titem.packed_quantity=newVal;flag=1;\n\t\t\t\t}\n\t\t\t\t})\n\t\t\t\tif(flag==0){\n\t\t\t\t\n\t\t\t\t\tvar cur_item={};\n\t\t\t\t\tvar item_code=String(btn.attr(\"data-item-code\"));\n\t\t\t\t\tcur_item.item_code=decodeURI(item_code)\n\t\t\t\t\tcur_item.parent_item=cur_pos.combo_item_details.current_item.item_code\n\t\t\t\t\tcur_item.packed_quantity=newVal\n\t\t\t\t\tcur_item.set_no=btn.attr(\"data-set-no\")\n\t\t\t\t\tcur_item.combo_qty=btn.attr(\"data-qty\")\n\t\t\t\t\tcur_item.default_item_in_pos=0\n\t\t\t\t\tcur_pos.combo_item_details.combo_items.push(cur_item)\n\t\t\t\t\t\n\t\t\t\t}\n            }\n            else{\n                if(oldValue>=1){\n                    newVal = parseInt(oldValue) - 1;\n                    tot=(isNaN(tot)?0:parseInt(tot))-1;\n                    var flag=0;\t\t\n                    cur_pos.combo_item_details.combo_items.forEach(item => {\t\t\t\t\n                    if(item.item_code==decodeURI(btn.attr('data-item-code')))\n                    {\n                        item.packed_quantity=newVal;flag=1;\n                    }\n                    })\n                    if(flag==0){\n                    \n                        var cur_item={};\n                        var item_code=String(btn.attr(\"data-item-code\"));\n                        cur_item.item_code=decodeURI(item_code)\n                        cur_item.parent_item=cur_pos.combo_item_details.current_item.item_code\n                        cur_item.packed_quantity=newVal\n                        cur_item.set_no=btn.attr(\"data-set-no\")\n                        cur_item.combo_qty=btn.attr(\"data-qty\")\n                        cur_item.default_item_in_pos=0\n                        cur_pos.combo_item_details.combo_items.push(cur_item)\n                        \n                    }\n                }\n            }\n\t\t\t\n\n\t\t\t\n\t\t}\n\t\tinput.val(newVal);\n\t\t$(elmnt).closest('table').find('tfoot th:eq(1)').text(tot)\n\t\t\n\t\n  }\n  function changetotqty(elmnt) { \n\t\tcur_pos.combo_item_details.combo_items.forEach(item => {\t\t\t\t\n\t\t\tif(item.default_item_in_pos==1)\n\t\t\t{\n\t\t\t\titem.item_qty=$('.combo-total-qty').val();\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(item.item_qty>$('.combo-total-qty').val())\n\t\t\t\t{\n\t\t\t\t\t\n\t\t\t\t\tfrappe.show_alert({\n\t\t\t\t\t\tindicator: 'red',\n\t\t\t\t\t\tmessage: \"Selected Quantity exceeded Total Quantity :\"+$('.combo-total-qty').val()\n\t\t\t});\n\t\t\t$('.combo-total-qty').val(0)\n\t\t\t\t}\n\t\t\t}\n\t\t\t})\n\t\t\n\t}\n</script>")
                );
            }
        });
})();
//# sourceMappingURL=point-of-sale.min.js.map
